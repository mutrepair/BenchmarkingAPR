{
          "0": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> 2);        }\n    }",
          "1": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn ((m >> (k - e)) ^<> 1L);        }\n    }",
          "2": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> 0L);        }\n    }",
          "3": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m & (k - e)) ^<> 1L);        }\n    }",
          "4": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (long)((m >> (k - e)) ^<> 1L);        }\n    }",
          "5": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (m - e)) ^<> 1L);        }\n    }",
          "6": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m <= (k - e)) ^<> 1L);        }\n    }",
          "7": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "8": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m < (k - e)) ^<> 1L);        }\n    }",
          "9": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m > (k - e)) ^<> 1L);        }\n    }",
          "10": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (e - e)) ^<> 1L);        }\n    }",
          "11": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - m)) ^<> 1L);        }\n    }",
          "12": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((e >> (k - e)) ^<> 1L);        }\n    }",
          "13": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m | (k - e)) ^<> 1L);        }\n    }",
          "14": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >>> (k - e)) ^<> 1L);        }\n    }",
          "15": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m - (k - e)) ^<> 1L);        }\n    }",
          "16": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >= (k - e)) ^<> 1L);        }\n    }",
          "17": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m % (k - e)) ^<> 1L);        }\n    }",
          "18": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn 0;        }\n    }",
          "19": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> 1);        }\n    }",
          "20": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> -1);        }\n    }",
          "21": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k >= e)) ^<> 1L);        }\n    }",
          "22": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn ((sign(bits) == 0L))?0:1;        }\n    }",
          "23": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> ( - e)) ^<> 1L);        }\n    }",
          "24": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k <= e)) ^<> 1L);        }\n    }",
          "25": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn ((sign(bits) == 0L))?1:0;        }\n    }",
          "26": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)(( >> (k - e)) ^<> 1L);        }\n    }",
          "27": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((k >> (k - e)) ^<> 1L);        }\n    }",
          "28": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (bits - e)) ^<> 1L);        }\n    }",
          "29": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (m >> (k - e));        }\n    }",
          "30": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((bits >> (k - e)) ^<> 1L);        }\n    }",
          "31": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> 52);        }\n    }",
          "32": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> true);        }\n    }",
          "33": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (i - e)) ^<> 1L);        }\n    }",
          "34": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn m;        }\n    }",
          "35": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k > e)) ^<> 1L);        }\n    }",
          "36": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (offset - e)) ^<> 1L);        }\n    }",
          "37": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((i >> (k - e)) ^<> 1L);        }\n    }",
          "38": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - )) ^<> 1L);        }\n    }",
          "39": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - k)) ^<> 1L);        }\n    }",
          "40": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - bits)) ^<> 1L);        }\n    }",
          "41": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((offset >> (k - e)) ^<> 1L);        }\n    }",
          "42": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k == e)) ^<> 1L);        }\n    }",
          "43": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> \"null\");        }\n    }",
          "44": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - i)) ^<> 1L);        }\n    }",
          "45": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn ((sign(bits) == 0L))?mantissa(bits):-mantissa(bits);        }\n    }",
          "46": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - offset)) ^<> 1L);        }\n    }",
          "47": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k >> e)) ^<> 1L);        }\n    }",
          "48": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> false);        }\n    }",
          "49": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k < e)) ^<> 1L);        }\n    }",
          "50": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) <= 1L);        }\n    }",
          "51": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> 0);        }\n    }",
          "52": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) < 1L);        }\n    }",
          "53": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)(m >> (k - e));        }\n    }",
          "54": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) ^<> null);        }\n    }",
          "55": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) & 1L);        }\n    }",
          "56": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k != e)) ^<> 1L);        }\n    }",
          "57": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k >>> e)) ^<> 1L);        }\n    }",
          "58": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn 0;            return (int) ((m >> (k - e)) ^ 1L);        }\n    }",
          "59": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) > 1L);        }\n    }",
          "60": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) - 1L);        }\n    }",
          "61": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) >= 1L);        }\n    }",
          "62": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k % e)) ^<> 1L);        }\n    }",
          "63": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (int)((m >> (k - e)) | 1L);        }\n    }",
          "64": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn;\n            return (int) ((m >> (k - e)) ^ 1L);        }\n    }",
          "65": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nbreak;\n            return (int) ((m >> (k - e)) ^ 1L);        }\n    }",
          "66": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && ((m >> (k - e)) ^<> 1L)))?0:1;        }\n    }",
          "67": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && ((m >> (k - e)) ^<> 1L)))?0:0;        }\n    }",
          "68": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m > e) && ((m >> (k - e)) ^<> 1L)))?0:1;        }\n    }",
          "69": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && ((m >> (k - e)) ^<> 1L)))?0:-mantissa(bits);        }\n    }",
          "70": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (m == e)))?(m > m):(int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "71": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (m == e)))?(m < m):(int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "72": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (m == e)))?(m > e):(int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "73": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (m != e)))?(m > m):(int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "74": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (e == e)))?(m > m):(int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "75": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (m == e)))?(m < e):(int)((m >> (k - e)) ^<> 1L);        }\n    }",
          "76": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n        } else if (k > (e + 52)) {\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\nreturn (((m == e) && (m == e)))?(m > m):this.m;        }\n    }"
}