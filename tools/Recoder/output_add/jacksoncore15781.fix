{
          "0": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> 1);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "1": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) & 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "2": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> 0);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "3": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) | 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "4": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >>> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "5": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "6": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) % 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "7": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) - 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "8": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) << 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "9": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) * 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "10": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)b24[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "11": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) / 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "12": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 2) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "13": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) > 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "14": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 1) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "15": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)_outputBuffer[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "16": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)_outputTail[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "17": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] >>> 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "18": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] | 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "19": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] % 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "20": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] - 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "21": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)_outputBuffer & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "22": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)inputLeft & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "23": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 0) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "24": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] >> 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "25": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)inputPtr[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "26": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\n_flushBuffer();\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "27": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)_outputTail & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "28": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> -1);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "29": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] * 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "30": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] / 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "31": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int) & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "32": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)inputEnd & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "33": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "34": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\n_outputTail += (((int)input[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "35": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] << 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "36": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] <= 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "37": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int) & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "38": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)inputEnd[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "39": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nreturn;\n                b24 |= (((int)input[inputPtr++]) & 255) >> 8;            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "40": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 += (((int)input[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "41": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\n_outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n                b24 |= (((int)input[inputPtr++]) & 255) >> 8;            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "42": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\n_flushBuffer();\n                b24 |= (((int)input[inputPtr++]) & 255) >> 8;            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "43": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> 16);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "44": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\n_outputTail -= (((int)input[inputPtr++] & 255) >> 8);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "45": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nif((inputLeft == 2)){\n}\n                b24 |= (((int)input[inputPtr++]) & 255) >> 8;            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "46": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> 2);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "47": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\n_outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "48": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nb24 |= (((int)input[inputPtr++] & 255) >> 255);\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "49": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\nbreak;\n                b24 |= (((int)input[inputPtr++]) & 255) >> 8;            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }",
          "50": "    protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd)\n        throws IOException, JsonGenerationException\n    {\n        // Encoding is by chunks of 3 input, 4 output chars, so:\n        int safeInputEnd = inputEnd - 3;\n        // Let's also reserve room for possible (and quoted) lf char each round\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n\n        // Ok, first we loop through all full triplets of data:\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            // First, mash 3 bytes into lsb of 32-bit int\n            int b24 = ((int) input[inputPtr++]) << 8;\n            b24 |= ((int) input[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) input[inputPtr++]) & 0xFF);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                // note: must quote in JSON value\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n\n        // And then we may have 1 or 2 leftover bytes to encode\n        int inputLeft = inputEnd - inputPtr; // 0, 1 or 2\n        if (inputLeft > 0) { // yes, but do we have room for output?\n            if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                _flushBuffer();\n            }\n            int b24 = ((int) input[inputPtr++]) << 16;\n            if (inputLeft == 2) {\ncontinue;\n                b24 |= (((int)input[inputPtr++]) & 255) >> 8;            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }"
}