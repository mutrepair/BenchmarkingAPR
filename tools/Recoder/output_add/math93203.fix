{
          "0": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "1": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nbreak;\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "2": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nreturn;\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "3": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = ((mt[(k + (M - N))] ^<> (y >>> 1)) ^<> MAG01[(y & 0x1)]);\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "4": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ny = ((mtCurr & 0x80000000) | (mtNext & 0x7fffffff));\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "5": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmtNext = mt[(k + 1)];\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "6": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ny = ((mt[(k + M)] ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "7": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmtNext = ((mt[(k + M)] ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "8": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (mt[(k + M)] ^<> (y >>> 1));\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "9": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ny = (mt[(k + M)] ^<> (y >>> 1));\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "10": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = ((mt[(k + (M - N))] ^<> (y >>> 1)) ^<> MAG01[(y & 0x1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "11": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmtNext = (mt[(k + M)] ^<> (y >>> 1));\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "12": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmtNext = mt[(k + 1)];\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "13": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ny = ((mtCurr & 0x80000000) | (mtNext & 0x7fffffff));\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "14": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ncontinue;\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "15": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (y >>> 1);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "16": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nfor(int k = (N - M);(k < (N - 1));++k) {                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "17": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (y ^<> 1);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "18": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] += ((mt[(k + M)] ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "19": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((mt[(k + M)] ^<> (y >>> 1))){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "20": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ny = (y ^<> 1);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "21": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((mt[(k + (M - N))] ^<> (y >>> 1))){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "22": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\ny = (y >>> 1);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "23": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = ((mtCurr & 0x80000000) | (mtNext & 0x7fffffff));\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "24": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (k + M);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "25": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (k < (N - 1));\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "26": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (M - N);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "27": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((mtNext & 0x7fffffff)){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "28": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((k != null)){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "29": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((y >>> 1)){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "30": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((mtCurr & 0x80000000)){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "31": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmtNext = (y ^<> 1);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "32": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = ((mt[(k + M)] ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "33": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((k < (N - M))){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "34": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((M - N)){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "35": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nfor(int k = 0;(k < (N - M));++k) {                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "36": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = ((mt[0] ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "37": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nif((k < (N - 1))){\n}\n                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y ^ 1];            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "38": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = ((mtCurr ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }",
          "39": "    protected int next(int bits) {\n\n        int y;\n\n        if (mti >= N) { // generate N words at one time\n            int mtNext = mt[0];\n            for (int k = 0; k < N - M; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\nmt[k] = (((mt[(k + M)] ^<> (y >>> 1)) ^<> MAG01[(y ^<> 1)]) + k);\n            }\n            for (int k = N - M; k < N - 1; ++k) {\n                int mtCurr = mtNext;\n                mtNext = mt[k + 1];\n                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);\n                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];\n            }\n            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);\n            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];\n\n            mti = 0;\n        }\n\n        y = mt[mti++];\n\n        // tempering\n        y ^=  y >>> 11;\n        y ^= (y <<   7) & 0x9d2c5680;\n        y ^= (y <<  15) & 0xefc60000;\n        y ^=  y >>> 18;\n\n        return y >>> (32 - bits);\n\n    }"
}