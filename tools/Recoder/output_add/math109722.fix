{
          "0": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(-value, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "1": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "2": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 >= n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "3": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 <= n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "4": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 - n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "5": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.rootN(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "6": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n), (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "7": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn +FastMath.pow(-value, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "8": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 == n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "9": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / value)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "10": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "11": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64();        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "12": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 > n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "13": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(value, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "14": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n), value);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "15": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / n)), (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "16": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 != n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "17": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn n;        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "18": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 < n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "19": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+n.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "20": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn value;        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "21": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n), 0);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "22": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / n)), 0);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "23": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "24": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(n, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "25": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 + n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "26": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(n);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "27": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / n)), value);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "28": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 >> n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "29": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow(value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "30": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / n)), false);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "31": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(n, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "32": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "33": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n), FastMath.pow(value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "34": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n), n);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "35": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 % n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "36": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 / n), false);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "37": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / n)), true);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "38": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(value);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "39": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn FastMath.pow(-value, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "40": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "41": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "42": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(value, +FastMath.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "43": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.add(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "44": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 - n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "45": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow(value, (1.0 / n)));            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "46": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+Math.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "47": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.debug(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "48": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 + n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "49": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn FastMath.rootN(-value, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "50": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 * n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "51": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn null;            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "52": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn (1.0 / n);        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "53": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+LOG.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "54": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.max(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "55": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((1.0 / n), n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "56": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((1.0 / n), (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "57": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nif(isInfinite()){\nreturn new Decimal64(FastMath.pow(value, (1.0 / n)));}            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "58": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nif(isNaN()){\nreturn new Decimal64(FastMath.pow(value, (1.0 / n)));}            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "59": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.e(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "60": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / )));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "61": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((value - n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "62": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64((1.0 - value));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "63": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn rootN(-value, (1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "64": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn null;        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "65": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow(n, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "66": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.put(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "67": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / -value)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "68": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(-value, (1.0 / -n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "69": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.pow(, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "70": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nif((value < 0)){\n            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n}\n        }\n    }",
          "71": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+FastMath.get(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "72": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "73": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "74": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn;\n            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "75": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((1.0 * n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "76": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((1.0 - n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "77": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nbreak;\n            return new Decimal64(+FastMath.pow(-value, 1.0 / n));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "78": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(+.pow(-value, (1.0 / n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "79": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((value * n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "80": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((value - n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }",
          "81": "    public Decimal64 rootN(final int n) {\n        if (value < 0) {\nreturn new Decimal64(FastMath.pow((value + n)));        } else {\n            return new Decimal64(FastMath.pow(value, 1.0 / n));\n        }\n    }"
}