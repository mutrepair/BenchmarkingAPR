{
          "0": "  private JSTypeExpression getType(int typefield) {\nif((MASK_TYPEFIELD ^<> bitset)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "1": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) >= typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "2": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) > typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "3": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) < typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "4": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "5": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) <= typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "6": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) != typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "7": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) || typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "8": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) && typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "9": "  private JSTypeExpression getType(int typefield) {\nif(((bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "10": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_FLAGS ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "11": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_CONSTANT ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "12": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_CONSTRUCTOR ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "13": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_DEFINE ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "14": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_HIDDEN ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "15": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_PRESERVETRY ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "16": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOCHECK ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "17": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_OVERRIDE ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "18": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOALIAS ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "19": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_DEPRECATED ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "20": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_INTERFACE ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "21": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_EXPORT ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "22": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOSHADOW ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "23": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_FILEOVERVIEW ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "24": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_IMPLICITCAST ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "25": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOSIDEEFFECTS ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "26": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_EXTERNS ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "27": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_JAVADISPATCH ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "28": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOCOMPILE ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "29": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_CONSISTIDGEN ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "30": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_IDGEN ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "31": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_EXPOSE ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "32": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_STRUCT ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "33": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_DICT ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "34": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_STALBEIDGEN ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "35": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_TYPE ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "36": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_RETURN ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "37": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_ENUM ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "38": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_TYPEDEF ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "39": "  private JSTypeExpression getType(int typefield) {\nif(((typefield ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "40": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_FLAGS) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "41": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_CONSTANT) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "42": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_CONSTRUCTOR) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "43": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_DEFINE) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "44": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_HIDDEN) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "45": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_PRESERVETRY) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "46": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_NOCHECK) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "47": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_OVERRIDE) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "48": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_NOALIAS) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "49": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_DEPRECATED) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "50": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_INTERFACE) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "51": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_EXPORT) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "52": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_NOSHADOW) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "53": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_FILEOVERVIEW) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "54": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_IMPLICITCAST) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "55": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_NOSIDEEFFECTS) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "56": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_EXTERNS) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "57": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_JAVADISPATCH) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "58": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_NOCOMPILE) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "59": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_CONSISTIDGEN) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "60": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_IDGEN) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "61": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_EXPOSE) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "62": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_STRUCT) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "63": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_DICT) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "64": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_STALBEIDGEN) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "65": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> MASK_TYPEFIELD) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "66": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> TYPEFIELD_TYPE) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "67": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> TYPEFIELD_RETURN) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "68": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> TYPEFIELD_ENUM) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "69": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> TYPEFIELD_TYPEDEF) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "70": "  private JSTypeExpression getType(int typefield) {\nif(((type ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "71": "  private JSTypeExpression getType(int typefield) {\nif(hasBrackets()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "72": "  private JSTypeExpression getType(int typefield) {\nif(isConsistentIdGenerator()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "73": "  private JSTypeExpression getType(int typefield) {\nif(isStableIdGenerator()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "74": "  private JSTypeExpression getType(int typefield) {\nif(isConstant()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "75": "  private JSTypeExpression getType(int typefield) {\nif(isConstructor()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "76": "  private JSTypeExpression getType(int typefield) {\nif(makesStructs()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "77": "  private JSTypeExpression getType(int typefield) {\nif(makesDicts()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "78": "  private JSTypeExpression getType(int typefield) {\nif(isDefine()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "79": "  private JSTypeExpression getType(int typefield) {\nif(isHidden()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "80": "  private JSTypeExpression getType(int typefield) {\nif(isNoTypeCheck()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "81": "  private JSTypeExpression getType(int typefield) {\nif(shouldPreserveTry()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "82": "  private JSTypeExpression getType(int typefield) {\nif(isOverride()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "83": "  private JSTypeExpression getType(int typefield) {\nif(isNoAlias()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "84": "  private JSTypeExpression getType(int typefield) {\nif(isDeprecated()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "85": "  private JSTypeExpression getType(int typefield) {\nif(isInterface()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "86": "  private JSTypeExpression getType(int typefield) {\nif(isExport()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "87": "  private JSTypeExpression getType(int typefield) {\nif(isExpose()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "88": "  private JSTypeExpression getType(int typefield) {\nif(isNoShadow()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "89": "  private JSTypeExpression getType(int typefield) {\nif(isIdGenerator()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "90": "  private JSTypeExpression getType(int typefield) {\nif(isImplicitCast()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "91": "  private JSTypeExpression getType(int typefield) {\nif(isNoSideEffects()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "92": "  private JSTypeExpression getType(int typefield) {\nif(isExterns()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "93": "  private JSTypeExpression getType(int typefield) {\nif(isJavaDispatch()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "94": "  private JSTypeExpression getType(int typefield) {\nif(isNoCompile()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "95": "  private JSTypeExpression getType(int typefield) {\nif(containsDeclaration()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "96": "  private JSTypeExpression getType(int typefield) {\nif(lazyInitDocumentation()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "97": "  private JSTypeExpression getType(int typefield) {\nif(hasType()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "98": "  private JSTypeExpression getType(int typefield) {\nif(hasEnumParameterType()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "99": "  private JSTypeExpression getType(int typefield) {\nif(hasTypedefType()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "100": "  private JSTypeExpression getType(int typefield) {\nif(hasReturnType()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "101": "  private JSTypeExpression getType(int typefield) {\nif(hasThisType()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "102": "  private JSTypeExpression getType(int typefield) {\nif(hasBaseType()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "103": "  private JSTypeExpression getType(int typefield) {\nif(hasFileOverview()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "104": "  private JSTypeExpression getType(int typefield) {\nif(hasModifies()){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "105": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> typefield) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "106": "  private JSTypeExpression getType(int typefield) {\nsetStruct();\n    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "107": "  private JSTypeExpression getType(int typefield) {\nsetDict();\n    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "108": "  private JSTypeExpression getType(int typefield) {\nlazyInitInfo();\n    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "109": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (MASK_TYPEFIELD ^<> bitset))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "110": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> type) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "111": "  private JSTypeExpression getType(int typefield) {\nif(hasBrackets(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "112": "  private JSTypeExpression getType(int typefield) {\nif(isConsistentIdGenerator(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "113": "  private JSTypeExpression getType(int typefield) {\nif(isStableIdGenerator(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "114": "  private JSTypeExpression getType(int typefield) {\nif(isConstant(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "115": "  private JSTypeExpression getType(int typefield) {\nif(isConstructor(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "116": "  private JSTypeExpression getType(int typefield) {\nif(makesStructs(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "117": "  private JSTypeExpression getType(int typefield) {\nif(makesDicts(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "118": "  private JSTypeExpression getType(int typefield) {\nif(isDefine(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "119": "  private JSTypeExpression getType(int typefield) {\nif(isHidden(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "120": "  private JSTypeExpression getType(int typefield) {\nif(isNoTypeCheck(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "121": "  private JSTypeExpression getType(int typefield) {\nif(shouldPreserveTry(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "122": "  private JSTypeExpression getType(int typefield) {\nif(isOverride(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "123": "  private JSTypeExpression getType(int typefield) {\nif(isNoAlias(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "124": "  private JSTypeExpression getType(int typefield) {\nif(isDeprecated(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "125": "  private JSTypeExpression getType(int typefield) {\nif(isInterface(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "126": "  private JSTypeExpression getType(int typefield) {\nif(isExport(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "127": "  private JSTypeExpression getType(int typefield) {\nif(isExpose(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "128": "  private JSTypeExpression getType(int typefield) {\nif(isNoShadow(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "129": "  private JSTypeExpression getType(int typefield) {\nif(isIdGenerator(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "130": "  private JSTypeExpression getType(int typefield) {\nif(isImplicitCast(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "131": "  private JSTypeExpression getType(int typefield) {\nif(isNoSideEffects(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "132": "  private JSTypeExpression getType(int typefield) {\nif(isExterns(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "133": "  private JSTypeExpression getType(int typefield) {\nif(isJavaDispatch(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "134": "  private JSTypeExpression getType(int typefield) {\nif(isNoCompile(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "135": "  private JSTypeExpression getType(int typefield) {\nif(containsDeclaration(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "136": "  private JSTypeExpression getType(int typefield) {\nif(lazyInitDocumentation(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "137": "  private JSTypeExpression getType(int typefield) {\nif(hasType(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "138": "  private JSTypeExpression getType(int typefield) {\nif(hasEnumParameterType(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "139": "  private JSTypeExpression getType(int typefield) {\nif(hasTypedefType(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "140": "  private JSTypeExpression getType(int typefield) {\nif(hasReturnType(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "141": "  private JSTypeExpression getType(int typefield) {\nif(hasThisType(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "142": "  private JSTypeExpression getType(int typefield) {\nif(hasBaseType(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "143": "  private JSTypeExpression getType(int typefield) {\nif(hasFileOverview(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "144": "  private JSTypeExpression getType(int typefield) {\nif(hasModifies(typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "145": "  private JSTypeExpression getType(int typefield) {\nif(MASK_TYPEFIELD){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "146": "  private JSTypeExpression getType(int typefield) {\nif(typefield){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "147": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) == typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "148": "  private JSTypeExpression getType(int typefield) {\nif((MASK_TYPEFIELD ^<> bitset)){\n    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n}\n  }",
          "149": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) && (MASK_TYPEFIELD ^<> bitset))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "150": "  private JSTypeExpression getType(int typefield) {\nif(hasBrackets(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "151": "  private JSTypeExpression getType(int typefield) {\nif(isConsistentIdGenerator(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "152": "  private JSTypeExpression getType(int typefield) {\nif(isStableIdGenerator(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "153": "  private JSTypeExpression getType(int typefield) {\nif(isConstant(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "154": "  private JSTypeExpression getType(int typefield) {\nif(isConstructor(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "155": "  private JSTypeExpression getType(int typefield) {\nif(makesStructs(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "156": "  private JSTypeExpression getType(int typefield) {\nif(makesDicts(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "157": "  private JSTypeExpression getType(int typefield) {\nif(isDefine(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "158": "  private JSTypeExpression getType(int typefield) {\nif(isHidden(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "159": "  private JSTypeExpression getType(int typefield) {\nif(isNoTypeCheck(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "160": "  private JSTypeExpression getType(int typefield) {\nif(shouldPreserveTry(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "161": "  private JSTypeExpression getType(int typefield) {\nif(isOverride(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "162": "  private JSTypeExpression getType(int typefield) {\nif(isNoAlias(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "163": "  private JSTypeExpression getType(int typefield) {\nif(isDeprecated(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "164": "  private JSTypeExpression getType(int typefield) {\nif(isInterface(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "165": "  private JSTypeExpression getType(int typefield) {\nif(isExport(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "166": "  private JSTypeExpression getType(int typefield) {\nif(isExpose(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "167": "  private JSTypeExpression getType(int typefield) {\nif(isNoShadow(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "168": "  private JSTypeExpression getType(int typefield) {\nif(isIdGenerator(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "169": "  private JSTypeExpression getType(int typefield) {\nif(isImplicitCast(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "170": "  private JSTypeExpression getType(int typefield) {\nif(isNoSideEffects(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "171": "  private JSTypeExpression getType(int typefield) {\nif(isExterns(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "172": "  private JSTypeExpression getType(int typefield) {\nif(isJavaDispatch(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "173": "  private JSTypeExpression getType(int typefield) {\nif(isNoCompile(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "174": "  private JSTypeExpression getType(int typefield) {\nif(containsDeclaration(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "175": "  private JSTypeExpression getType(int typefield) {\nif(lazyInitDocumentation(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "176": "  private JSTypeExpression getType(int typefield) {\nif(hasType(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "177": "  private JSTypeExpression getType(int typefield) {\nif(hasEnumParameterType(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "178": "  private JSTypeExpression getType(int typefield) {\nif(hasTypedefType(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "179": "  private JSTypeExpression getType(int typefield) {\nif(hasReturnType(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "180": "  private JSTypeExpression getType(int typefield) {\nif(hasThisType(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "181": "  private JSTypeExpression getType(int typefield) {\nif(hasBaseType(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "182": "  private JSTypeExpression getType(int typefield) {\nif(hasFileOverview(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "183": "  private JSTypeExpression getType(int typefield) {\nif(hasModifies(MASK_TYPEFIELD)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "184": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD >= bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "185": "  private JSTypeExpression getType(int typefield) {\nif(hasBrackets()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "186": "  private JSTypeExpression getType(int typefield) {\nif(isConsistentIdGenerator()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "187": "  private JSTypeExpression getType(int typefield) {\nif(isStableIdGenerator()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "188": "  private JSTypeExpression getType(int typefield) {\nif(isConstant()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "189": "  private JSTypeExpression getType(int typefield) {\nif(isConstructor()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "190": "  private JSTypeExpression getType(int typefield) {\nif(makesStructs()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "191": "  private JSTypeExpression getType(int typefield) {\nif(makesDicts()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "192": "  private JSTypeExpression getType(int typefield) {\nif(isDefine()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "193": "  private JSTypeExpression getType(int typefield) {\nif(isHidden()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "194": "  private JSTypeExpression getType(int typefield) {\nif(isNoTypeCheck()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "195": "  private JSTypeExpression getType(int typefield) {\nif(shouldPreserveTry()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "196": "  private JSTypeExpression getType(int typefield) {\nif(isOverride()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "197": "  private JSTypeExpression getType(int typefield) {\nif(isNoAlias()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "198": "  private JSTypeExpression getType(int typefield) {\nif(isDeprecated()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "199": "  private JSTypeExpression getType(int typefield) {\nif(isInterface()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "200": "  private JSTypeExpression getType(int typefield) {\nif(isExport()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "201": "  private JSTypeExpression getType(int typefield) {\nif(isExpose()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "202": "  private JSTypeExpression getType(int typefield) {\nif(isNoShadow()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "203": "  private JSTypeExpression getType(int typefield) {\nif(isIdGenerator()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "204": "  private JSTypeExpression getType(int typefield) {\nif(isImplicitCast()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "205": "  private JSTypeExpression getType(int typefield) {\nif(isNoSideEffects()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "206": "  private JSTypeExpression getType(int typefield) {\nif(isExterns()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "207": "  private JSTypeExpression getType(int typefield) {\nif(isJavaDispatch()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "208": "  private JSTypeExpression getType(int typefield) {\nif(isNoCompile()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "209": "  private JSTypeExpression getType(int typefield) {\nif(containsDeclaration()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "210": "  private JSTypeExpression getType(int typefield) {\nif(lazyInitDocumentation()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "211": "  private JSTypeExpression getType(int typefield) {\nif(hasType()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "212": "  private JSTypeExpression getType(int typefield) {\nif(hasEnumParameterType()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "213": "  private JSTypeExpression getType(int typefield) {\nif(hasTypedefType()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "214": "  private JSTypeExpression getType(int typefield) {\nif(hasReturnType()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "215": "  private JSTypeExpression getType(int typefield) {\nif(hasThisType()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "216": "  private JSTypeExpression getType(int typefield) {\nif(hasBaseType()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "217": "  private JSTypeExpression getType(int typefield) {\nif(hasFileOverview()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "218": "  private JSTypeExpression getType(int typefield) {\nif(hasModifies()){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "219": "  private JSTypeExpression getType(int typefield) {\nif((typefield == ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "220": "  private JSTypeExpression getType(int typefield) {\nif((MASK_TYPEFIELD == typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "221": "  private JSTypeExpression getType(int typefield) {\nif(bitset){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "222": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD == bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "223": "  private JSTypeExpression getType(int typefield) {\nif((MASK_TYPEFIELD ^<> bitset)){\nreturn null;}    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "224": "  private JSTypeExpression getType(int typefield) {\nif((MASK_TYPEFIELD != typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "225": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (bitset == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "226": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (type == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "227": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (MASK_TYPEFIELD == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "228": "  private JSTypeExpression getType(int typefield) {\nif(((bitset.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "229": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_FLAGS.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "230": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_CONSTANT.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "231": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_CONSTRUCTOR.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "232": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_DEFINE.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "233": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_HIDDEN.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "234": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_PRESERVETRY.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "235": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOCHECK.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "236": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_OVERRIDE.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "237": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOALIAS.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "238": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_DEPRECATED.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "239": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_INTERFACE.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "240": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_EXPORT.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "241": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOSHADOW.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "242": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_FILEOVERVIEW.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "243": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_IMPLICITCAST.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "244": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOSIDEEFFECTS.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "245": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_EXTERNS.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "246": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_JAVADISPATCH.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "247": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_NOCOMPILE.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "248": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_CONSISTIDGEN.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "249": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_IDGEN.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "250": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_EXPOSE.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "251": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_STRUCT.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "252": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_DICT.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "253": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_STALBEIDGEN.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "254": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "255": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_TYPE.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "256": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_RETURN.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "257": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_ENUM.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "258": "  private JSTypeExpression getType(int typefield) {\nif(((TYPEFIELD_TYPEDEF.bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "259": "  private JSTypeExpression getType(int typefield) {\nif(((getParameterCount().bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "260": "  private JSTypeExpression getType(int typefield) {\nif(((getImplementedInterfaceCount().bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "261": "  private JSTypeExpression getType(int typefield) {\nif(((getExtendedInterfacesCount().bitset ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "262": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) == type)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "263": "  private JSTypeExpression getType(int typefield) {\nif(((typefield == bitset) || ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "264": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD <= bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "265": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD == typefield) || ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "266": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) + typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "267": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (typefield == type))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "268": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (typefield == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "269": "  private JSTypeExpression getType(int typefield) {\nif((( ^<> bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "270": "  private JSTypeExpression getType(int typefield) {\nif(((bitset == typefield) || ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "271": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) && (bitset == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "272": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) && (type == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "273": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (typefield == bitset))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "274": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) - typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "275": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) && (MASK_TYPEFIELD == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "276": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (type == type))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "277": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (bitset != typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "278": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD > bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "279": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD != bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "280": "  private JSTypeExpression getType(int typefield) {\nif(((typefield == MASK_TYPEFIELD) || ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "281": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD == bitset) || ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "282": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (type != typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "283": "  private JSTypeExpression getType(int typefield) {\nif(((bitset == bitset) || ((MASK_TYPEFIELD ^<> bitset) == typefield))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "284": "  private JSTypeExpression getType(int typefield) {\nif((((MASK_TYPEFIELD ^<> bitset) == typefield) || (bitset == bitset))){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "285": "  private JSTypeExpression getType(int typefield) {\nreturn null;    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n  }",
          "286": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> ) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "287": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD < bitset) == typefield)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "288": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) == bitset)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "289": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) == MASK_TYPEFIELD)){      return type;\n    } else {\n      return null;\n    }\n  }",
          "290": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) == typefield)){\n      return type;\n    } else {\n      return null;\n    }\n  }",
          "291": "  private JSTypeExpression getType(int typefield) {\nif(((MASK_TYPEFIELD ^<> bitset) == typefield)){\n    if ((MASK_TYPEFIELD ^ bitset) == typefield) {      return type;\n    } else {\n      return null;\n    }\n}\n  }"
}