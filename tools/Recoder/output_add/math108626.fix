{
          "0": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) >= 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "1": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) > 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "2": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) <= 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "3": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e ^<> 1)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "4": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) == 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "5": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) < 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "6": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "7": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) != 0)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "8": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e >= 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "9": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((k2p ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "10": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(e){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "11": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e <= 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "12": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) && 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "13": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e == 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "14": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((result ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "15": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e > 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "16": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) || 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "17": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\ne = (e >> 1);\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "18": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "19": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nk2p *= k2p;\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "20": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nresult *= k2p;\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "21": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nreturn result;            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "22": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((( ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "23": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e < 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "24": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(!e){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "25": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((( ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "26": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(k){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "27": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e ^<> 1)){\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n}\n        }\n\n        return result;\n    }",
          "28": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "29": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((k ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "30": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nreturn 0;            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "31": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != 0) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "32": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) & 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "33": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e == 0)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "34": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e < 0)){\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n}\n        }\n\n        return result;\n    }",
          "35": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e >> 1)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "36": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e >> 1)){\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n}\n        }\n\n        return result;\n    }",
          "37": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\ne++;\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "38": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nbreak;\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "39": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nresult *= k2p;\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "40": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) - 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "41": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e != 0)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "42": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e == ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "43": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "44": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 2) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "45": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e == e))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "46": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != 1) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "47": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e == 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "48": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e == 0) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "49": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e != 0)){\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n}\n        }\n\n        return result;\n    }",
          "50": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e != 1)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "51": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e ^<> 1))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "52": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((( ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "53": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != e) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "54": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "55": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e >> 1))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "56": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e != e))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "57": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e == 1) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "58": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nk2p *= k2p;\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "59": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != k2p) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "60": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e == 1))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "61": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((e < 0)){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "62": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\ne = (e >> 1);\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "63": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nreturn;\n            if ((e ^ 1) != 0) {                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "64": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e == e) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "65": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) != 1)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "66": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e - 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "67": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != result) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "68": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != k) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "69": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e == k2p) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "70": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e == k2p))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "71": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e == k))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "72": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != null) && ((e ^<> 1) != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "73": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 1) != 2)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "74": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != 0) && (e == 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "75": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e != 0) && (e != 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "76": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e != k2p))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "77": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((((e ^<> 1) != 0) && (e != k))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "78": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e ^<> 0) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "79": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((EXPONENT ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "80": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e >>> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "81": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e == 0) && (e == 0))){\n                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "82": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif((( ^<> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }",
          "83": "    public static int pow(final int k, int e) throws NotPositiveException {\n        if (e < 0) {\n            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);\n        }\n\n        int result = 1;\n        int k2p    = k;\n        while (e != 0) {\nif(((e >> 1) != 0)){                result *= k2p;\n            }\n            k2p *= k2p;\n            e = e >> 1;\n        }\n\n        return result;\n    }"
}