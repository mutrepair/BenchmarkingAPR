{
          "0": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f1.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "1": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(f1);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "2": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = .value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "3": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value();\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "4": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "5": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = .value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "6": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = c.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "7": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = .value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "8": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = p.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "9": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = .value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "10": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = s.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "11": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal long f2 = f.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "12": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(c);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "13": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = .value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "14": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(s);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "15": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif((f1 != null)){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "16": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value();\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "17": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "18": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(i);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "19": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = (double)f.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "20": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.integrate(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "21": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(ruleLength);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "22": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(f);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "23": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(0);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "24": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.getPoint(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "25": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value();\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "26": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(w);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "27": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, false);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "28": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.getWeight(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "29": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, true);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "30": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "31": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(1);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "32": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif((f1 == null)){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "33": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double  = f.value(p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "34": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif((p != null)){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "35": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif(( != null)){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "36": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif(!f1){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "37": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif((f1 == null)){\ncontinue;\n}            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "38": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nf.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "39": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(f.value(+p));\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "40": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, 0);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "41": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p++);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "42": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nf1++;\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "43": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(false);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "44": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(true);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "45": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(-p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "46": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, 1);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "47": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(2);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "48": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif(f1){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "49": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(-);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "50": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.debug(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "51": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal UnivariateFunction f2 = f.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "52": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f;\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "53": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif((f1 != 1)){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "54": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, w);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "55": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.f(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "56": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nif((f1 > 0)){\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n}\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "57": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal int f2 = f.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "58": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, 2);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "59": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(0, p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "60": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, i);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "61": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, c);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "62": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nreturn;\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "63": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\ns = t;\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "64": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nc = ((t - s) - y);\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "65": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal boolean f2 = f.value(+p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "66": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, );\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "67": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value(p, null);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "68": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nreturn (getWeight(0) * f.value(0d));            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "69": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nreturn s;            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "70": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nbreak;\n            final double f2 = f.value(+p);\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "71": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value((p + 1));\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "72": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = (double)f.value(p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "73": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }",
          "74": "    public double integrate(UnivariateFunction f) {\n        final int ruleLength = getNumberOfPoints();\n\n        if (ruleLength == 1) {\n            return getWeight(0) * f.value(0d);\n        }\n\n        final int iMax = ruleLength / 2;\n        double s = 0;\n        double c = 0;\n        for (int i = 0; i < iMax; i++) {\n            final double p = getPoint(i);\n            final double w = getWeight(i);\n\n            final double f1 = f.value(p);\nfinal double f2 = f.value((p + p));\n\n            final double y = w * (f1 + f2) - c;\n            final double t = s + y;\n\n            c = (t - s) - y;\n            s = t;\n        }\n\n        if (ruleLength % 2 != 0) {\n            final double w = getWeight(iMax);\n\n            final double y = w * f.value(0d) - c;\n            final double t = s + y;\n\n            s = t;\n        }\n\n        return s;\n    }"
}