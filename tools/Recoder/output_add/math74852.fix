{
          "0": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "1": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = theta2;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "2": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "3": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "4": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = theta;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "5": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "6": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((+243.0 / 8.0) + ((theta * 135.0) / 8.0));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "7": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = h;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "8": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = 0;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "9": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = 1;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "10": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "11": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\ndouble b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "12": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = b2;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "13": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = 2;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "14": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) - 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "15": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = +243.0;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "16": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0))))))) * theta);\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "17": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal long ;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "18": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal int ;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "19": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = -27.0;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "20": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) - (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "21": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) / (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "22": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) * (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "23": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0))))))) * theta2);\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "24": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0))))))) / theta);\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "25": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) + 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "26": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((b0 * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "27": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) * 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "28": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta2 * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "29": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b3 = (h * ((4.0 / 3.0) + (theta2 * (-22.0 + (theta * ((152.0 / 3.0) + (theta * -30.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "30": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((h * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "31": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double ;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "32": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal Object ;\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "33": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) % 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "34": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b0 = (h * ((-1.0 / 12.0) + (theta * (1.0 + (theta * ((-15.0 / 4.0) + (theta * ((16.0 / 3.0) + ((theta * -5.0) / 2.0)))))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "35": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "36": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (b0 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "37": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) | (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "38": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) << 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "39": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) % (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "40": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nreturn;\n        final double b2 = h * (-27.0/32.0 + theta2 * (459.0/32.0 + theta * (+243.0/8.0 + theta * 135.0/8.0)));        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "41": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) << (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "42": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (h * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "43": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) | 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "44": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) & 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "45": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) & (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "46": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (h * ((-27.0 / 32.0) + (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) >> 8.0)))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "47": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\n        final double b2 = h * (-27.0/32.0 + theta2 * (459.0/32.0 + theta * (+243.0/8.0 + theta * 135.0/8.0)));        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "48": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (((((theta + theta) * theta) * theta) * (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0)))))) * (theta2 * ((459.0 / 32.0) + (theta * ((+243.0 / 8.0) + ((theta * 135.0) / 8.0))))));\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "49": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (((((((theta * theta) * theta) + theta) * theta) * theta) * 8.0) * 8.0);\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "50": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = (((((((theta * theta) * theta) * theta) * theta) * theta) * 8.0) * 8.0);\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }",
          "51": "  protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                          final double oneMinusThetaH) {\n\n    final double bDot0 = 1 + theta * (-15.0/2.0 + theta * (16.0 - 10.0 * theta));\n    final double bDot2 = theta * (459.0/16.0 + theta * (-729.0/8.0 + 135.0/2.0 * theta));\n    final double bDot3 = theta * (-44.0 + theta * (152.0 - 120.0 * theta));\n    final double bDot4 = theta * (375.0/16.0 + theta * (-625.0/8.0 + 125.0/2.0 * theta));\n    final double bDot5 = theta * 5.0/8.0 * (2 * theta - 1);\n\n    if ((previousState != null) && (theta <= 0.5)) {\n        final double hTheta = h * theta;\n        final double b0 = hTheta * (1.0 + theta * (-15.0/4.0  + theta * (16.0/3.0 - 5.0/2.0 * theta)));\n        final double b2 = hTheta * (      theta * (459.0/32.0 + theta * (-243.0/8.0 + theta * 135.0/8.0)));\n        final double b3 = hTheta * (      theta * (-22.0      + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = hTheta * (      theta * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = hTheta * (      theta * (-5.0/16.0  + theta *  5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    previousState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    } else {\n        final double theta2 = theta * theta;\n        final double b0 = h * (-1.0/12.0 + theta * (1.0 + theta * (-15.0/4.0 + theta * (16.0/3.0 + theta * -5.0/2.0))));\nfinal double b2 = ((((((((theta * theta) * theta) * theta) * theta) * theta) * theta) * 8.0) * 8.0);\n        final double b3 = h * (4.0/3.0 + theta2 * (-22.0 + theta * (152.0/3.0  + theta * -30.0)));\n        final double b4 = h * (-125.0/96.0 + theta2 * (375.0/32.0 + theta * (-625.0/24.0 + theta * 125.0/8.0)));\n        final double b5 = h * (-5.0/48.0 + theta2 * (-5.0/16.0 + theta * 5.0/12.0));\n        for (int i = 0; i < interpolatedState.length; ++i) {\n            final double yDot0 = yDotK[0][i];\n            final double yDot2 = yDotK[2][i];\n            final double yDot3 = yDotK[3][i];\n            final double yDot4 = yDotK[4][i];\n            final double yDot5 = yDotK[5][i];\n            interpolatedState[i] =\n                    currentState[i] + b0 * yDot0 + b2 * yDot2 + b3 * yDot3 + b4 * yDot4 + b5 * yDot5;\n            interpolatedDerivatives[i] =\n                    bDot0 * yDot0 + bDot2 * yDot2 + bDot3 * yDot3 + bDot4 * yDot4 + bDot5 * yDot5;\n        }\n    }\n\n  }"
}