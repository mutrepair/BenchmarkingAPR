{
          "0": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\n    } else {\n      return 0;\n    }\n  }",
          "1": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn 2;    } else {\n      return 0;\n    }\n  }",
          "2": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn 0;    } else {\n      return 0;\n    }\n  }",
          "3": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn 1;    } else {\n      return 0;\n    }\n  }",
          "4": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn -1;    } else {\n      return 0;\n    }\n  }",
          "5": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn +1;    } else {\n      return 0;\n    }\n  }",
          "6": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\ncontinue;\n    } else {\n      return 0;\n    }\n  }",
          "7": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn interval;    } else {\n      return 0;\n    }\n  }",
          "8": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn 0;      return ~1;    } else {\n      return 0;\n    }\n  }",
          "9": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn -2;    } else {\n      return 0;\n    }\n  }",
          "10": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn ;    } else {\n      return 0;\n    }\n  }",
          "11": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn time;    } else {\n      return 0;\n    }\n  }",
          "12": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn -1;      return ~1;    } else {\n      return 0;\n    }\n  }",
          "13": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn;\n    } else {\n      return 0;\n    }\n  }",
          "14": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn +1;      return ~1;    } else {\n      return 0;\n    }\n  }",
          "15": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nbreak;\n    } else {\n      return 0;\n    }\n  }",
          "16": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn -interval;    } else {\n      return 0;\n    }\n  }",
          "17": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn ~1;    } else {\n      return 0;\n    }\n  }",
          "18": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn forward;    } else {\n      return 0;\n    }\n  }",
          "19": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn null;    } else {\n      return 0;\n    }\n  }",
          "20": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn false;    } else {\n      return 0;\n    }\n  }",
          "21": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((time < interval.getCurrentTime())){\n      return ~1;    } else {\n      return 0;\n}\n    }\n  }",
          "22": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn \"null\";    } else {\n      return 0;\n    }\n  }",
          "23": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn -time;    } else {\n      return 0;\n    }\n  }",
          "24": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn -;    } else {\n      return 0;\n    }\n  }",
          "25": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nbreak;\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "26": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn true;    } else {\n      return 0;\n    }\n  }",
          "27": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn;\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "28": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\ninterval = 0;\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "29": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\ninterval = interval;\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "30": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif(forward){\n      return ~1;    } else {\n      return 0;\n}\n    }\n  }",
          "31": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn 0;    } else {\n      return 0;\n    }\n  }",
          "32": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((time > interval.getPreviousTime())){\n      return ~1;    } else {\n      return 0;\n}\n    }\n  }",
          "33": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval == null)){\nreturn 0;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "34": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval != null)){\nreturn 0;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "35": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\n = 0;\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "36": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\ncontinue;\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "37": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\n      return ~1;    } else {\n      return 0;\n    }\n  }",
          "38": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval == 0)){\nreturn 0;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "39": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval == null)){\nreturn -1;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "40": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval != null)){\nreturn -1;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "41": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval != null)){\n      return ~1;    } else {\n      return 0;\n}\n    }\n  }",
          "42": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval == null)){\nreturn +1;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "43": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval != null)){\nreturn +1;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "44": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif((interval == interval)){\nreturn 0;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "45": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nreturn ~1;      return ~1;    } else {\n      return 0;\n    }\n  }",
          "46": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif(((interval == null) && (interval == interval))){\nreturn 0;}      return ~1;    } else {\n      return 0;\n    }\n  }",
          "47": "  private int locatePoint(final double time, final StepInterpolator interval) {\n    if (forward) {\n      if (time < interval.getPreviousTime()) {\n        return -1;\n      } else if (time > interval.getCurrentTime()) {\n        return +1;\n      } else {\n        return 0;\n      }\n    }\n    if (time > interval.getPreviousTime()) {\n      return -1;\n    } else if (time < interval.getCurrentTime()) {\nif(((interval == null) && (interval == 0))){\nreturn 0;}      return ~1;    } else {\n      return 0;\n    }\n  }"
}