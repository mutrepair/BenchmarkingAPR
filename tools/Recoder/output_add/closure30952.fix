{
          "0": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 0);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "1": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 1);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "2": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 8);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "3": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 0xff);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "4": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 2);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "5": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 9);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "6": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << true);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "7": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << false);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "8": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 255);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "9": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << \"null\");\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "10": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 7);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "11": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\nbreak;\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] ^ 255) << 24;        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "12": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (str[(i + 7)] ^<> 255);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "13": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << null);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "14": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 0) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "15": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "16": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb = ((str[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "17": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 1) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "18": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (i + 7);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "19": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "20": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((c ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "21": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 2) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "22": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 6)] & 0xff) << 16);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "23": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nc += ((str[(i + 8)] & 0xff) << 8);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "24": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb = (str[(i + 7)] ^<> 255);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "25": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "26": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((i ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "27": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nc += ((str[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "28": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 8)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "29": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb -= ((str[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "30": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb -= (str[(i + 7)] ^<> 255);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "31": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) - 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "32": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) > 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "33": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 8) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "34": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) < 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "35": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 0xff) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "36": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 0)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "37": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "38": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) <= 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "39": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) & 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "40": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) + str);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "41": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) >= 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "42": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 9) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "43": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) / 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "44": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((i[(i + 8)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "45": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (((str[(i + 7)] ^<> 255) << 24) + 1);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "46": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) | 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "47": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((b[(i + 8)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "48": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb = (((str[(i + 7)] ^<> 255) << 24) + 1);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "49": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 1)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "50": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) == 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "51": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 7)] ^<> 255) + str[(i + 7)]);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "52": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((i[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "53": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (str + str);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "54": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((b[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "55": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(i + 2)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "56": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str[(str + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "57": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\ncontinue;\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] ^ 255) << 24;        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "58": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nstr += ((str[(i + 7)] ^<> 255) << 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "59": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str + str) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "60": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb = ((str + str) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "61": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\nreturn;\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] ^ 255) << 24;        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "62": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str + str[(i + 7)]) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "63": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str + i) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "64": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str + b) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "65": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((str + str) + str);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "66": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\n          b += (str[i + 7] ^ 255) << 24;        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "67": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (((str + 24) + str) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "68": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (((str + str) + 24) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "69": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += (((str + str) + 24) + str);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "70": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((((str + str) + 24) + str) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "71": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((((str + str) + 24) + 24) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "72": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((((str + str) + str) + 24) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "73": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb = ((((str + str) + 24) + str) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "74": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((((str + str) + 24) + str) + str);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }",
          "75": "    private static int hash32(byte[] str, int start, int limit, int c) {\n      int a = 0x9e3779b9;\n      int b = 0x9e3779b9;\n      int i;\n      for (i = start; i + 12 <= limit; i += 12) {\n        a += (((str[i + 0] & 0xff) << 0)\n            | ((str[i + 1] & 0xff) << 8)\n            | ((str[i + 2] & 0xff) << 16)\n            | ((str[i + 3] & 0xff) << 24));\n        b += (((str[i + 4] & 0xff) << 0)\n            | ((str[i + 5] & 0xff) << 8)\n            | ((str[i + 6] & 0xff) << 16)\n            | ((str[i + 7] & 0xff) << 24));\n        c += (((str[i + 8] & 0xff) << 0)\n            | ((str[i + 9] & 0xff) << 8) | ((str[i + 10] & 0xff) << 16)\n            | ((str[i + 11] & 0xff) << 24));\n\n        // Mix\n        a -= b;\n        a -= c;\n        a ^= (c >>> 13);\n        b -= c;\n        b -= a;\n        b ^= (a << 8);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 13);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 12);\n        b -= c;\n        b -= a;\n        b ^= (a << 16);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 5);\n        a -= b;\n        a -= c;\n        a ^= (c >>> 3);\n        b -= c;\n        b -= a;\n        b ^= (a << 10);\n        c -= a;\n        c -= b;\n        c ^= (b >>> 15);\n      }\n\n      c += limit - start;\n      switch (limit - i) { // deal with rest. Cases fall through\n        case 11:\n          c += (str[i + 10] & 0xff) << 24;\n        case 10:\n          c += (str[i + 9] & 0xff) << 16;\n        case 9:\n          c += (str[i + 8] & 0xff) << 8;\n          // the first byte of c is reserved for the length\n        case 8:\nb += ((((str + str) + str[(i + 7)]) + 24) + 24);\n        case 7:\n          b += (str[i + 6] & 0xff) << 16;\n        case 6:\n          b += (str[i + 5] & 0xff) << 8;\n        case 5:\n          b += (str[i + 4] & 0xff);\n        case 4:\n          a += (str[i + 3] & 0xff) << 24;\n        case 3:\n          a += (str[i + 2] & 0xff) << 16;\n        case 2:\n          a += (str[i + 1] & 0xff) << 8;\n        case 1:\n          a += (str[i + 0] & 0xff);\n          // case 0 : nothing left to add\n      }\n\n      // Mix\n      a -= b;\n      a -= c;\n      a ^= (c >>> 13);\n      b -= c;\n      b -= a;\n      b ^= (a << 8);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 13);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 12);\n      b -= c;\n      b -= a;\n      b ^= (a << 16);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 5);\n      a -= b;\n      a -= c;\n      a ^= (c >>> 3);\n      b -= c;\n      b -= a;\n      b ^= (a << 10);\n      c -= a;\n      c -= b;\n      c ^= (b >>> 15);\n      return c;\n    }"
}