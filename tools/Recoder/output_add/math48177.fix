{
          "0": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "1": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] -= (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "2": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] = (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "3": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * j[k].[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "4": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[k].[k] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "5": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[0].[0] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "6": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "7": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] *= (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "8": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * j[0].[0]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "9": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * j[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "10": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[0].[0] = 1;\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "11": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[k].[k] = 1;\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "12": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * va[k].[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "13": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * j[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "14": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * beta[k].[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "15": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * va[0].[0]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "16": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * hK[k].[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "17": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[0].[0] = 1;\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "18": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nj[k].[k] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "19": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] &= (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "20": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * beta[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "21": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[k].[k] = 1;\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "22": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nj[i].[j] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "23": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * beta[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "24": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * i);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "25": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * beta[0].[0]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "26": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbreak;\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "27": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nif((diagOffset > 0)){\ncontinue;\n}\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "28": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta[i].[j] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "29": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * hK[0].[0]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "30": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nj[0].[0] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "31": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta -= (va[i].[j] * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "32": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nj[i] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "33": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "34": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * j[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "35": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta[k].[k] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "36": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (j[i].[j] * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "37": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta[i] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "38": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (j[k].[k] * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "39": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta /= (diagonal[(k - diagOffset)] * hK[k]);\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "40": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * j[(k - diagOffset)]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "41": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (beta[i].[j] * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "42": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * hK[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "43": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta -= (va[i].[j] * hK[i]);\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "44": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * va[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "45": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * n[k].[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "46": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nif((i < n)){\ncontinue;\n}\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "47": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (i * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "48": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nhK[k].[k] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "49": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta[0].[0] += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "50": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "51": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nbeta /= (diagonal[(k - diagOffset)] * hK[k]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "52": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (beta[i] * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "53": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\ni += (+beta * hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "54": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta * beta);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "55": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((+beta * hK[i]) + 0);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "56": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nfor(int k = (n - 1);(k >= p);--k) {                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "57": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nreturn;\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "58": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nfor(int i = k;(i < n);++i) {                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "59": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((+beta * hK[i]) + 1);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "60": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nreturn;\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "61": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (+beta - hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "62": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\ncontinue;\n                            va[i][j] += +beta * hK[i];                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "63": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (va[i].[j] + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "64": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += (va[i].[j] + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "65": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i].[j]) + hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "66": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i]) + hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "67": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] + va[i].[j]) + hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "68": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "69": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i].[j]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "70": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] + va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "71": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "72": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] + va[i].[j]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "73": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] + va[i]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "74": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i] * va[i]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "75": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i]) + j[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "76": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((j[i] * va[i]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "77": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i] + va[i]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "78": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "79": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i].[j]) + j[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "80": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i].[j] * va[i].[j]) + j[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "81": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((j[i].[j] * va[i].[j]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "82": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] * va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "83": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i] * va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "84": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] + va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "85": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[i] + va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "86": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] * va[i]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "87": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] * va[i].[j]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "88": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] * va[0]) + hK[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "89": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[0] * va[i].[j]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "90": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] * va[0]) + va[i].[j]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }",
          "91": "    public RealMatrix getV() {\n\n        if (cachedV == null) {\n\n            final int m = householderVectors.length;\n            final int n = householderVectors[0].length;\n            final int p = main.length;\n            final int diagOffset    = (m >= n) ? 1 : 0;\n            final double[] diagonal = (m >= n) ? secondary : main;\n            double[][] va = new double[n][n];\n\n            // fill up the part of the matrix not affected by Householder transforms\n            for (int k = n - 1; k >= p; --k) {\n                va[k][k] = 1;\n            }\n\n            // build up first part of the matrix by applying Householder transforms\n            for (int k = p - 1; k >= diagOffset; --k) {\n                final double[] hK = householderVectors[k - diagOffset];\n                va[k][k] = 1;\n                if (hK[k] != 0.0) {\n                    for (int j = k; j < n; ++j) {\n                        double beta = 0;\n                        for (int i = k; i < n; ++i) {\n                            beta -= va[i][j] * hK[i];\n                        }\n                        beta /= diagonal[k - diagOffset] * hK[k];\n\n                        for (int i = k; i < n; ++i) {\nva[i].[j] += ((va[j] * va[0]) + va[i]);\n                        }\n                    }\n                }\n            }\n            if (diagOffset > 0) {\n                va[0][0] = 1;\n            }\n            cachedV = MatrixUtils.createRealMatrix(va);\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }"
}