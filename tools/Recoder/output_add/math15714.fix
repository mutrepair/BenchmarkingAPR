{
          "0": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, +imaginary);    }",
          "1": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn valueOf(real, +imaginary);    }",
          "2": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, NaN);    }",
          "3": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, imaginary);    }",
          "4": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real);    }",
          "5": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(NaN, +imaginary);    }",
          "6": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn conjugate(real, +imaginary);    }",
          "7": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, +imaginary);    }",
          "8": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary);    }",
          "9": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex();    }",
          "10": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real);    }",
          "11": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary);    }",
          "12": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real);    }",
          "13": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn imaginary;    }",
          "14": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, isNaN);    }",
          "15": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(isNaN, +imaginary);    }",
          "16": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, false);    }",
          "17": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn (Complex)createComplex(real, +imaginary);    }",
          "18": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, true);    }",
          "19": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(createComplex(real, +imaginary));    }",
          "20": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, false);    }",
          "21": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, true);    }",
          "22": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn imaginary;        return createComplex(real, +imaginary);    }",
          "23": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, real);    }",
          "24": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, NaN);    }",
          "25": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, real);    }",
          "26": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn null;        return createComplex(real, +imaginary);    }",
          "27": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real, real);    }",
          "28": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn add(real, +imaginary);    }",
          "29": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn debug(real, +imaginary);    }",
          "30": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, -imaginary);    }",
          "31": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, -real);    }",
          "32": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, -NaN);    }",
          "33": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, imaginary);    }",
          "34": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, imaginary);    }",
          "35": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn real;    }",
          "36": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, isNaN);    }",
          "37": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn e(real, +imaginary);    }",
          "38": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, null);    }",
          "39": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, imaginary, real);    }",
          "40": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, false);    }",
          "41": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn !createComplex();    }",
          "42": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(-NaN, +imaginary);    }",
          "43": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn NaN;        return createComplex(real, +imaginary);    }",
          "44": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, null);    }",
          "45": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real, imaginary);    }",
          "46": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, NaN);    }",
          "47": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, true);    }",
          "48": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(-imaginary, +imaginary);    }",
          "49": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(-real, +imaginary);    }",
          "50": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nif(!isNaN()){\nreturn null;}        return createComplex(real, +imaginary);    }",
          "51": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nif(!isInfinite()){\nreturn null;}        return createComplex(real, +imaginary);    }",
          "52": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(NaN);    }",
          "53": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, imaginary, imaginary);    }",
          "54": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real, false);    }",
          "55": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn this;        return createComplex(real, +imaginary);    }",
          "56": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn (real, +imaginary);    }",
          "57": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn super.createComplex();    }",
          "58": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nif(isNaN){\n}\n        return createComplex(real, +imaginary);    }",
          "59": "    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, NaN);    }"
}