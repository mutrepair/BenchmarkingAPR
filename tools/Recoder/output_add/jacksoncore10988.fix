{
          "0": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_0;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "1": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape << 2)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "2": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape & 0xF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "3": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape << 0)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "4": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape << 1)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "5": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\ncharToEscape &= 0xFF;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "6": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(hi & 0xF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "7": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(hi >> 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "8": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = bbuf[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "9": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape << 0xFF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "10": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_u;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "11": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = bbuf[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "12": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = bbuf;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "13": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "14": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "15": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (charToEscape << 4);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "16": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "17": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_u;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "18": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_0;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "19": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_LBRACKET;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "20": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_RBRACKET;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "21": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_LCURLY;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "22": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_RCURLY;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "23": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "24": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_COMMA;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "25": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_COLON;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "26": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_QUOTE;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "27": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "28": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = NULL_BYTES;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "29": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = TRUE_BYTES;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "30": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = FALSE_BYTES;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "31": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = _outputBuffer;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "32": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = _entityBuffer;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "33": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_u[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "34": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_0[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "35": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_LBRACKET[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "36": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_RBRACKET[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "37": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_LCURLY[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "38": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_RCURLY[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "39": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_BACKSLASH[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "40": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_COMMA[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "41": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_COLON[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "42": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_QUOTE[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "43": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "44": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = NULL_BYTES[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "45": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = TRUE_BYTES[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "46": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = FALSE_BYTES[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "47": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = _outputBuffer[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "48": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = _entityBuffer[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "49": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_u[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "50": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_0[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "51": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_LBRACKET[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "52": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_RBRACKET[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "53": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_LCURLY[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "54": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_RCURLY[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "55": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_BACKSLASH[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "56": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_COMMA[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "57": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_COLON[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "58": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = BYTE_QUOTE[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "59": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = NULL_BYTES[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "60": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = TRUE_BYTES[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "61": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = FALSE_BYTES[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "62": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = _outputBuffer[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "63": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = _entityBuffer[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "64": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(bbuf << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "65": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape & 0xF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "66": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf = HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "67": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nwriteStartArray();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "68": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nwriteEndArray();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "69": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nwriteStartObject();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "70": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nwriteEndObject();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "71": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nwriteNull();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "72": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nflush();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "73": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nclose();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "74": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\n_releaseBuffers();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "75": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\n_writeNull();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "76": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\n_flushBuffer();\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "77": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = bbuf[(charToEscape & 0xF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "78": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape >> 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "79": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[(charToEscape << 4)] = HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "80": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape >>> 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "81": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = charToEscape[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "82": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape > 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "83": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape <= 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "84": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = outputPtr[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "85": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape - 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "86": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = charToEscape[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "87": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = outputPtr[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "88": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = charToEscape;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "89": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(hi & 0xF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "90": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape << 0xF)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "91": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape & 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "92": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape >= 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "93": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nif((charToEscape > 0xFF)){\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n}\n    }",
          "94": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape < 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "95": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(hi >> 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "96": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = hi[outputPtr++];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "97": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] += (charToEscape << 4);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "98": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape % 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "99": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nHEX_CHARS[outputPtr++] = HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "100": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbreak;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "101": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = outputPtr;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "102": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nreturn outputPtr;        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "103": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = HEX_CHARS[(charToEscape / 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "104": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\ncharToEscape &= 0xFF;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "105": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nreturn;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "106": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS + charToEscape);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "107": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "108": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS | charToEscape);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "109": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\ncontinue;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape << 4];        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "110": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS + outputPtr);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "111": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS + HEX_CHARS[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "112": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nreturn;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "113": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] + HEX_CHARS);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "114": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS | HEX_CHARS[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "115": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] + HEX_CHARS[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "116": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] + charToEscape);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "117": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] | HEX_CHARS[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "118": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] | charToEscape);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "119": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] | HEX_CHARS);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "120": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[outputPtr++] + HEX_CHARS[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "121": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[outputPtr++] | HEX_CHARS[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "122": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] | charToEscape[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "123": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (HEX_CHARS[(charToEscape << 4)] + charToEscape[(charToEscape << 4)]);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "124": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = ((HEX_CHARS * charToEscape) | 4);\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "125": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = ((HEX_CHARS[(charToEscape << 4)] == null))?HEX_CHARS[(charToEscape << 4)]:HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "126": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = ((HEX_CHARS[(charToEscape << 4)] == null))?HEX_CHARS:HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "127": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = ((HEX_CHARS[(charToEscape << 4)] == null))?HEX_CHARS[(charToEscape << 4)]:HEX_CHARS;\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }",
          "128": "    private int _writeGenericEscape(int charToEscape, int outputPtr)\n        throws IOException\n    {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = BYTE_BACKSLASH;\n        bbuf[outputPtr++] = BYTE_u;\n        if (charToEscape > 0xFF) {\n            int hi = (charToEscape >> 8) & 0xFF;\n            bbuf[outputPtr++] = HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];\n            charToEscape &= 0xFF;\n        } else {\n            bbuf[outputPtr++] = BYTE_0;\n            bbuf[outputPtr++] = BYTE_0;\n        }\n        // We know it's a control char, so only the last 2 chars are non-0\nbbuf[outputPtr++] = (((HEX_CHARS[(charToEscape << 4)] != HEX_CHARS[(charToEscape << 4)]) && (HEX_CHARS != null)))?HEX_CHARS[(charToEscape << 4)]:HEX_CHARS[(charToEscape << 4)];\n        bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];\n        return outputPtr;\n    }"
}