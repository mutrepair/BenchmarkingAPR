{
          "0": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "1": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(1, (inverse * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "2": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse - z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "3": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn inverse;        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "4": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "5": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (+inverse * inverse));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "6": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * inverse), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "7": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(2, (inverse * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "8": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse + z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "9": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (+inverse * x));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "10": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (+inverse * z));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "11": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * x), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "12": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * y), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "13": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D();        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "14": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn (+inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "15": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse / z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "16": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn (inverse * z);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "17": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "18": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "19": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((-inverse * z), 0, (inverse * x));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "20": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "21": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "22": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new MathArithmeticException(LocalizedFormats.ZERO_NORM);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "23": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), 0, (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "24": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), ( * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "25": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "26": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(false, (inverse * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "27": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "28": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (+inverse * ));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "29": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * ), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "30": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (y * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "31": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((inverse * y), (-inverse * x), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "32": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((inverse * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "33": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), 0, (inverse * z));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "34": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse % z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "35": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (x * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "36": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), ( * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "37": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "38": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((inverse * z));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "39": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (z * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "40": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(LocalizedFormats.ZERO_NORM);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "41": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn null;        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "42": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nif(inverse){\n            return new Vector3D(0, inverse * z, +inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n}\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "43": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "44": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse * z), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "45": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse <= z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "46": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nif(!inverse){\n            return new Vector3D(0, inverse * z, +inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n}\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "47": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), (inverse * z), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "48": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((inverse * z), (+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "49": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(x);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "50": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), 0, (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "51": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse << z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "52": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn y;        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "53": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(-1, (inverse * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "54": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, ( * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "55": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse < z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "56": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (y * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "57": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse & z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "58": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "59": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (x * z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "60": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((inverse * y), (-inverse * x), 0);            return new Vector3D(0, inverse * z, +inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "61": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (+inverse * y), (inverse * z), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "62": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse >> z), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "63": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse * z), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "64": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), (+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "65": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse * z), (inverse * z), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "66": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), (+inverse * y), (inverse * z), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "67": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((-inverse * z), 0, (inverse * x));            return new Vector3D(0, inverse * z, +inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "68": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D(0, (inverse * z), (+inverse | y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "69": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), (inverse * z), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "70": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((inverse * z), (+inverse * y), (+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "71": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn;\n            return new Vector3D(0, inverse * z, +inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "72": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (+inverse * y), (+inverse * y), (+inverse * y), 0);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "73": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nbreak;\n            return new Vector3D(0, inverse * z, +inverse * y);        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "74": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse - inverse), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "75": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse - inverse), (inverse * z));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "76": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\n        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "77": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse - inverse));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "78": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse - inverse), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "79": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse - inverse), (inverse * z));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "80": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (inverse * z), (inverse - inverse), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }",
          "81": "    public Vector3D orthogonal() throws MathArithmeticException {\n\n        double threshold = 0.6 * getNorm();\n        if (threshold == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        if (FastMath.abs(x) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(y * y + z * z);\nreturn new Vector3D((+inverse * y), (+inverse * y), (inverse - y), (+inverse * y));        } else if (FastMath.abs(y) <= threshold) {\n            double inverse  = 1 / FastMath.sqrt(x * x + z * z);\n            return new Vector3D(-inverse * z, 0, inverse * x);\n        }\n        double inverse  = 1 / FastMath.sqrt(x * x + y * y);\n        return new Vector3D(inverse * y, -inverse * x, 0);\n\n    }"
}