{
          "0": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 1));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "1": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 0));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "2": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 8));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "3": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "4": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 2));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "5": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >> 8));\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "6": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_currBlock[_currBlockPtr++] = (byte)(b24 >> 8);\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "7": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_currBlock[_currBlockPtr++] = (byte)b24;\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "8": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >> 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "9": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(b24);\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "10": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >>> 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "11": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_currBlock[_currBlockPtr++] = (byte)(b24 >> 16);\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "12": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 - 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "13": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nreturn;\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "14": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 % 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "15": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_currBlock[_currBlockPtr++] = (byte)(b24 >> 8);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "16": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 <= 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "17": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >> 8));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "18": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(b24);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "19": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nreset();\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "20": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nrelease();\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "21": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nclose();\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "22": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nflush();\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "23": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_allocMore();\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "24": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "25": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >= 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "26": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 & 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "27": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 / 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "28": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_currBlock[_currBlockPtr++] = (byte)(b24 >> 16);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "29": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 > 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "30": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\n_currBlock[_currBlockPtr++] = (byte)b24;\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "31": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 * 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "32": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16), 16);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "33": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << false));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "34": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << -1));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "35": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << true));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "36": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nif((b24 << 16)){\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n}\n        }\n    }",
          "37": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << null));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "38": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend();\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "39": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16), b24);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "40": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nbreak;\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "41": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(((_currBlockPtr + 2) < _currBlock.length));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "42": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nif((_currBlockPtr + 2)){\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n}\n        }\n    }",
          "43": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nif(((_currBlockPtr + 2) < _currBlock.length)){\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n}\n        }\n    }",
          "44": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << -2));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "45": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16), 0);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "46": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((_currBlock << 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "47": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << \"null\"));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "48": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((_currBlockPtr << 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "49": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16), 2);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "50": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16));\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "51": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 << 16), 1);\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "52": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 | 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "53": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\ndebug((b24 << 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "54": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 | b24));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "55": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 & b24));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "56": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >> 8));\nappend((b24 >> 8));\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "57": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 >> 8));\nappend(b24);\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "58": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(((b24 << 16) | 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "59": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 * b24));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "60": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(( << 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "61": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend((b24 + 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "62": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(((b24 << 16) | b24));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "63": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(((b24 << 16) & b24));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "64": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nappend(((b24 << 16) * b24));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "65": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\ncontinue;\n            append(b24 << 16);            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "66": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\ne((b24 << 16));\n            append(b24 >> 8);\n            append(b24);\n        }\n    }",
          "67": "    public void appendThreeBytes(int b24)\n    {\n        if ((_currBlockPtr + 2) < _currBlock.length) {\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);\n            _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);\n            _currBlock[_currBlockPtr++] = (byte) b24;\n        } else {\nreturn;\n            append(b24 >> 8);\n            append(b24);\n        }\n    }"
}