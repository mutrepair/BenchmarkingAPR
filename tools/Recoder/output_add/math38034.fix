{
          "0": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), true);  }",
          "1": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "2": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * r) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "3": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) + (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "4": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation();  }",
          "5": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q0) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "6": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q2) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "7": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q3) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "8": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "9": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((r * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "10": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r * q1))), false);  }",
          "11": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((r * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "12": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), \"null\");  }",
          "13": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "14": "  public Rotation applyInverseTo(Rotation r) {\nreturn ((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3)));  }",
          "15": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((q0 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "16": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((q1 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "17": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((q2 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "18": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "19": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (q0 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "20": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "21": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (q2 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "22": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (q3 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "23": "  public Rotation applyInverseTo(Rotation r) {\nreturn (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2)));  }",
          "24": "  public Rotation applyInverseTo(Rotation r) {\nif(r){\n    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        +r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n}\n                        false);  }",
          "25": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (q0 * q1))), false);  }",
          "26": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (q1 * q1))), false);  }",
          "27": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (q2 * q1))), false);  }",
          "28": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (q3 * q1))), false);  }",
          "29": "  public Rotation applyInverseTo(Rotation r) {\nreturn r;  }",
          "30": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) <= (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "31": "  public Rotation applyInverseTo(Rotation r) {\nreturn (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3)));  }",
          "32": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) / (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "33": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((q0 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "34": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((q1 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "35": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((q2 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "36": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "37": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((q0 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "38": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((q1 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "39": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "40": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((q3 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "41": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q1 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "42": "  public Rotation applyInverseTo(Rotation r) {\nreturn (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3));  }",
          "43": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q0 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "44": "  public Rotation applyInverseTo(Rotation r) {\nreturn ((r.q1 * q1) + (r.q2 * q2));  }",
          "45": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q0 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "46": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q2 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "47": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), null);  }",
          "48": "  public Rotation applyInverseTo(Rotation r) {\nreturn (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1)));  }",
          "49": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q2 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "50": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q3 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "51": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q1 * q1))), false);  }",
          "52": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) - (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), -1);  }",
          "53": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) * (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "54": "  public Rotation applyInverseTo(Rotation r) {\nreturn new Rotation(((-r.q0 * q0) - (((r.q1 * q1) + (r.q2 * q2)) + (r.q3 * q3))), (((+r.q1 * q0) + (r.q0 * q1)) + ((r.q2 * q3) - (r.q3 * q2))), (((-r.q2 * q0) + (r.q0 * q2)) + ((r.q3 * q1) < (r.q1 * q3))), (((-r.q3 * q0) + (r.q0 * q3)) + ((r.q1 * q2) - (r.q2 * q1))), false);  }",
          "55": "  public Rotation applyInverseTo(Rotation r) {\nreturn;\n    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        +r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);  }",
          "56": "  public Rotation applyInverseTo(Rotation r) {\n    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                        +r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                        -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                        -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                        false);  }"
}