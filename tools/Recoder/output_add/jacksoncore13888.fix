{
          "0": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "1": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportUnexpectedChar(ch, \"null\");\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "2": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 2) | digit);\n        }\n        return (char) value;\n    }",
          "3": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 1) | digit);\n        }\n        return (char) value;\n    }",
          "4": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\nbreak;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "5": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidEOF(\"null\");\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "6": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | digit);\n        }\n        return (char) value;\n    }",
          "7": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportUnexpectedChar(ch, \"null\");\n        }\n        return (char) value;\n    }",
          "8": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | ch);\n        }\n        return (char) value;\n    }",
          "9": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> \"null\") | digit);\n        }\n        return (char) value;\n    }",
          "10": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidEOF(\"null\");\n        }\n        return (char) value;\n    }",
          "11": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n        }\n        return (char) value;\n    }",
          "12": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((ch >>> 4) | digit);\n        }\n        return (char) value;\n    }",
          "13": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nreturn (char)value;            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "14": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportUnexpectedChar(ch, \"null\");\nbreak;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "15": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | i);\n        }\n        return (char) value;\n    }",
          "16": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue += ((value >>> 4) | digit);\n        }\n        return (char) value;\n    }",
          "17": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\n_reportUnexpectedChar(ch, \"null\");\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "18": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidEOF(\"null\");\nbreak;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "19": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\ncontinue;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "20": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "21": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((digit >>> 4) | digit);\n        }\n        return (char) value;\n    }",
          "22": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_closeInput();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "23": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_releaseBuffers();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "24": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nclose();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "25": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_isNextTokenNameYes();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "26": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_finishString();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "27": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipString();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "28": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipComment();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "29": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipCComment();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "30": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipCppComment();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "31": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipCR();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "32": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipLF();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "33": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\nbreak;\nbreak;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "34": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = (value >>> 4);\n        }\n        return (char) value;\n    }",
          "35": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((i >>> 4) | digit);\n        }\n        return (char) value;\n    }",
          "36": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = value;\n        }\n        return (char) value;\n    }",
          "37": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif((value >>> 4)){\nbreak;\n}            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "38": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nreturn \"null\";            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "39": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\ncontinue;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "40": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipUtf8_2(value);\n        }\n        return (char) value;\n    }",
          "41": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipUtf8_3(value);\n        }\n        return (char) value;\n    }",
          "42": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_skipUtf8_4(value);\n        }\n        return (char) value;\n    }",
          "43": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidChar(value);\n        }\n        return (char) value;\n    }",
          "44": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidInitial(value);\n        }\n        return (char) value;\n    }",
          "45": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidOther(value);\n        }\n        return (char) value;\n    }",
          "46": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nreturn (char)c;            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "47": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif((value >>> 4)){\n}\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "48": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) & digit);\n        }\n        return (char) value;\n    }",
          "49": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> -1) | digit);\n        }\n        return (char) value;\n    }",
          "50": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | value);\n        }\n        return (char) value;\n    }",
          "51": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportUnexpectedChar(ch, \"null\");\n_reportUnexpectedChar(ch, \"null\");\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "52": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 0) | digit);\n        }\n        return (char) value;\n    }",
          "53": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nfor(int i = 0;(i < 4);++i) {            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "54": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nreturn;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "55": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nreturn _handleUnrecognizedCharacterEscape((char)_decodeCharForError(c));            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "56": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nfor(int i = 0;(i < 4);++i) {break;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "57": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | digit);\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "58": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | c);\n        }\n        return (char) value;\n    }",
          "59": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif((digit < 0)){\nbreak;\n}            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "60": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif(!loadMore()){\nbreak;\n}            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "61": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\n_reportInvalidEOF(\"null\");\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "62": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n_reportInvalidOther(ch, \"null\");\n        }\n        return (char) value;\n    }",
          "63": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value - 4) | digit);\n        }\n        return (char) value;\n    }",
          "64": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._closeInput();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "65": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._releaseBuffers();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "66": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes.close();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "67": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._isNextTokenNameYes();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "68": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._finishString();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "69": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._skipString();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "70": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._skipComment();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "71": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._skipCComment();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "72": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._skipCppComment();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "73": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._skipCR();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "74": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nCharTypes._skipLF();\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "75": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((c >>> 4) | digit);\n        }\n        return (char) value;\n    }",
          "76": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif(!loadMore()){\n}\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "77": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) < digit);\n        }\n        return (char) value;\n    }",
          "78": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nreturn (char)value;break;\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "79": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif((digit < 0)){\n}\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "80": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif((value >>> 4)){\n_reportUnexpectedChar(ch, \"null\");\n}            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "81": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) | _inputBuffer);\n        }\n        return (char) value;\n    }",
          "82": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nbreak;\nreturn (char)value;            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "83": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> false) | digit);\n        }\n        return (char) value;\n    }",
          "84": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = (((value >>> 4) | digit) | 4);\n        }\n        return (char) value;\n    }",
          "85": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value >>> 4) * digit);\n        }\n        return (char) value;\n    }",
          "86": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value <= 4) | digit);\n        }\n        return (char) value;\n    }",
          "87": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nif((value != null)){\n}\n            value = (value >>> 4) | digit;        }\n        return (char) value;\n    }",
          "88": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = (((value >>> 4) | digit) && ((value >>> 4) | digit));\n        }\n        return (char) value;\n    }",
          "89": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = (((value >>> 4) | digit) | i);\n        }\n        return (char) value;\n    }",
          "90": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((((value >>> 4) | digit) | 4) | digit);\n        }\n        return (char) value;\n    }",
          "91": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = (((value >>> 4) | digit) | digit);\n        }\n        return (char) value;\n    }",
          "92": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value | 4) | digit);\n        }\n        return (char) value;\n    }",
          "93": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value * 4) | digit);\n        }\n        return (char) value;\n    }",
          "94": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value | digit) | digit);\n        }\n        return (char) value;\n    }",
          "95": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((((value >>> 4) | digit) | value) | digit);\n        }\n        return (char) value;\n    }",
          "96": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((value * digit) | digit);\n        }\n        return (char) value;\n    }",
          "97": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = ((digit | digit) | digit);\n        }\n        return (char) value;\n    }",
          "98": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\nvalue = (((digit | digit) | 4) | digit);\n        }\n        return (char) value;\n    }"
}