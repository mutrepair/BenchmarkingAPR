{
          "0": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, -imaginary);    }",
          "1": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn valueOf(+real, -imaginary);    }",
          "2": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, imaginary);    }",
          "3": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, real);    }",
          "4": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, NaN);    }",
          "5": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, isNaN);    }",
          "6": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn negate(+real, -imaginary);    }",
          "7": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary);    }",
          "8": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(NaN, -imaginary);    }",
          "9": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary);    }",
          "10": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real);    }",
          "11": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex();    }",
          "12": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, -imaginary);    }",
          "13": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, -imaginary);    }",
          "14": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real);    }",
          "15": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn imaginary;    }",
          "16": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, imaginary);    }",
          "17": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real);    }",
          "18": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, -real);    }",
          "19": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, -NaN);    }",
          "20": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, 0);    }",
          "21": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(isNaN, -imaginary);    }",
          "22": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn (Complex)createComplex(+real, -imaginary);    }",
          "23": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, NaN);    }",
          "24": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, imaginary.imaginary);    }",
          "25": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, real.imaginary);    }",
          "26": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, abs().imaginary);    }",
          "27": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, getImaginary().imaginary);    }",
          "28": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, getReal().imaginary);    }",
          "29": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, getArgument().imaginary);    }",
          "30": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, !imaginary);    }",
          "31": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, !real);    }",
          "32": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, 0);    }",
          "33": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn imaginary;        return createComplex(+real, -imaginary);    }",
          "34": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, false);    }",
          "35": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, NaN);    }",
          "36": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, -isNaN);    }",
          "37": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, isNaN);    }",
          "38": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(createComplex(+real, -imaginary));    }",
          "39": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn null;        return createComplex(+real, -imaginary);    }",
          "40": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, !NaN);    }",
          "41": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn add(+real, -imaginary);    }",
          "42": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn real;    }",
          "43": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn debug(+real, -imaginary);    }",
          "44": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, isNaN);    }",
          "45": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, 1);    }",
          "46": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, imaginary);    }",
          "47": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, imaginary);    }",
          "48": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, imaginary.real);    }",
          "49": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, real.real);    }",
          "50": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, abs().real);    }",
          "51": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, getImaginary().real);    }",
          "52": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, getReal().real);    }",
          "53": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, getArgument().real);    }",
          "54": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, e);    }",
          "55": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn e(+real, -imaginary);    }",
          "56": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, false);    }",
          "57": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, true);    }",
          "58": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, real);    }",
          "59": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, negate);    }",
          "60": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, 0);    }",
          "61": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, real);    }",
          "62": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, imaginary, imaginary);    }",
          "63": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(NaN);    }",
          "64": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn NaN;        return createComplex(+real, -imaginary);    }",
          "65": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, debug);    }",
          "66": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn (+real, -imaginary);    }",
          "67": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, imaginary, NaN);    }",
          "68": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real, imaginary);    }",
          "69": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, imaginary, real);    }",
          "70": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(-imaginary, -imaginary);    }",
          "71": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(-real, -imaginary);    }",
          "72": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(-NaN, -imaginary);    }",
          "73": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nif(isNaN){\n}\n        return createComplex(+real, -imaginary);    }",
          "74": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(imaginary, real, 0);    }",
          "75": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(+real, !isNaN);    }",
          "76": "    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\nreturn createComplex(real, real, real);    }"
}