{
          "0": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet >>> 1);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "1": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet >>> 0);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "2": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet >> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "3": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "4": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nchar digitOffset = (triplet >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "5": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet - 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "6": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet % 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "7": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nbyte[] digitOffset = (triplet >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "8": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nlong digitOffset = (triplet >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "9": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet * 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "10": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (buffer >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "11": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = triplet;\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "12": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet / 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "13": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nfinal int digitOffset = (triplet >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "14": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet <= 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "15": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (offset >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "16": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ;\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "17": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet >= 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "18": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet << 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "19": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer != null)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "20": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet >>> -1);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "21": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet != null)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "22": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nbuffer[offset++] = (byte)c;\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "23": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet + 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "24": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet < 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "25": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nbyte digitOffset = (triplet >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "26": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (digitOffset >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "27": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer != 0)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "28": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nreturn 0;        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "29": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet | 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "30": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer == 0)){\nreturn offset;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "31": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet * buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "32": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer == 0)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "33": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (LEADING_TRIPLETS >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "34": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet == null)){\nreturn offset;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "35": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet != 2)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "36": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ((triplet >>> 2) * 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "37": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = 0;\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "38": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet == null)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "39": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet & 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "40": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer != 2)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "41": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet - buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "42": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer != null)){\nreturn offset;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "43": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet != null)){\nreturn offset;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "44": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer == 0)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "45": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer > 0)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "46": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet != null)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "47": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nsuper.outputLeadingTriplet();\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "48": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet == 2)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "49": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer != null)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "50": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ((triplet >>> 2) * buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "51": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer > 0)){\nreturn offset;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "52": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ((triplet >>> 2) + 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "53": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet / buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "54": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (NULL_CHAR >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "55": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet + buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "56": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nreturn offset;        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "57": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nc = LEADING_TRIPLETS[digitOffset++];\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "58": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif(!buffer){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }",
          "59": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nreturn;\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "60": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ( >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "61": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer > 0)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "62": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nbuffer[offset++] = (byte)LEADING_TRIPLETS[digitOffset];\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "63": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((buffer == null)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "64": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (triplet | buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "65": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ((triplet >>> 2) + buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "66": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((triplet > 0)){\nreturn 0;}        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "67": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ((triplet >>> 2) - buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "68": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = ((triplet >>> 2) / buffer);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "69": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nint digitOffset = (c >>> 2);\n        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n    }",
          "70": "    private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset)\n    {\nif((c != NULL_CHAR)){\n        int digitOffset = (triplet >>> 2);        char c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        c = LEADING_TRIPLETS[digitOffset++];\n        if (c != NULL_CHAR) {\n            buffer[offset++] = (byte) c;\n        }\n        // Last is required to be non-empty\n        buffer[offset++] = (byte) LEADING_TRIPLETS[digitOffset];\n        return offset;\n}\n    }"
}