{
          "0": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getName(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "1": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getName(), v2.y, -v1.getY(), v2.x));    }",
          "2": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getName(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "3": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>();    }",
          "4": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.toString(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "5": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.toString(), v2.y, -v1.getY(), v2.x));    }",
          "6": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getX(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "7": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y));    }",
          "8": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.crossProduct(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "9": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y));    }",
          "10": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "11": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getY(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "12": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.toString(), v2.x));    }",
          "13": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getZ(), v2.y, -v1.getY(), v2.x));    }",
          "14": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getY(), v2.y, -v1.getY(), v2.x));    }",
          "15": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getX(), v2.x));    }",
          "16": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z));    }",
          "17": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getZ(), v2.x));    }",
          "18": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y);    }",
          "19": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.getName(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "20": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v1.getY(), v2.z, -v1.getZ(), v2.y);    }",
          "21": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.crossProduct(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "22": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.crossProduct(), v2.x));    }",
          "23": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.crossProduct(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "24": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z);    }",
          "25": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.get(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "26": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn;\n        return new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y),\n                                    v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z),\n                                    v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "27": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.linearCombination(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.toString(v1.getX(), v2.y, -v1.getY(), v2.x));    }",
          "28": "    public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,\n                                                                                    final FieldVector3D<T> v2) {\nreturn new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y), v2.y.debug(v1.getZ(), v2.x, +v1.getX(), v2.z), v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));    }"
}