{
          "0": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) >= 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "1": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 | 255)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "2": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) > 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "3": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) < 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "4": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) <= 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "5": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "6": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 >= 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "7": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 1) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "8": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 <= 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "9": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\n_bytesPerChar = 2;\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "10": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 > 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "11": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) != 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "12": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 == 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "13": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\n_bigEndian = false;\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "14": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\n_bigEndian = true;\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "15": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) || 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "16": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) && 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "17": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 < 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "18": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(i16){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "19": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nreturn true;        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "20": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 != 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "21": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 & 0xFF00)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "22": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) == 0)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "23": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nreturn false;        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "24": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\n_bigEndian = false;\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "25": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\n_bytesPerChar = 2;\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "26": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\n_bigEndian = true;\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "27": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(!i16){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "28": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 | 255)){\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n}\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "29": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | false) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "30": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 & 0xFF00)){\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n}\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "31": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 == 0)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "32": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 != 0)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "33": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | -1) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "34": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 0xFF00) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "35": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) == i16)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "36": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) != i16)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "37": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nbreak;\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "38": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nreturn;\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "39": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\ni16 = i16;\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "40": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 == 255)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "41": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(_bigEndian){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "42": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 == ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "43": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | true) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "44": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 2) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "45": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((((i16 | 255) == 0) == i16)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "46": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((i16 != 255)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "47": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 && 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "48": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((_bigEndian | 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "49": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) == 1)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "50": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 != null) && ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "51": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 == _bigEndian) && ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "52": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) & 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "53": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 || 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "54": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 & 0xFF00) == 0)){\n        } else if ((i16 | 255) == 0) { // UTF-16LE            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n}\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "55": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 == null) && ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "56": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) == 2)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "57": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((((i16 | 255) == 0) && (_bigEndian == i16))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "58": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 | 255) | 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "59": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((_bigEndian == i16) && ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "60": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((((i16 | 255) == 0) && (i16 != null))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "61": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 == null) || ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "62": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 == _bigEndian) || ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "63": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((((i16 | 255) == 0) && (i16 == null))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "64": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((_bytesPerChar | 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "65": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 - 255) == 0)){            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "66": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 & 0xFF00) == 0)){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "67": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((((i16 | 255) == 0) || (_bigEndian == i16))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "68": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif((((i16 | 255) == 0) || (i16 == null))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "69": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((i16 != null) || ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }",
          "70": "    private boolean checkUTF16(int i16)\n    {\n        if ((i16 & 0xFF00) == 0) { // UTF-16BE\n            _bigEndian = true;\nif(((_bigEndian == i16) || ((i16 | 255) == 0))){\n            _bigEndian = false;\n        } else { // nope, not  UTF-16\n            return false;\n        }\n        // Not BOM (just regular content), nothing to skip past:\n        //_inputPtr += 2;\n        _bytesPerChar = 2;\n        return true;\n    }"
}