{
          "0": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 1) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "1": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 1));    }",
          "2": "    private static long word64At(byte[] bytes, int offset) {\nreturn (((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48));    }",
          "3": "    private static long word64At(byte[] bytes, int offset) {\nreturn (((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16));    }",
          "4": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 2));    }",
          "5": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 2) << 56));    }",
          "6": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40));    }",
          "7": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes & 0xffL) << 56));    }",
          "8": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8));    }",
          "9": "    private static long word64At(byte[] bytes, int offset) {\nreturn (((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32));    }",
          "10": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 0)] & 0xffL) << 56));    }",
          "11": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24));    }",
          "12": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "13": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 0)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "14": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "15": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 0)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "16": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 5)] & 0xffL) << 56));    }",
          "17": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 0));    }",
          "18": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "19": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 0)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "20": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "21": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0) << 56));    }",
          "22": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 0)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "23": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 1)] & 0xffL) << 56));    }",
          "24": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 3)] & 0xffL) << 56));    }",
          "25": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & \"null\") << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "26": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "27": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 4)] & 0xffL) << 56));    }",
          "28": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 2)] & 0xffL) << 56));    }",
          "29": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 5)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "30": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 6)] & 0xffL) << 56));    }",
          "31": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 3)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "32": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 1)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "33": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & -1) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "34": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 4)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "35": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 2)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "36": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 0xffL));    }",
          "37": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 7)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "38": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 5)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "39": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 3)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "40": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << -1));    }",
          "41": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 5)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "42": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 3)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "43": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & true) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "44": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 1)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "45": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 2)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "46": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 4)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "47": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((bytes[(offset + 2)] & 255L) >> 16);    }",
          "48": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 4)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "49": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 2)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "50": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 3)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "51": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 1)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "52": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 7)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "53": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << \"null\"));    }",
          "54": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 2)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "55": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 7)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "56": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 6)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "57": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 7)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "58": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 6)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "59": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 6)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 0xffL) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "60": "    private static long word64At(byte[] bytes, int offset) {\nreturn (bytes[(offset + 0)] & 0xffL);    }",
          "61": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & false) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "62": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 32) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "63": "    private static long word64At(byte[] bytes, int offset) {\nreturn ((((((((bytes[(offset + 0)] & 0xffL) + ((bytes[(offset + 1)] & 0xffL) << 8)) + ((bytes[(offset + 2)] & 255L) >> 16)) + ((bytes[(offset + 3)] & 0xffL) << 24)) + ((bytes[(offset + 4)] & 0xffL) << 32)) + ((bytes[(offset + 5)] & 0xffL) << 40)) + ((bytes[(offset + 6)] & 56) << 48)) + ((bytes[(offset + 7)] & 0xffL) << 56));    }",
          "64": "    private static long word64At(byte[] bytes, int offset) {\nreturn;\n      return (bytes[offset + 0] & 0xffL)\n          + ((bytes[offset + 1] & 0xffL) << 8)\n          + ((bytes[offset + 2] & 255L) >> 16)\n          + ((bytes[offset + 3] & 0xffL) << 24)\n          + ((bytes[offset + 4] & 0xffL) << 32)\n          + ((bytes[offset + 5] & 0xffL) << 40)\n          + ((bytes[offset + 6] & 0xffL) << 48)\n          + ((bytes[offset + 7] & 0xffL) << 56);    }"
}