{
          "0": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(d), direction);\n        return n.getNorm();\n    }",
          "1": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "2": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), zero);\n        return n.getNorm();\n    }",
          "3": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nVector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "4": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), p);\n        return n.getNorm();\n    }",
          "5": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction);\n        return n.getNorm();\n    }",
          "6": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nnew Vector3D(1.0, d, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "7": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(zero);\n        return n.getNorm();\n    }",
          "8": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif((d != null)){\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n}\n    }",
          "9": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(n), direction);\n        return n.getNorm();\n    }",
          "10": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D();\n        return n.getNorm();\n    }",
          "11": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(zero), direction);\n        return n.getNorm();\n    }",
          "12": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif((d == null)){\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n}\n    }",
          "13": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(+d.dotProduct(direction));\n        return n.getNorm();\n    }",
          "14": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, +d.dotProduct(direction));\n        return n.getNorm();\n    }",
          "15": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +p.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "16": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif((d == null)){\nreturn null;}        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n    }",
          "17": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d);\n        return n.getNorm();\n    }",
          "18": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(d);\n        return n.getNorm();\n    }",
          "19": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), );\n        return n.getNorm();\n    }",
          "20": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.distance(direction), direction);\n        return n.getNorm();\n    }",
          "21": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(d.direction), direction);\n        return n.getNorm();\n    }",
          "22": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, +d.dotProduct(direction));\n        return n.getNorm();\n    }",
          "23": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, p, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "24": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction.direction);\n        return n.getNorm();\n    }",
          "25": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), zero.direction);\n        return n.getNorm();\n    }",
          "26": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), getDirection().direction);\n        return n.getNorm();\n    }",
          "27": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), getOrigin().direction);\n        return n.getNorm();\n    }",
          "28": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif((d == null)){\nreturn 0;}        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n    }",
          "29": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nn = new Vector3D(1.0, d, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "30": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(+d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "31": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nd++;\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n    }",
          "32": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, direction, d);\n        return n.getNorm();\n    }",
          "33": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, +d.dotProduct(direction), d);\n        return n.getNorm();\n    }",
          "34": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif((direction != null)){\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n}\n    }",
          "35": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, direction);\n        return n.getNorm();\n    }",
          "36": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = +d.dotProduct(direction);\n        return n.getNorm();\n    }",
          "37": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, direction, +d.dotProduct(direction));\n        return n.getNorm();\n    }",
          "38": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "39": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif((direction == null)){\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n}\n    }",
          "40": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(+d.dotProduct(direction), direction, d);\n        return n.getNorm();\n    }",
          "41": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, direction, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "42": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.getNorm(direction), direction);\n        return n.getNorm();\n    }",
          "43": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\n+d.dotProduct(direction);\n        return n.getNorm();\n    }",
          "44": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "45": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nd--;\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n    }",
          "46": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nd = +d.dotProduct(direction);\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n    }",
          "47": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nif(d){\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n}\n    }",
          "48": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, zero, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "49": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nd.subtract(\"null\");\n        final Vector3D n = new Vector3D(1.0, d, +d.dotProduct(direction), direction);        return n.getNorm();\n    }",
          "50": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, +d.dotProduct(direction), 1.0);\n        return n.getNorm();\n    }",
          "51": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, n, +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "52": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.get(direction), direction);\n        return n.getNorm();\n    }",
          "53": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.getName(direction), direction);\n        return n.getNorm();\n    }",
          "54": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, +d.dotProduct(direction), false);\n        return n.getNorm();\n    }",
          "55": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, direction, +d.dotProduct(direction), 1.0);\n        return n.getNorm();\n    }",
          "56": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, +d.dotProduct(direction), true);\n        return n.getNorm();\n    }",
          "57": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +d.p(direction), direction);\n        return n.getNorm();\n    }",
          "58": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, +d.dotProduct(direction), direction, d);\n        return n.getNorm();\n    }",
          "59": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, , +d.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "60": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(1.0, d, +n.dotProduct(direction), direction);\n        return n.getNorm();\n    }",
          "61": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, direction, 1.0);\n        return n.getNorm();\n    }",
          "62": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, +d.dotProduct(direction), null);\n        return n.getNorm();\n    }",
          "63": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, d, +d.dotProduct(direction), 0);\n        return n.getNorm();\n    }",
          "64": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, direction, d, 1.0);\n        return n.getNorm();\n    }",
          "65": "    public double distance(final Vector3D p) {\n        final Vector3D d = p.subtract(zero);\nfinal Vector3D n = new Vector3D(direction, direction, +d.dotProduct(direction), false);\n        return n.getNorm();\n    }"
}