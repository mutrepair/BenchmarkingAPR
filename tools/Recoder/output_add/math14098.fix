{
          "0": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile(((m & 0x001ffffffffffffeL) != 0)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "1": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m > 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "2": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) >= 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "3": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile(((m | 1) == 0)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "4": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((m & 0x001ffffffffffffeL)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "5": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) >= 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "6": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 2) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "7": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "8": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) <= 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "9": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m < 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "10": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m >= 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "11": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) == 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "12": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) != 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "13": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) <= 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "14": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) > 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "15": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((k & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "16": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m == 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "17": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "18": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) > 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "19": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m <= 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "20": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m >= 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "21": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 2) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "22": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 1075) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "23": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m <= 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "24": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m == 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "25": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((m | 1)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "26": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m != 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "27": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m > 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "28": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) < 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "29": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((sign & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "30": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 52) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "31": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((exponent & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "32": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m && 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "33": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & -1) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "34": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) < 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "35": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m || 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "36": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m != 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "37": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 0) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "38": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile(((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) && ((m | 1) == 0))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "39": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile(m){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "40": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m < 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "41": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1075) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "42": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((bits & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "43": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x7ff0000000000000L) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "44": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x8000000000000000L) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "45": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile(((( & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "46": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | -1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "47": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 1) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "48": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((sign != 0)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "49": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x0010000000000000L) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "50": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 52) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "51": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m | 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "52": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "53": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((exponent != 0)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "54": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) - 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "55": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "56": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) >>> 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "57": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) >> 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "58": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((k < 0)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "59": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) - 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "60": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((m >> 1)){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "61": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nif(((m | 1) == 0)){\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n}\n    }",
          "62": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nm |= 0x0010000000000000L;\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "63": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) & 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "64": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) >>> 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "65": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) >> 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "66": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nif(((m & 0x001ffffffffffffeL) != 0)){\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n}\n    }",
          "67": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((value & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "68": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nif((m & 0x001ffffffffffffeL)){\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n}\n    }",
          "69": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nreturn;\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "70": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nm = -m;\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "71": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 0x001ffffffffffffeL) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "72": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) & 0) && ((m | 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "73": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 0x8000000000000000L) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "74": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 0x7ff0000000000000L) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "75": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\n++k;\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "76": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m & 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "77": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nm = (m >> 1);\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "78": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m - 1) == 0))){            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "79": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nnumerator = BigInteger.valueOf(m);\n        while (((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) {            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "80": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0))){\nm = (m >> 1);\n++k;\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "81": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && (m < m))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "82": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && (m > m))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "83": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile((((m & 0x001ffffffffffffeL) != 0) && (m < exponent))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }",
          "84": "    public BigFraction(final double value) throws MathIllegalArgumentException {\n        if (Double.isNaN(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);\n        }\n        if (Double.isInfinite(value)) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);\n        }\n\n        // compute m and k such that value = m * 2^k\n        final long bits     = Double.doubleToLongBits(value);\n        final long sign     = bits & 0x8000000000000000L;\n        final long exponent = bits & 0x7ff0000000000000L;\n        long m              = bits & 0x000fffffffffffffL;\n        if (exponent != 0) {\n            // this was a normalized number, add the implicit most significant bit\n            m |= 0x0010000000000000L;\n        }\n        if (sign != 0) {\n            m = -m;\n        }\n        int k = ((int) (exponent >> 52)) - 1075;\nwhile(((((m & 0x001ffffffffffffeL) != 0) && ((m | 1) == 0)) && (m == m))){\n\n}            m = m >> 1;\n            ++k;\n        }\n\n        if (k < 0) {\n            numerator   = BigInteger.valueOf(m);\n            denominator = BigInteger.ZERO.flipBit(-k);\n        } else {\n            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));\n            denominator = BigInteger.ONE;\n        }\n\n    }"
}