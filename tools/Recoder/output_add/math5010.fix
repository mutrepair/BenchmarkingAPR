{
          "0": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = FastMath.exp(+x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "1": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 + FastMath.exp(+x));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "2": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal long invExp1 = (1 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "3": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (0 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "4": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\ndouble invExp1 = (1 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "5": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = x;\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "6": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.gradient(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "7": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (2 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "8": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 - (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "9": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + x.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "10": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal int invExp1 = (1 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "11": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.exp(invExp1)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "12": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 - FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "13": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double[] invExp1 = (1 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "14": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = FastMath.exp(x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "15": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.exp(param)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "16": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "17": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nreturn 0;            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "18": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 * (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "19": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (x / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "20": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nFastMath.exp(+x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "21": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 * x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "22": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (x * (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "23": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = FastMath.exp((1 / (1 + FastMath.exp(+x))));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "24": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "25": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + Math.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "26": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (x - (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "27": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = 0;\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "28": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((1 / (1 + FastMath.exp(+x))) * (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "29": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.exp(x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "30": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.add(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "31": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 - x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "32": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\ndouble invExp1 = FastMath.exp(+x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "33": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.debug(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "34": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\ndouble invExp1 = (1 + FastMath.exp(+x));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "35": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((1 / (1 + FastMath.exp(+x))) * x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "36": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.x(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "37": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = 1;\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "38": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.validateParameters(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "39": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nif((param != null)){\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n}\n        }",
          "40": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 + (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "41": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.e(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "42": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((1 / (1 + FastMath.exp(+x))) * param);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "43": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (-1 / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "44": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nvalidateParameters(param);\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "45": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((1 / (1 + FastMath.exp(+x))) / x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "46": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 / FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "47": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + LOG.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "48": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nif((1 + FastMath.exp(+x))){\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n}\n        }",
          "49": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = FastMath.validateParameters(x);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "50": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = FastMath.exp(x, 0);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "51": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((1 / (1 + FastMath.exp(+x))) / param);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "52": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 % (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "53": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nif(param){\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n}\n        }",
          "54": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((1 / (1 + FastMath.exp(+x))) - param);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "55": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 * FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "56": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.exp()));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "57": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nreturn 1;            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "58": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (x / param);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "59": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nreturn;\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "60": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.get(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "61": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + FastMath.exp()));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "62": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + param.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "63": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nparam++;\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "64": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nreturn param;            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "65": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 / (1 + invExp1.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "66": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nreturn new double[[]]{(1 - invExp1),invExp1};            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "67": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nif((1 - invExp1)){\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n}\n        }",
          "68": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = FastMath.exp(x, param);\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "69": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (1 >> (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "70": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = ((x / (1 + FastMath.exp(+x))) * (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "71": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (FastMath.exp(x) * (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "72": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nfinal double invExp1 = (FastMath.exp(x) / (1 + FastMath.exp(+x)));\n\n            return new double[] { 1 - invExp1, invExp1 };\n        }",
          "73": "        public double[] gradient(double x, double ... param)\n            throws NullArgumentException,\n                   DimensionMismatchException {\n            validateParameters(param);\n\nbreak;\n            final double invExp1 = 1 / (1 + FastMath.exp(+x));\n            return new double[] { 1 - invExp1, invExp1 };\n        }"
}