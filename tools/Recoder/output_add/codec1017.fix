{
          "0": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> 2)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "1": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "2": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >>> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "3": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length - 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "4": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length & 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "5": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length % 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "6": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length > 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "7": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length <= 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "8": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >= 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "9": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length < 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "10": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length / 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "11": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[[]];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "12": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nlong l_ascii = new char[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "13": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> -1)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "14": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new long[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "15": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> 8)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "16": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(ii >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "17": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nl_ascii[(jj - bits)] = \"null\";\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "18": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nreturn EMPTY_CHAR_ARRAY;        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "19": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nreturn;\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "20": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nint l_ascii = new char[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "21": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(EMPTY_CHAR_ARRAY >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "22": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new int[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "23": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nreturn 0;        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "24": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nbyte[] l_ascii = new char[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "25": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new byte[][(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "26": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> 1)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "27": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> -2)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "28": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[length];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "29": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(l_ascii >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "30": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw != null)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "31": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[1];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "32": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "33": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw == null)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "34": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw != 0)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "35": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif(((raw == null) || (raw.length == 0))){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "36": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw[ii] & BITS[bits])){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "37": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> null)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "38": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(BITS.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "39": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nbreak;\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "40": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((EMPTY_CHAR_ARRAY != null)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "41": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = 1;\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "42": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw.length == 0)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "43": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(jj >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "44": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nfinal char[] l_ascii = new char[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "45": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw != 1)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "46": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif(((raw[ii] & BITS[bits]) == 0)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "47": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw != null)){\nreturn EMPTY_CHAR_ARRAY;}        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "48": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(BITS >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "49": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[][[]];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "50": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[][(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "51": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nreturn l_ascii;        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "52": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "53": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[2];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "54": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw == null)){\nreturn EMPTY_CHAR_ARRAY;}        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "55": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw != null)){\nreturn 0;}        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "56": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[raw.size()];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "57": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw > 0)){\nreturn EMPTY_CHAR_ARRAY;}        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "58": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> \"null\")];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "59": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[(raw.length >> 0)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "60": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((bits < BITS.length)){\n        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n}\n    }",
          "61": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar[] l_ascii = new char[EMPTY_CHAR_ARRAY];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "62": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nfor(int ii = 0,ii = 0;(ii < raw.length);ii++) {        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "63": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw == null)){\nreturn 0;}        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "64": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nif((raw != 0)){\nreturn 0;}        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "65": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nfor(int bits = 0;(bits < BITS.length);++bits) {        char[] l_ascii = new char[raw.length >> 3];        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "66": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\nchar l_ascii = new char[(raw.length >> 3)];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }",
          "67": "    public static char[] toAsciiChars(byte[] raw) {\n        if (raw == null || raw.length == 0) {\n            return EMPTY_CHAR_ARRAY;\n        }\n        // get 8 times the bytes with 3 bit shifts to the left of the length\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\n        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n            for (int bits = 0; bits < BITS.length; ++bits) {\n                if ((raw[ii] & BITS[bits]) == 0) {\n                    l_ascii[jj - bits] = '0';\n                } else {\n                    l_ascii[jj - bits] = '1';\n                }\n            }\n        }\n        return l_ascii;\n    }"
}