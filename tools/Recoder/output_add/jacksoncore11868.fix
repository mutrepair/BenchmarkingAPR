{
          "0": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "1": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn false;            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "2": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputPtr[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "3": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] ^<> 1);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "4": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_closeInput();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "5": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_releaseBuffers();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "6": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nclose();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "7": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_isNextTokenNameYes();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "8": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_finishString();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "9": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_skipString();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "10": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_skipComment();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "11": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_skipCComment();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "12": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_skipCppComment();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "13": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_skipCR();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "14": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_skipLF();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "15": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] ^<> 2);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "16": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] ^<> 0);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "17": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)BYTE_LF[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "18": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nbreak;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "19": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn true;            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "20": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn resetInt(negative, intPartLength);            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "21": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)BYTE_LF ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "22": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "23": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nfinal int c = ((int)_inputBuffer[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "24": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn _parseFloatText(outBuf, outPtr, c, negative, intPartLength);            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "25": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _inputBuffer[_inputPtr++];\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "26": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ;\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "27": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "28": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn null;            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "29": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputPtr ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "30": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _inputPtr[_inputPtr++];\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "31": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[outPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "32": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n_textBuffer.setCurrentLength(outPtr);\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "33": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputPtr[outPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "34": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\ncontinue;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "35": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn negative;            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "36": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)INT_0[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "37": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif(((c == \"null\") || (c == \"null\"))){\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n}\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "38": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] - 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "39": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)INT_9[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "40": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nlong c = ((int)_inputBuffer[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "41": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputBuffer[_inputPtr++]] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "42": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif(!loadMore()){\nreturn false;}            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "43": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nreturn outPtr;            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "44": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif((_inputPtr >= _inputEnd)){\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n}\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "45": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = 0;\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "46": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] ^<> -1);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "47": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = !loadMore();\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "48": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr[_inputPtr++]] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "49": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif(loadMore()){\nreturn false;}            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "50": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)c ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "51": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = 1;\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "52": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\noutBuf = _textBuffer.finishCurrentSegment();\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "53": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\noutPtr = 0;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "54": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n--_inputPtr;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "55": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)outPtr ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "56": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[1] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "57": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif(!loadMore()){\nreturn true;}            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "58": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _inputBuffer;\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "59": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] <= 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "60": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)INT_0 ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "61": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif((_inputPtr != null)){\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n}\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "62": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)INT_9 ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "63": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "64": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif((_inputBuffer != null)){\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n}\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "65": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\noutBuf[outPtr++] = (char)c;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "66": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (((int)_inputBuffer[_inputPtr++] ^<> 255) | 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "67": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (((int)_inputBuffer[_inputPtr++] ^<> 255) * 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "68": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] + 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "69": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nchar c = ((int)_inputBuffer[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "70": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] >> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "71": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n++intPartLength;\n            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "72": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_2(_inputPtr);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "73": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_3(_inputPtr);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "74": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_4(_inputPtr);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "75": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidChar(_inputPtr);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "76": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidInitial(_inputPtr);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "77": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidOther(_inputPtr);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "78": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] >= 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "79": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_2(_inputBuffer);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "80": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_3(_inputBuffer);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "81": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_4(_inputBuffer);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "82": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidChar(_inputBuffer);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "83": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidInitial(_inputBuffer);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "84": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidOther(_inputBuffer);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "85": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] / 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "86": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] % 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "87": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] * 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "88": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nchar[] c = ((int)_inputBuffer[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "89": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] < 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "90": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = ((int)_inputBuffer[_inputPtr++] >>> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "91": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n ;\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "92": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nboolean c = ((int)_inputBuffer[_inputPtr++] ^<> 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "93": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n ;\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "94": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (_inputPtr * 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "95": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (_inputBuffer * 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "96": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (_inputPtr | 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "97": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (_inputBuffer | 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "98": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nif((_inputPtr != null)){\nreturn null;}            int c = (int)_inputBuffer[_inputPtr++] ^ 255;            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "99": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_2(_inputBuffer[_inputPtr++]);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "100": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_3(_inputBuffer[_inputPtr++]);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "101": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _skipUtf8_4(_inputBuffer[_inputPtr++]);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "102": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidChar(_inputBuffer[_inputPtr++]);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "103": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidInitial(_inputBuffer[_inputPtr++]);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "104": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = _reportInvalidOther(_inputBuffer[_inputPtr++]);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "105": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (_inputBuffer[_inputPtr++] | 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }",
          "106": "    private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength)\n        throws IOException, JsonParseException\n    {\n        // Ok, parse the rest\n        while (true) {\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\nint c = (_inputPtr & 255);\n            if (c > INT_9 || c < INT_0) {\n                if (c == '.' || c == 'e' || c == 'E') {\n                    return _parseFloatText(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = (char) c;\n            ++intPartLength;\n        }\n        --_inputPtr; // to push back trailing char (comma etc)\n        _textBuffer.setCurrentLength(outPtr);\n\n        // And there we have it!\n        return resetInt(negative, intPartLength);\n        \n    }"
}