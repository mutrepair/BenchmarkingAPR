{
          "0": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << 0);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "1": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << 1);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "2": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << 6);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "3": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() >>> 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "4": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() >> 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "5": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() > 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "6": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() <= 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "7": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() >= 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "8": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() < 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "9": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() & 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "10": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() - 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "11": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << -1);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "12": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() % 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "13": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << null);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "14": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << 0xFF);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "15": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "16": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nlong chunksBeforeLF = (b64variant.getMaxLineLength() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "17": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() | 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "18": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = b64variant.getMaxLineLength();\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "19": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << -2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "20": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << 3);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "21": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << false);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "22": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << true);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "23": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << \"null\");\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "24": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nfinal int chunksBeforeLF = (b64variant.getMaxLineLength() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "25": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nwriteStartArray();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "26": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nwriteEndArray();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "27": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nwriteStartObject();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "28": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nwriteEndObject();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "29": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nwriteNull();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "30": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nflush();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "31": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nclose();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "32": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\n_releaseBuffers();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "33": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\n_writeNull();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "34": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\n_flushBuffer();\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "35": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() << -0);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "36": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getName() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "37": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.getMaxLineLength() * 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "38": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nb64variant.getMaxLineLength();\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "39": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant._writeBinary() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "40": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nboolean ;\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "41": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint b24 = ((int)readBuffer[inputPtr++] << 8);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "42": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.get() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "43": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\ninputPtr = 0;\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "44": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nint chunksBeforeLF = (b64variant.toString() << 2);\n\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "45": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nreturn;\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "46": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\nlastFullOffset = (inputEnd - 3);\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }",
          "47": "    protected int _writeBinary(Base64Variant b64variant,\n            InputStream data, byte[] readBuffer, int bytesLeft)\n        throws IOException, JsonGenerationException\n    {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;       \n        \n        // Let's also reserve room for possible (and quoted) LF char each round\n        int safeOutputEnd = _outputEnd - 6;\ninputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n        int chunksBeforeLF = b64variant.getMaxLineLength() << 2;\n        while (bytesLeft > 2) { // main loop for full triplets\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) { // required to try to read to have at least 3 bytes\n                    break;\n                }\n                lastFullOffset = inputEnd-3;\n            }\n            if (_outputTail > safeOutputEnd) { // need to flush\n                _flushBuffer();\n            }\n            int b24 = ((int) readBuffer[inputPtr++]) << 8;\n            b24 |= ((int) readBuffer[inputPtr++]) & 0xFF;\n            b24 = (b24 << 8) | (((int) readBuffer[inputPtr++]) & 0xFF);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if (--chunksBeforeLF <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        }\n        \n        // And then we may have 1 or 2 leftover bytes to encode\n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) { // yes, but do we have room for output?\n                if (_outputTail > safeOutputEnd) { // don't really need 6 bytes but...\n                    _flushBuffer();\n                }\n                int b24 = ((int) readBuffer[inputPtr++]) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) readBuffer[inputPtr]) & 0xFF) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }"
}