{
          "0": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 1)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "1": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 0)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "2": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 0x3F)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "3": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "4": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "5": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 6)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "6": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[outPtr++]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "7": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?outputBytes:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "8": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?pb:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "9": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?buffer:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "10": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 2) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "11": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_paddingChar:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "12": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 1) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "13": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 18) & 0x3F)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "14": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?bits:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "15": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 12) & 0x3F)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "16": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 12)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "17": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 2)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "18": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) & 0x3F)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "19": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 0) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "20": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_usesPadding:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "21": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?outPtr:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "22": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "23": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\npb = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "24": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | -1)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "25": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 1))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "26": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?pb[outPtr++]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "27": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?outputBytes[outPtr++]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "28": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB._base64ToAsciiB:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "29": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?getPaddingByte()._base64ToAsciiB:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "30": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?bits[outPtr++]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "31": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?outputBytes[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "32": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?bits[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "33": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?buffer[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "34": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?pb[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "35": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_paddingChar[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "36": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 0x3F) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "37": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 0))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "38": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_paddingChar[outPtr++]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "39": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?buffer[outPtr++]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "40": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | true)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "41": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | false)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "42": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[1]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "43": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 63) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "44": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[0]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "45": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = (outputBytes == 2);\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "46": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((bits >> 6) | 63);\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "47": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits & 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "48": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\noutputBytes = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "49": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >>> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "50": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes - 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "51": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes <= 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "52": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits - 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "53": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes >> 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "54": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes >= 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "55": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes > 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "56": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | null)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "57": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits <= 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "58": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes >>> 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "59": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes & 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "60": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits > 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "61": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits | 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "62": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits % 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "63": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits * 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "64": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >= 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "65": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes % 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "66": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) & 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "67": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = (((outputBytes == 2) && (outputBytes == 2)))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "68": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "69": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:((buffer == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "70": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nreturn;\n            buffer[outPtr++] = (outputBytes == 2) ?\n                _base64ToAsciiB[(bits >> 6) | 63] : pb;            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "71": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = (((outputBytes == 2) && (buffer == 2)))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "72": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:((_base64ToAsciiB[((bits >> 6) | 63)] == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "73": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:((buffer == null))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "74": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = (((outputBytes == 2) && (buffer == 0)))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "75": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:((buffer == _base64ToAsciiB[((bits >> 6) | 63)]))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "76": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:(((_base64ToAsciiB[((bits >> 6) | 63)] != _base64ToAsciiB[((bits >> 6) | 63)]) && (outputBytes == 2)))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "77": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:(((outputBytes == 2) && (buffer != _base64ToAsciiB[((bits >> 6) | 63)])))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "78": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:(((_base64ToAsciiB[((bits >> 6) | 63)] != _base64ToAsciiB[((bits >> 6) | 63)]) && (_base64ToAsciiB != 63)))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }",
          "79": "    public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr)\n    {\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];\n        buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];\n        if (_usesPadding) {\n            byte pb = (byte) _paddingChar;\nbuffer[outPtr++] = ((outputBytes == 2))?_base64ToAsciiB[((bits >> 6) | 63)]:(((_base64ToAsciiB[((bits >> 6) | 63)] != _base64ToAsciiB[((bits >> 6) | 63)]) && (_base64ToAsciiB != null)))?_base64ToAsciiB[((bits >> 6) | 63)]:pb;\n            buffer[outPtr++] = pb;\n        } else {\n            if (outputBytes == 2) {\n                buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];\n            }\n        }\n        return outPtr;\n    }"
}