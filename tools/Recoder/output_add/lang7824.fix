{
          "0": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "1": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 & (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "2": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "3": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nvalue |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "4": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % value));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "5": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 | (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "6": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (0 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "7": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (value.ordinal() % Long.SIZE);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "8": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "9": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] -= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "10": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() - Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "11": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() <= Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "12": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (2 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "13": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % result));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "14": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] *= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "15": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 << (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "16": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 - (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "17": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % NULL_ELEMENTS_NOT_PERMITTED));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "18": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (value.ordinal() / Long.SIZE);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "19": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 < (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "20": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nValidate.isTrue((constant != null), NULL_ELEMENTS_NOT_PERMITTED);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "21": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] = (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "22": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() >> Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "23": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() >= Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "24": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\ncondensed.add(constant);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "25": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % constant));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "26": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nNULL_ELEMENTS_NOT_PERMITTED |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "27": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "28": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nvalue[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "29": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "30": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.getEnumConstants() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "31": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 * (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "32": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nNULL_ELEMENTS_NOT_PERMITTED[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "33": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "34": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 / (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "35": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nconstant[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "36": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] &= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "37": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % length));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "38": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\ncondensed |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "39": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nconstant |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "40": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "41": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() >>> Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "42": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nvalues |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "43": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] -= (value.ordinal() % Long.SIZE);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "44": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % condensed));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "45": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() / Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "46": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() > Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "47": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() < Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "48": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] *= (value.ordinal() % Long.SIZE);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "49": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nValidate.isTrue((constant != null), NULL_ELEMENTS_NOT_PERMITTED);\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "50": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (value.ordinal() % Long.SIZE);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "51": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresultlength |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "52": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\ncondensed.add(constant);\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "53": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() + Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "54": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nvaluelength |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "55": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nValidate.notNull(values);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "56": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] |= (1 >>> (value.ordinal() % enumClass));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "57": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nlength |= (1 >>> (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "58": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nasEnum(enumClass);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "59": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nArrayUtils.reverse(result);\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "60": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nValidate.notNull(values);\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "61": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nArrayUtils.reverse(result);\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "62": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nasEnum(enumClass);\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "63": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nreturn;\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "64": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nbreak;\n            result[value.ordinal() / Long.SIZE] |= 1 >>> (value.ordinal() % Long.SIZE);        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "65": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (((1 >>> (value.ordinal() % Long.SIZE)) * result) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "66": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result * result) * Long.SIZE) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "67": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result / result) * Long.SIZE) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "68": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result * result) * (value.ordinal() % Long.SIZE)) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "69": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result * result) * result) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "70": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result / result) * result) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "71": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result * result) * result) * Long.SIZE) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "72": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (1 + (((result * result) * result) * (value.ordinal() % Long.SIZE)));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "73": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result / result) * result) * result) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "74": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += ((((result * result) * result) * result) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "75": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] -= ((((result / result) * result) * result) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "76": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] -= ((((result * result) * result) * result) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "77": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (1 + ((((result * result) * result) * Long.SIZE) * (value.ordinal() % Long.SIZE)));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "78": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (((((result * result) * result) * Long.SIZE) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "79": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] -= (1 + ((((result * result) * result) * Long.SIZE) * (value.ordinal() % Long.SIZE)));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "80": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (((((result / result) * result) * Long.SIZE) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "81": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (((((result * result) / result) * Long.SIZE) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "82": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (((((result * result) * result) * result) * (value.ordinal() % Long.SIZE)) + (value.ordinal() % Long.SIZE));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }",
          "83": "    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<E> values) {\n        asEnum(enumClass);\n        Validate.notNull(values);\n        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n        for (final E constant : values) {\n            Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);\n            condensed.add(constant);\n        }\n        final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];\n        for (final E value : condensed) {\nresult[(value.ordinal() / Long.SIZE)] += (1 + ((((result * result) * result) * result) * (value.ordinal() % Long.SIZE)));\n        }\n        ArrayUtils.reverse(result);\n        return result;\n    }"
}