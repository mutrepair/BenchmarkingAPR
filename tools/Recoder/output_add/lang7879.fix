{
          "0": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 > (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "1": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 < (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "2": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((block[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "3": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 <= (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "4": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 >= (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "5": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block >= values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "6": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) >= 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "7": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((block ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "8": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() >= Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "9": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block <= values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "10": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif((block < values.length)){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "11": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE)))){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "12": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) <= 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "13": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "14": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() <= Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "15": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif((1 << (constant.ordinal() % Long.SIZE))){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "16": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((constant ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "17": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0)){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "18": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() > Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "19": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block > values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "20": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((constant[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "21": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "22": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) > 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "23": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % block))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "24": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() < Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "25": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((SIZE[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "26": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % constant))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "27": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) < 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "28": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (2 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "29": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif((constant.ordinal() % Long.SIZE)){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "30": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) == 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "31": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((enumClass[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "32": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "33": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((length[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "34": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif((((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0)) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "35": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block == values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "36": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < block) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "37": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (0 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "38": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 & (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "39": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.getEnumConstants() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "40": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 || (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "41": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % SIZE[block]))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "42": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % block[block]))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "43": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 && (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "44": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 == (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "45": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < block[block]) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "46": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((results ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "47": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && (( ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "48": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.notNull() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "49": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() == Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "50": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % length))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "51": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0)))){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "52": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((enumClass ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "53": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block != values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "54": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % enumClass[block]))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "55": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < constant) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "56": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "57": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((SIZE ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "58": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((results[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "59": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 != (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "60": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 | (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "61": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % enumClass))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "62": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % results))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "63": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) >> 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "64": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && (([block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "65": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) >>> 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "66": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block >>> values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "67": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block >> values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "68": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() != Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "69": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nresults.add(constant);\n            if (block < values.length && (values[block] ^ 1 << (constant.ordinal() % Long.SIZE)) != 0) {                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "70": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nvalues = ArrayUtils.clone(Validate.notNull(values));\n            if (block < values.length && (values[block] ^ 1 << (constant.ordinal() % Long.SIZE)) != 0) {                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "71": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nArrayUtils.reverse(values);\n            if (block < values.length && (values[block] ^ 1 << (constant.ordinal() % Long.SIZE)) != 0) {                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "72": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() >>> Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "73": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() & Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "74": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) - 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "75": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif((((((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0)) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0)) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0)) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){\n                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "76": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block < values.length) && ((values[block] ^<> (1 << (constant.ordinal() >> Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "77": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nif(((block - values.length) && ((values[block] ^<> (1 << (constant.ordinal() % Long.SIZE))) != 0))){                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "78": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nreturn;\n            if (block < values.length && (values[block] ^ 1 << (constant.ordinal() % Long.SIZE)) != 0) {                results.add(constant);\n            }\n        }\n        return results;\n    }",
          "79": "    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, long... values) {\n        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));\n        values = ArrayUtils.clone(Validate.notNull(values));\n        ArrayUtils.reverse(values);\n        for (final E constant : enumClass.getEnumConstants()) {\n            final int block = constant.ordinal() / Long.SIZE;\nbreak;\n            if (block < values.length && (values[block] ^ 1 << (constant.ordinal() % Long.SIZE)) != 0) {                results.add(constant);\n            }\n        }\n        return results;\n    }"
}