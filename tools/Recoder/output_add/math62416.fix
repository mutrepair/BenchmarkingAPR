{
          "0": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | DEFAULT_EXPECTED_SIZE);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "1": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | RESIZE_MULTIPLIER);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "2": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | PERTURB_SHIFT);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "3": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | keys);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "4": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | size);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "5": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "6": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | count);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "7": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | referenceCount);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "8": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | current);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "9": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | next);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "10": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "11": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | perturb);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "12": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nj = probe(perturb, j);\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "13": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | missingEntries);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "14": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j & mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "15": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | index);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "16": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (perturb | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "17": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = index;\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "18": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | FREE);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "19": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\ngrowTable();\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "20": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nadvance();\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "21": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | DEFAULT_EXPECTED_SIZE.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "22": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | RESIZE_MULTIPLIER.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "23": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | PERTURB_SHIFT.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "24": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | keys.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "25": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | size.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "26": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | mask.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "27": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | count.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "28": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | referenceCount.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "29": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | current.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "30": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | next.mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "31": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | size().mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "32": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | key().mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "33": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nj = probe(perturb, j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "34": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (index | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "35": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = mask;\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "36": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j * mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "37": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex += (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "38": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nbreak;\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "39": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j < mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "40": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (missingEntries | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "41": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (hash | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "42": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j - mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "43": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nj = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "44": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nperturb = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "45": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (PERTURB_SHIFT | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "46": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j + mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "47": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (FREE | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "48": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j / mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "49": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (mask | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "50": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = j;\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "51": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j << mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "52": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn missingEntries;            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "53": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "54": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j > mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "55": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (mask | j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "56": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j >>> mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "57": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn index;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "58": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex -= (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "59": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = ((j | mask) | j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "60": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "61": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn doRemove(index);            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "62": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nif(containsKey(key, index)){\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n}\n        }\n\n        return missingEntries;\n\n    }",
          "63": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = ((j | mask) | 1);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "64": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (j | (j | mask));\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "65": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (mask | index);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "66": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nhash = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "67": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nmissingEntries = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "68": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (mask | (j | mask));\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "69": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = ((j | mask) | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "70": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nPERTURB_SHIFT = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "71": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (mask * j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "72": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nif((states[index] == FREE)){\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n}\n        }\n\n        return missingEntries;\n\n    }",
          "73": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = ((j | mask) | index);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "74": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\ncontinue;\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "75": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nindex = (mask + j);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "76": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nFREE = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "77": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn;\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "78": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nmask = (j | mask);\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "79": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn;\n            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "80": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn missingEntries;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "81": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nfor(int perturb = perturb(hash);(states[index] != FREE);perturb >>= PERTURB_SHIFT) {            index = j | mask;            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }",
          "82": "    public T remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\nreturn doRemove(index);            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }"
}