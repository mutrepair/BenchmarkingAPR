{
          "0": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out < -mask) | bits);\n        }\n        return out;\n    }",
          "1": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & mask) | bits);\n        }\n        return out;\n    }",
          "2": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out > -mask) | bits);\n        }\n        return out;\n    }",
          "3": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((mask & -mask) | bits);\n        }\n        return out;\n    }",
          "4": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | mask);\n        }\n        return out;\n    }",
          "5": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & bits) | bits);\n        }\n        return out;\n    }",
          "6": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & shift) | bits);\n        }\n        return out;\n    }",
          "7": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out <= -mask) | bits);\n        }\n        return out;\n    }",
          "8": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out || -mask) | bits);\n        }\n        return out;\n    }",
          "9": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = (out & -mask);\n        }\n        return out;\n    }",
          "10": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | bits);\n        }\n        return out;\n    }",
          "11": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out | -mask) | bits);\n        }\n        return out;\n    }",
          "12": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out && -mask) | bits);\n        }\n        return out;\n    }",
          "13": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & out) | bits);\n        }\n        return out;\n    }",
          "14": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) < bits);\n        }\n        return out;\n    }",
          "15": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & i) | bits);\n        }\n        return out;\n    }",
          "16": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out >= -mask) | bits);\n        }\n        return out;\n    }",
          "17": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((bits & -mask) | bits);\n        }\n        return out;\n    }",
          "18": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((shift & -mask) | bits);\n        }\n        return out;\n    }",
          "19": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | shift);\n        }\n        return out;\n    }",
          "20": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out == -mask) | bits);\n        }\n        return out;\n    }",
          "21": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) > bits);\n        }\n        return out;\n    }",
          "22": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out + -mask) | bits);\n        }\n        return out;\n    }",
          "23": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((i & -mask) | bits);\n        }\n        return out;\n    }",
          "24": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | i);\n        }\n        return out;\n    }",
          "25": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout += ((out & -mask) | bits);\n        }\n        return out;\n    }",
          "26": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | out);\n        }\n        return out;\n    }",
          "27": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nshift = ((i * 1) + dstPos);\n}\n            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "28": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = mask;\n        }\n        return out;\n    }",
          "29": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & ) | bits);\n        }\n        return out;\n    }",
          "30": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & srcPos) | bits);\n        }\n        return out;\n    }",
          "31": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) <= bits);\n        }\n        return out;\n    }",
          "32": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & src) | bits);\n        }\n        return out;\n    }",
          "33": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) || bits);\n        }\n        return out;\n    }",
          "34": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -bits) | bits);\n        }\n        return out;\n    }",
          "35": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nshift = ((i * 1) + dstPos);\n        }\n        return out;\n    }",
          "36": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) >= bits);\n        }\n        return out;\n    }",
          "37": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) && bits);\n        }\n        return out;\n    }",
          "38": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | -mask);\n        }\n        return out;\n    }",
          "39": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nif((mask != null)){\n}\n            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "40": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\n-mask = ((out & -mask) | bits);\n        }\n        return out;\n    }",
          "41": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & ~mask) | bits);\n        }\n        return out;\n    }",
          "42": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | );\n        }\n        return out;\n    }",
          "43": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = (( & -mask) | bits);\n        }\n        return out;\n    }",
          "44": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) & bits);\n        }\n        return out;\n    }",
          "45": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = bits;\n        }\n        return out;\n    }",
          "46": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout -= ((out & -mask) | bits);\n        }\n        return out;\n    }",
          "47": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\n        }\n        return out;\n    }",
          "48": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nbreak;\n            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "49": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) == bits);\n        }\n        return out;\n    }",
          "50": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout += (out & -mask);\n        }\n        return out;\n    }",
          "51": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = (((out & -mask) | bits) | mask);\n        }\n        return out;\n    }",
          "52": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) + bits);\n        }\n        return out;\n    }",
          "53": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((src & -mask) | bits);\n        }\n        return out;\n    }",
          "54": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((srcPos & -mask) | bits);\n        }\n        return out;\n    }",
          "55": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | srcPos);\n        }\n        return out;\n    }",
          "56": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | src);\n        }\n        return out;\n    }",
          "57": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & dstInit) | bits);\n        }\n        return out;\n    }",
          "58": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -out) | bits);\n        }\n        return out;\n    }",
          "59": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((out & -mask) | -bits);\n        }\n        return out;\n    }",
          "60": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\n~mask = ((out & -mask) | bits);\n        }\n        return out;\n    }",
          "61": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((-bits & -mask) | bits);\n        }\n        return out;\n    }",
          "62": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nreturn dstInit;            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "63": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nfor(int i = 0;(i < nBools);i++) {            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "64": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nreturn;\n            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "65": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\ncontinue;\n            out = (out & -mask) | bits;        }\n        return out;\n    }",
          "66": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((((bits | bits) | mask) | bits) | bits);\n        }\n        return out;\n    }",
          "67": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((((bits | bits) | mask) | bits) | -mask);\n        }\n        return out;\n    }",
          "68": "    public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n            return dstInit;\n        }\n        if (nBools - 1 + dstPos >= 32) {\n            throw new IllegalArgumentException(\n                \"nBools-1+dstPos is greather or equal to than 32\");\n        }\n        int out = dstInit;\n        int shift = 0;\n        for (int i = 0; i < nBools; i++ ) {\n            shift = i * 1 + dstPos;\n            final int bits = (src[i + srcPos] ? 1 : 0) << shift;\n            final int mask = 0x1 << shift;\nout = ((((bits | bits) | mask) | -mask) | bits);\n        }\n        return out;\n    }"
}