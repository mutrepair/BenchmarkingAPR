{
          "0": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "1": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (getEntries().get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "2": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, key);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "3": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "4": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(iter) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "5": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (res.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "6": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (v.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "7": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.subtract(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "8": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get() * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "9": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) - iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "10": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get() * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "11": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * res.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "12": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry((entries.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "13": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(res) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "14": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, DEFAULT_ZERO_TOLERANCE);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "15": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, epsilon);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "16": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, iter);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "17": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\niter.advance();\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "18": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, );\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "19": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, -iter.value());\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "20": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) + iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "21": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\niter.advance();\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "22": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(v) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "23": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "24": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nif(entries.containsKey(key)){\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n}\n            }\n        }\n        return res;\n    }",
          "25": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(iter, key);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "26": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry((entries.get(key) * iter.value()), key);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "27": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * v.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "28": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.value()), key);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "29": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, entries.get(key));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "30": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, iter.value());\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "31": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\ncheckVectorDimensions(v.getDimension());\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "32": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.getEntries(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "33": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.value()), 0);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "34": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.containsKey(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "35": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nif((key != null)){\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n}\n            }\n        }\n        return res;\n    }",
          "36": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) / iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "37": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, );\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "38": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, -iter.value());\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "39": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.subtract()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "40": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\ncheckVectorDimensions(v.getDimension());\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "41": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.checkVectorDimensions(key, (entries.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "42": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nunitize();\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "43": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nremove();\n                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "44": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (iter.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "45": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, v);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "46": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.iterator(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "47": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(iter, (entries.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "48": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(iter.value());\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "49": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, ((entries.get(key) * iter.value()) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "50": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.hasNext(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "51": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.getEntries()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "52": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.add(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "53": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * key));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "54": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.value()), 1);\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "55": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(entries.get(key));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "56": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.debug(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "57": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.getDimension(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "58": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * .value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "59": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.debug(key, (entries.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "60": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) / key));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "61": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nreturn res;                res.setEntry(key, entries.get(key) * iter.value());            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "62": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.getDimension()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "63": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (key * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "64": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get() * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "65": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.iterator()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "66": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (key / iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "67": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(entries.get(key, key));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "68": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * entries.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "69": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.hasNext()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "70": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, ((entries.get(key) * iter.value()) * key));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "71": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get() * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "72": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * iter.containsKey()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "73": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nres.setEntry(key, (entries.get(key) * key.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }",
          "74": "    public OpenMapRealVector subtract(OpenMapRealVector v)\n        throws DimensionMismatchException {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = copy();\n        Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\nv.setEntry(key, (entries.get(key) * iter.value()));\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        }\n        return res;\n    }"
}