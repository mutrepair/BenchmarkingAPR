{
          "0": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "1": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nlong low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "2": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = ;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "3": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = -1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "4": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "5": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\ndouble low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "6": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\ndouble low = ;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "7": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "8": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nfinal int low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "9": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = -2;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "10": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nObject low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "11": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = 2;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "12": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\ndouble low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "13": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = false;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "14": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = itemCount;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "15": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nboolean low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "16": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nString low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "17": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nfinal double low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "18": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\n low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "19": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nreturn 0;            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "20": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = \"null\";\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "21": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = -1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "22": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "23": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = -0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "24": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = null;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "25": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nlong[] low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "26": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = e;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "27": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nreturn;\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "28": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint[] low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "29": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nif((itemCount != null)){\ncontinue;\n}\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "30": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint low = true;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "31": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nhigh = mid;\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "32": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nif((low + high)){\ncontinue;\n}\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "33": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nlow = mid;\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "34": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nList low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "35": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nlow low = 1;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "36": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nif((itemCount == null)){\ncontinue;\n}\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "37": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nreturn low;            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "38": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nbreak;\n            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "39": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nif((itemCount == null)){\nreturn 0;}            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "40": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nreturn high;            int low = 1;            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "41": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\ndouble lowValue = dataset.getXValue(series, low);\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "42": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nint mid = ((low + high) / 2);\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "43": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\nhigh = mid;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }",
          "44": "    public static int findLiveItemsLowerBound(XYDataset dataset, int series,\n            double xLow, double xHigh) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (xLow >= xHigh) {\n            throw new IllegalArgumentException(\"Requires xLow < xHigh.\");\n        }\n        int itemCount = dataset.getItemCount(series);\n        if (itemCount <= 1) {\n            return 0;\n        }\n        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {\n            // for data in ascending order by x-value, we are (broadly) looking\n            // for the index of the highest x-value that is less than xLow\ndouble highValue = dataset.getXValue(series, high);\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue >= xLow) {\n                // special case where the lowest x-value is >= xLow\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue < xLow) {\n                // special case where the highest x-value is < xLow\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV >= xLow) {\n                    high = mid;\n                }\n                else {\n                    low = mid;\n                }\n            }\n            return high;\n        }\n        else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {\n            // when the x-values are sorted in descending order, the lower\n            // bound is found by calculating relative to the xHigh value\n            int low = 0;\n            int high = itemCount - 1;\n            double lowValue = dataset.getXValue(series, low);\n            if (lowValue <= xHigh) {\n                return low;\n            }\n            double highValue = dataset.getXValue(series, high);\n            if (highValue > xHigh) {\n                return high;\n            }\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                double midV = dataset.getXValue(series, mid);\n                if (midV > xHigh) {\n                    low = mid;\n                }\n                else {\n                    high = mid;\n                }\n                mid = (low + high) / 2;\n            }\n            return high;\n        }\n        else {\n            // we don't know anything about the ordering of the x-values,\n            // but we can still skip any initial values that fall outside the\n            // range...\n            int index = 0;\n            // skip any items that don't need including...\n            double x = dataset.getXValue(series, index);\n            while (index < itemCount && (x < xLow || x > xHigh)) {\n                index++;\n                if (index < itemCount) {\n                    x = dataset.getXValue(series, index);\n                }\n            }\n            return Math.min(Math.max(0, index), itemCount - 1);\n        }\n    }"
}