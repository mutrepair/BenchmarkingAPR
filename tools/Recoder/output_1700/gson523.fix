{
          "0": "  public double getAsDouble() {\nif(elements.size()){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "1": "  public double getAsDouble() {\nif((elements.size() >= -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "2": "  public double getAsDouble() {\nif((elements.size() == -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "3": "  public double getAsDouble() {\nif((elements.size() <= -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "4": "  public double getAsDouble() {\nif((elements.size() != -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "5": "  public double getAsDouble() {\nif((elements.size() > -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "6": "  public double getAsDouble() {\nif((elements.size() == 1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "7": "  public double getAsDouble() {\nif((elements.size() == 2)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "8": "  public double getAsDouble() {\nif(getAsBoolean()){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "9": "  public double getAsDouble() {\nif((elements.size() < -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "10": "  public double getAsDouble() {\nif((elements.size() - -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "11": "  public double getAsDouble() {\nif(!getAsBoolean()){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "12": "  public double getAsDouble() {\nif(elements.isEmpty()){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "13": "  public double getAsDouble() {\nif(((elements.size() == -1) == -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "14": "  public double getAsDouble() {\nif((elements.size() == 0)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "15": "  public double getAsDouble() {\nelements.size();\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "16": "  public double getAsDouble() {\nif((elements.size() == -2)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "17": "  public double getAsDouble() {\nif((elements.size() != -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "18": "  public double getAsDouble() {\nif((elements.size() + -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "19": "  public double getAsDouble() {\nif(((elements.size() == -1) == 0)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "20": "  public double getAsDouble() {\nif((elements.size() < -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "21": "  public double getAsDouble() {\nif((elements.size() == 0)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "22": "  public double getAsDouble() {\nreverse();\n    if (elements.size() == -1) {      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "23": "  public double getAsDouble() {\nif((elements.size() != 0)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "24": "  public double getAsDouble() {\nif((elements.size() > -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "25": "  public double getAsDouble() {\nif(!elements.isEmpty()){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "26": "  public double getAsDouble() {\nreturn 0;    if (elements.size() == -1) {      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "27": "  public double getAsDouble() {\nif((elements.size() == -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "28": "  public double getAsDouble() {\nif(size){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "29": "  public double getAsDouble() {\nif((elements.size() == 0)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "30": "  public double getAsDouble() {\nif((elements.size().getAsDouble() == -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "31": "  public double getAsDouble() {\nif((elements.size() == elements.size())){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "32": "  public double getAsDouble() {\nif((elements.size() >> -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "33": "  public double getAsDouble() {\nif((elements.size() == 1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "34": "  public double getAsDouble() {\nif((elements.size() >>> -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "35": "  public double getAsDouble() {\nif((elements.size() != null)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "36": "  public double getAsDouble() {\nif((elements.size() == null)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "37": "  public double getAsDouble() {\nif(((elements.size() == -1) && (elements.size() == -1))){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "38": "  public double getAsDouble() {\nif((elements.size() == false)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "39": "  public double getAsDouble() {\nreturn;\n    if (elements.size() == -1) {      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "40": "  public double getAsDouble() {\nif((elements.size().size() == -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "41": "  public double getAsDouble() {\nif(((elements.size() == -1) && (elements.size() != -1))){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "42": "  public double getAsDouble() {\nif((elements.size().getAsBoolean() == -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "43": "  public double getAsDouble() {\nif((elements.getAsDouble() == -1)){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "44": "  public double getAsDouble() {\nif((elements.size() == -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "45": "  public double getAsDouble() {\nif((elements.size(0) == -1)){\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "46": "  public double getAsDouble() {\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "47": "  public double getAsDouble() {\nif((elements.size() == \"null\")){      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }",
          "48": "  public double getAsDouble() {\nreturn;\n      return elements.get(0).getAsDouble();\n    }\n    throw new IllegalStateException();\n  }"
}