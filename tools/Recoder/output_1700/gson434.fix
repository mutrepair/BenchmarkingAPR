{
          "0": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029));  }",
          "1": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || (codePoint == 0x2028));  }",
          "2": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint >= 0x2029)) || false);  }",
          "3": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint <= 0x2029)) || false);  }",
          "4": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint < 0x20);  }",
          "5": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "6": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == false)) || (codePoint == 0x2029)) || false);  }",
          "7": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2029)) || (codePoint == 0x2029)) || false);  }",
          "8": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2028)) || false);  }",
          "9": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == true)) || (codePoint == 0x2029)) || false);  }",
          "10": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == false)) || false);  }",
          "11": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == true)) || false);  }",
          "12": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint > 0x2029)) || false);  }",
          "13": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint == 0x2029);  }",
          "14": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint <= 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "15": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint == 0x2028);  }",
          "16": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x20)) || (codePoint == 0x2029)) || false);  }",
          "17": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || 0x2028);  }",
          "18": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false));  }",
          "19": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || true);  }",
          "20": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || 0x2029);  }",
          "21": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint >= 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "22": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x20)) || false);  }",
          "23": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || (((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)));  }",
          "24": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint < 0x2029)) || false);  }",
          "25": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || (codePoint == 0x2029));  }",
          "26": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || ((codePoint < 0x20) || (codePoint == 0x2028)));  }",
          "27": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || 0x20);  }",
          "28": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 1)) || (codePoint == 0x2029)) || false);  }",
          "29": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || (codePoint == 0x2029));  }",
          "30": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false));  }",
          "31": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || (codePoint == 0x2029)) || (codePoint == 0x2029));  }",
          "32": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || codePoint);  }",
          "33": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 1)) || false);  }",
          "34": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || (codePoint == 0x2028));  }",
          "35": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false));  }",
          "36": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false));  }",
          "37": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || (codePoint == 0x2028)) || (codePoint == 0x2029));  }",
          "38": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint > 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "39": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) && false);  }",
          "40": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || (codePoint == 0x2029));  }",
          "41": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || (codePoint < codePoint));  }",
          "42": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false) || false);  }",
          "43": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint - 0x2029)) || false);  }",
          "44": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2028));  }",
          "45": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || (codePoint == 0x2028));  }",
          "46": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0)) || (codePoint == 0x2029)) || false);  }",
          "47": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || false);  }",
          "48": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn codePoint;  }",
          "49": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == -1)) || (codePoint == 0x2029)) || false);  }",
          "50": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint != 0x2029)) || false);  }",
          "51": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0)) || false);  }",
          "52": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || 1);  }",
          "53": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint == 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "54": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == -1)) || false);  }",
          "55": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == \"null\")) || (codePoint == 0x2029)) || false);  }",
          "56": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 2)) || (codePoint == 0x2029)) || false);  }",
          "57": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint - 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "58": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 2)) || false);  }",
          "59": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == \"null\")) || false);  }",
          "60": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || ( == 0x2029)) || false);  }",
          "61": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == null)) || (codePoint == 0x2029)) || false);  }",
          "62": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || -1);  }",
          "63": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (-codePoint == 0x2029)) || false);  }",
          "64": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint + 0x2029)) || false);  }",
          "65": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == null)) || false);  }",
          "66": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || \"null\");  }",
          "67": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint >> 0x2029)) || false);  }",
          "68": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint != 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "69": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint || 0x2029)) || false);  }",
          "70": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint + 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "71": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint || 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || false);  }",
          "72": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) == false);  }",
          "73": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn;\n    return codePoint < 0x20\n        || codePoint == 0x2028  // Line separator\n        || codePoint == 0x2029  // Paragraph separator\n        || (false);  }"
}