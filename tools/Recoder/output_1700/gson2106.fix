{
          "0": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonNull()){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "1": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(!element.isJsonNull()){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "2": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(serializeNulls.isJsonNull()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "3": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nflush();\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "4": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nclose();\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "5": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(writer.isJsonNull()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "6": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nreturn;\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "7": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "8": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonNull()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "9": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(!element){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "10": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((serializeNulls == null)){\nreturn;\n}    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "11": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((serializeNulls != null)){\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n}\n    }\n  }",
          "12": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((element != null) && element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "13": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.write()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "14": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element == null)){\nreturn;\n}    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "15": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(.isJsonNull()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "16": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element != null)){\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n}\n    }\n  }",
          "17": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((serializeNulls != null)){\nreturn;\n}    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "18": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(primitive.isJsonNull()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "19": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(isJsonNull()){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "20": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(!isJsonNull()){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "21": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element != null)){\nreturn;\n}    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "22": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonNull(serializeNulls)){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "23": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonPrimitive()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "24": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((element != null) || element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "25": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isNumber()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "26": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.nullValue()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "27": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isBoolean()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "28": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonObject()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "29": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonArray()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "30": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nwriter.nullValue();\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "31": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((element == null) && element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "32": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.beginArray()){      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "33": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nwriter.value(primitive.getAsNumber());\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "34": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonNull().isJsonNull()){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "35": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nsuper.write();\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "36": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(!element.isJsonNull(primitive.getAsNumber())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "37": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nwriter.value(primitive.getAsBoolean());\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "38": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(!element.isJsonNull(primitive.getAsBoolean())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "39": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((serializeNulls != null) && element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "40": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(element.isJsonNull(element)){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "41": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element != null)){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "42": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((serializeNulls == null)){\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n}\n    }\n  }",
          "43": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((element == null) || element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "44": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nwriter.value(primitive.getAsString());\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "45": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(serializeNulls.isJsonNull()){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "46": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(!element.isJsonNull(primitive.getAsString())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "47": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(serializeNulls){\nreturn;\n}    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "48": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element.isJsonNull() && (serializeNulls != null))){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "49": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element && element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "50": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element.isJsonNull() && (serializeNulls == null))){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "51": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((serializeNulls == null)){\ncontinue;\n}    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "52": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element.isJsonNull() || (serializeNulls == null))){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "53": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nwrite(e, serializeNulls, writer);\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "54": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif((element.isJsonNull() || (serializeNulls != null))){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "55": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(serializeNulls){\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n}\n    }\n  }",
          "56": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((serializeNulls != null) || element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "57": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(((serializeNulls == null) && element.isJsonNull())){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "58": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nif(serializeNulls){\n      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }",
          "59": "  static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n      throws IOException {\nwriter.beginArray();\n    if (element.isJsonNull()) {      if (serializeNulls) {\n        writer.nullValue();\n      }\n\n    } else if (element.isJsonPrimitive()) {\n      JsonPrimitive primitive = element.getAsJsonPrimitive();\n      if (primitive.isNumber()) {\n        writer.value(primitive.getAsNumber());\n      } else if (primitive.isBoolean()) {\n        writer.value(primitive.getAsBoolean());\n      } else {\n        writer.value(primitive.getAsString());\n      }\n\n    } else if (element.isJsonArray()) {\n      writer.beginArray();\n      for (JsonElement e : element.getAsJsonArray()) {\n        /* always print null when its parent element is an array! */\n        if (e.isJsonNull()) {\n          writer.nullValue();\n          continue;\n        }\n        write(e, serializeNulls, writer);\n      }\n      writer.endArray();\n\n    } else if (element.isJsonObject()) {\n      writer.beginObject();\n      for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n        JsonElement value = e.getValue();\n        if (!serializeNulls && value.isJsonNull()) {\n          continue;\n        }\n        writer.name(e.getKey());\n        write(value, serializeNulls, writer);\n      }\n      writer.endObject();\n\n    } else {\n      throw new IllegalArgumentException(\"Couldn't write \" + element.getClass());\n    }\n  }"
}