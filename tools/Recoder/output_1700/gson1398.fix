{
          "0": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 0));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "1": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn \"null\";          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "2": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 2));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "3": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn start;          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "4": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((start % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "5": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "6": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(builder, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "7": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn builder.toString();          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "8": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((builder % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "9": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "10": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "11": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos - start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "12": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn ((pos % start) - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "13": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "14": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(pos, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "15": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, buffer, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "16": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbuilder.append(buffer, start, ((pos - start) - 1));\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "17": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, builder, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "18": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn \"null\";            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "19": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, ((pos % start) - 1), start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "20": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, ((pos % start) - 1), buffer);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "21": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "22": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbuilder = new StringBuilder();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "23": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String();          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "24": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((limit % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "25": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, ((pos % start) - 1), ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "26": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((quote % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "27": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, pos, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "28": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(quote, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "29": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, ((pos % start) - 1), start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "30": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbuilder.append(buffer, start, (pos - start));\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "31": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(NON_EXECUTE_PREFIX, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "32": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, ((pos % start) - 1), 0);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "33": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nif((builder == null)){\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n}\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "34": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) <= 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "35": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) + 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "36": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos + start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "37": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((buffer % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "38": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn builder.toString();            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "39": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn null;            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "40": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbuilder.append(readEscapeCharacter());\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "41": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nstart = pos;\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "42": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, buffer, start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "43": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos <= start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "44": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "45": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "46": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(((pos % start) - 1), start, buffer);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "47": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, ((pos % start) - 1), pos);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "48": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "49": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) >= 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "50": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(((pos % start) - 1), start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "51": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(pos, ((pos % start) - 1), start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "52": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn buffer;          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "53": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, (pos % start));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "54": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(((pos % start) - 1), start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "55": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn (pos % start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "56": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn null;          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "57": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 1), 0);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "58": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - -1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "59": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbeginArray();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "60": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nendArray();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "61": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbeginObject();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "62": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nendObject();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "63": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nconsumeNonExecutePrefix();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "64": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nnextNull();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "65": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nclose();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "66": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nskipValue();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "67": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\ncheckLenient();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "68": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nskipToEndOfLine();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "69": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\ndecodeLiteral();\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "70": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new StringBuilder();          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "71": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, buffer);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "72": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos >= start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "73": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn builder;          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "74": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(pos, start, start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "75": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, quote, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "76": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, pos, start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "77": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(skipping, start, ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "78": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nbreak;\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "79": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos / start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "80": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nif(skipping){\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n}\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "81": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, start, buffer);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "82": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 1), start);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "83": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nif((c == \"null\")){\n            return new String(buffer, start, pos % start - 1);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n}\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "84": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, , ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "85": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) / 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "86": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) == 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "87": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - false));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "88": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 1), false);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "89": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - 1), ((pos % start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "90": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - null));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "91": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(pos, start, ((pos % start) - 1), 0);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "92": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(start, buffer, ((pos % start) - 1), 0);          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "93": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos % start) - \"null\"));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "94": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\nreturn new String(buffer, start, ((pos * start) - 1));          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }"
}