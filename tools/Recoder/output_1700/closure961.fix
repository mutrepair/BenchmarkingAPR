{
          "0": "    public boolean hasNext() {\nreturn (current > length);    }",
          "1": "    public boolean hasNext() {\nreturn (current >= length);    }",
          "2": "    public boolean hasNext() {\nreturn (current < length);    }",
          "3": "    public boolean hasNext() {\nreturn (current <= length);    }",
          "4": "    public boolean hasNext() {\nreturn (current == length);    }",
          "5": "    public boolean hasNext() {\nreturn (UNMAPPED <= length);    }",
          "6": "    public boolean hasNext() {\nreturn (lineCount <= length);    }",
          "7": "    public boolean hasNext() {\nreturn (MAX_ENTRY_VALUES <= length);    }",
          "8": "    public boolean hasNext() {\nreturn (line <= length);    }",
          "9": "    public boolean hasNext() {\nreturn (previousCol <= length);    }",
          "10": "    public boolean hasNext() {\nreturn (previousSrcId <= length);    }",
          "11": "    public boolean hasNext() {\nreturn (previousSrcLine <= length);    }",
          "12": "    public boolean hasNext() {\nreturn (previousSrcColumn <= length);    }",
          "13": "    public boolean hasNext() {\nreturn (previousNameId <= length);    }",
          "14": "    public boolean hasNext() {\nreturn (length <= length);    }",
          "15": "    public boolean hasNext() {\nreturn (column <= length);    }",
          "16": "    public boolean hasNext() {\nreturn (srcFile <= length);    }",
          "17": "    public boolean hasNext() {\nreturn (srcLine <= length);    }",
          "18": "    public boolean hasNext() {\nreturn (srcColumn <= length);    }",
          "19": "    public boolean hasNext() {\nreturn (name <= length);    }",
          "20": "    public boolean hasNext() {\nreturn (current != length);    }",
          "21": "    public boolean hasNext() {\nreturn (current || length);    }",
          "22": "    public boolean hasNext() {\nreturn (current <= UNMAPPED);    }",
          "23": "    public boolean hasNext() {\nreturn (current <= lineCount);    }",
          "24": "    public boolean hasNext() {\nreturn (current <= MAX_ENTRY_VALUES);    }",
          "25": "    public boolean hasNext() {\nreturn (current <= line);    }",
          "26": "    public boolean hasNext() {\nreturn (current <= previousCol);    }",
          "27": "    public boolean hasNext() {\nreturn (current <= previousSrcId);    }",
          "28": "    public boolean hasNext() {\nreturn (current <= previousSrcLine);    }",
          "29": "    public boolean hasNext() {\nreturn (current <= previousSrcColumn);    }",
          "30": "    public boolean hasNext() {\nreturn (current <= previousNameId);    }",
          "31": "    public boolean hasNext() {\nreturn (current <= current);    }",
          "32": "    public boolean hasNext() {\nreturn (current <= column);    }",
          "33": "    public boolean hasNext() {\nreturn (current <= srcFile);    }",
          "34": "    public boolean hasNext() {\nreturn (current <= srcLine);    }",
          "35": "    public boolean hasNext() {\nreturn (current <= srcColumn);    }",
          "36": "    public boolean hasNext() {\nreturn (current <= name);    }",
          "37": "    public boolean hasNext() {\nreturn (current && length);    }",
          "38": "    public boolean hasNext() {\nreturn (hasNext <= length);    }",
          "39": "    public boolean hasNext() {\nreturn (current <= hasNext);    }",
          "40": "    public boolean hasNext() {\nreturn hasNext();    }",
          "41": "    public boolean hasNext() {\nbuild();\n      return current <= length;    }",
          "42": "    public boolean hasNext() {\ncreateReverseMapping();\n      return current <= length;    }",
          "43": "    public boolean hasNext() {\nreturn (UNMAPPED.current <= length);    }",
          "44": "    public boolean hasNext() {\nreturn (lineCount.current <= length);    }",
          "45": "    public boolean hasNext() {\nreturn (MAX_ENTRY_VALUES.current <= length);    }",
          "46": "    public boolean hasNext() {\nreturn (line.current <= length);    }",
          "47": "    public boolean hasNext() {\nreturn (previousCol.current <= length);    }",
          "48": "    public boolean hasNext() {\nreturn (previousSrcId.current <= length);    }",
          "49": "    public boolean hasNext() {\nreturn (previousSrcLine.current <= length);    }",
          "50": "    public boolean hasNext() {\nreturn (previousSrcColumn.current <= length);    }",
          "51": "    public boolean hasNext() {\nreturn (previousNameId.current <= length);    }",
          "52": "    public boolean hasNext() {\nreturn (length.current <= length);    }",
          "53": "    public boolean hasNext() {\nreturn (current.current <= length);    }",
          "54": "    public boolean hasNext() {\nreturn (column.current <= length);    }",
          "55": "    public boolean hasNext() {\nreturn (srcFile.current <= length);    }",
          "56": "    public boolean hasNext() {\nreturn (srcLine.current <= length);    }",
          "57": "    public boolean hasNext() {\nreturn (srcColumn.current <= length);    }",
          "58": "    public boolean hasNext() {\nreturn (name.current <= length);    }",
          "59": "    public boolean hasNext() {\nreturn (nextValue().current <= length);    }",
          "60": "    public boolean hasNext() {\nreturn (getGeneratedColumn().current <= length);    }",
          "61": "    public boolean hasNext() {\nreturn (getSourceFileId().current <= length);    }",
          "62": "    public boolean hasNext() {\nreturn (getSourceLine().current <= length);    }",
          "63": "    public boolean hasNext() {\nreturn (getSourceColumn().current <= length);    }",
          "64": "    public boolean hasNext() {\nreturn (getNameId().current <= length);    }",
          "65": "    public boolean hasNext() {\nreturn (current instanceof length);    }",
          "66": "    public boolean hasNext() {\nreturn (UNMAPPED.length <= length);    }",
          "67": "    public boolean hasNext() {\nreturn (lineCount.length <= length);    }",
          "68": "    public boolean hasNext() {\nreturn (MAX_ENTRY_VALUES.length <= length);    }",
          "69": "    public boolean hasNext() {\nreturn (line.length <= length);    }",
          "70": "    public boolean hasNext() {\nreturn (previousCol.length <= length);    }",
          "71": "    public boolean hasNext() {\nreturn (previousSrcId.length <= length);    }",
          "72": "    public boolean hasNext() {\nreturn (previousSrcLine.length <= length);    }",
          "73": "    public boolean hasNext() {\nreturn (previousSrcColumn.length <= length);    }",
          "74": "    public boolean hasNext() {\nreturn (previousNameId.length <= length);    }",
          "75": "    public boolean hasNext() {\nreturn (length.length <= length);    }",
          "76": "    public boolean hasNext() {\nreturn (current.length <= length);    }",
          "77": "    public boolean hasNext() {\nreturn (column.length <= length);    }",
          "78": "    public boolean hasNext() {\nreturn (srcFile.length <= length);    }",
          "79": "    public boolean hasNext() {\nreturn (srcLine.length <= length);    }",
          "80": "    public boolean hasNext() {\nreturn (srcColumn.length <= length);    }",
          "81": "    public boolean hasNext() {\nreturn (name.length <= length);    }",
          "82": "    public boolean hasNext() {\nreturn (nextValue().length <= length);    }",
          "83": "    public boolean hasNext() {\nreturn (getGeneratedColumn().length <= length);    }",
          "84": "    public boolean hasNext() {\nreturn (getSourceFileId().length <= length);    }",
          "85": "    public boolean hasNext() {\nreturn (getSourceLine().length <= length);    }",
          "86": "    public boolean hasNext() {\nreturn (getSourceColumn().length <= length);    }",
          "87": "    public boolean hasNext() {\nreturn (getNameId().length <= length);    }",
          "88": "    public boolean hasNext() {\nreturn ( <= length);    }",
          "89": "    public boolean hasNext() {\nreturn (current <= UNMAPPED.current);    }",
          "90": "    public boolean hasNext() {\nreturn (current <= lineCount.current);    }",
          "91": "    public boolean hasNext() {\nreturn (current <= MAX_ENTRY_VALUES.current);    }",
          "92": "    public boolean hasNext() {\nreturn (current <= line.current);    }",
          "93": "    public boolean hasNext() {\nreturn (current <= previousCol.current);    }",
          "94": "    public boolean hasNext() {\nreturn (current <= previousSrcId.current);    }",
          "95": "    public boolean hasNext() {\nreturn (current <= previousSrcLine.current);    }",
          "96": "    public boolean hasNext() {\nreturn (current <= previousSrcColumn.current);    }",
          "97": "    public boolean hasNext() {\nreturn (current <= previousNameId.current);    }",
          "98": "    public boolean hasNext() {\nreturn (current <= length.current);    }",
          "99": "    public boolean hasNext() {\nreturn (current <= current.current);    }",
          "100": "    public boolean hasNext() {\nreturn (current <= column.current);    }",
          "101": "    public boolean hasNext() {\nreturn (current <= srcFile.current);    }",
          "102": "    public boolean hasNext() {\nreturn (current <= srcLine.current);    }",
          "103": "    public boolean hasNext() {\nreturn (current <= srcColumn.current);    }",
          "104": "    public boolean hasNext() {\nreturn (current <= name.current);    }",
          "105": "    public boolean hasNext() {\nreturn (current <= nextValue().current);    }",
          "106": "    public boolean hasNext() {\nreturn (current <= getGeneratedColumn().current);    }",
          "107": "    public boolean hasNext() {\nreturn (current <= getSourceFileId().current);    }",
          "108": "    public boolean hasNext() {\nreturn (current <= getSourceLine().current);    }",
          "109": "    public boolean hasNext() {\nreturn (current <= getSourceColumn().current);    }",
          "110": "    public boolean hasNext() {\nreturn (current <= getNameId().current);    }",
          "111": "    public boolean hasNext() {\nreturn (current <= UNMAPPED.length);    }",
          "112": "    public boolean hasNext() {\nreturn (current <= lineCount.length);    }",
          "113": "    public boolean hasNext() {\nreturn (current <= MAX_ENTRY_VALUES.length);    }",
          "114": "    public boolean hasNext() {\nreturn (current <= line.length);    }",
          "115": "    public boolean hasNext() {\nreturn (current <= previousCol.length);    }",
          "116": "    public boolean hasNext() {\nreturn (current <= previousSrcId.length);    }",
          "117": "    public boolean hasNext() {\nreturn (current <= previousSrcLine.length);    }",
          "118": "    public boolean hasNext() {\nreturn (current <= previousSrcColumn.length);    }",
          "119": "    public boolean hasNext() {\nreturn (current <= previousNameId.length);    }",
          "120": "    public boolean hasNext() {\nreturn (current <= length.length);    }",
          "121": "    public boolean hasNext() {\nreturn (current <= current.length);    }",
          "122": "    public boolean hasNext() {\nreturn (current <= column.length);    }",
          "123": "    public boolean hasNext() {\nreturn (current <= srcFile.length);    }",
          "124": "    public boolean hasNext() {\nreturn (current <= srcLine.length);    }",
          "125": "    public boolean hasNext() {\nreturn (current <= srcColumn.length);    }",
          "126": "    public boolean hasNext() {\nreturn (current <= name.length);    }",
          "127": "    public boolean hasNext() {\nreturn (current <= nextValue().length);    }",
          "128": "    public boolean hasNext() {\nreturn (current <= getGeneratedColumn().length);    }",
          "129": "    public boolean hasNext() {\nreturn (current <= getSourceFileId().length);    }",
          "130": "    public boolean hasNext() {\nreturn (current <= getSourceLine().length);    }",
          "131": "    public boolean hasNext() {\nreturn (current <= getSourceColumn().length);    }",
          "132": "    public boolean hasNext() {\nreturn (current <= getNameId().length);    }",
          "133": "    public boolean hasNext() {\nreturn hasNext;    }",
          "134": "    public boolean hasNext() {\nreturn false;    }",
          "135": "    public boolean hasNext() {\nreturn (current <= );    }",
          "136": "    public boolean hasNext() {\nreturn current;    }",
          "137": "    public boolean hasNext() {\nif((current == null)){\nreturn false;}      return current <= length;    }",
          "138": "    public boolean hasNext() {\nreturn ((current != null) && (current <= length));    }",
          "139": "    public boolean hasNext() {\nreturn ((length != null) && (current <= length));    }",
          "140": "    public boolean hasNext() {\nreturn ((current != null) || (current <= length));    }",
          "141": "    public boolean hasNext() {\nreturn (add <= length);    }",
          "142": "    public boolean hasNext() {\nreturn (debug <= length);    }",
          "143": "    public boolean hasNext() {\nreturn ((current == null) || (current <= length));    }",
          "144": "    public boolean hasNext() {\nreturn (e <= length);    }",
          "145": "    public boolean hasNext() {\nreturn ((current <= length) && (current == length));    }",
          "146": "    public boolean hasNext() {\nreturn ((current <= length) || (current == length));    }",
          "147": "    public boolean hasNext() {\nreturn (current <= add);    }",
          "148": "    public boolean hasNext() {\nreturn ((current <= length) && (current != length));    }",
          "149": "    public boolean hasNext() {\nreturn ((current <= length) && (length == length));    }"
}