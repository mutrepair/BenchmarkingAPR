{
          "0": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q3)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "1": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q2)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "2": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "3": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q2))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "4": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q3) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "5": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = ((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "6": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q2) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "7": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q3)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "8": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nlong inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "9": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.Rotation(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "10": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * inv)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "11": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * inv))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "12": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * needsNormalization)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "13": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * inv) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "14": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * needsNormalization))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "15": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * inv)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "16": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q0)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "17": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q0 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "18": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * needsNormalization) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "19": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = q0;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "20": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q1))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "21": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * needsNormalization)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "22": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3)));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "23": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (((q0 * q0) + (q1 * q1)) + (q2 * q2));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "24": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = FastMath.sqrt((1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3)))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "25": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = ((q0 * q0) + (q1 * q1));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "26": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q1) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "27": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q0)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "28": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q0))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "29": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q1)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "30": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nboolean inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "31": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.debug(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "32": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.e(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "33": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nfinal double inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "34": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = q1;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "35": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nq2 *= inv;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "36": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nq3 *= inv;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "37": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nreturn;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "38": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nq1 *= inv;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "39": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nq0 *= inv;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "40": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * )) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "41": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * ))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "42": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\n ;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "43": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nif(needsNormalization){\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n}\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "44": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nthis.q0 = q0;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "45": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * e)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "46": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.add(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "47": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nthis.q2 = q2;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "48": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * q2)) + (q3 * e))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "49": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nthis.q1 = q1;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "50": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * ) + (q1 * q1)) + (q2 * q2)) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "51": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\nthis.q3 = q3;\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "52": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\n ;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "53": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = (1.0 * FastMath.sqrt(((((q0 * q0) + (q1 * q1)) + (q2 * )) + (q3 * q3))));\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "54": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\n ;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "55": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\ndouble inv = ;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "56": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\n ;\n      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }",
          "57": "  public Rotation(double q0, double q1, double q2, double q3,\n                  boolean needsNormalization) {\n\n    if (needsNormalization) {\n      // normalization preprocessing\n      double inv = 1.0 * FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);      q0 *= inv;\n      q1 *= inv;\n      q2 *= inv;\n      q3 *= inv;\n    }\n\n    this.q0 = q0;\n    this.q1 = q1;\n    this.q2 = q2;\n    this.q3 = q3;\n\n  }"
}