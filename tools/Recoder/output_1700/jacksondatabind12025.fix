{
          "0": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(true){            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "1": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(false){            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "2": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn NumberSerializers.NumberSerializer.instance;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "3": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "4": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(prov.getConfig()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "5": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(beanDesc){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "6": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn DateSerializer.instance;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "7": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn ser;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "8": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(type){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "9": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn CalendarSerializer.instance;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "10": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(!beanDesc){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "11": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn ToStringSerializer.instance;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "12": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn InetAddressSerializer.instance;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "13": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn buildEnumSerializer(prov.getConfig(), type, beanDesc);        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "14": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn TimeZoneSerializer.instance;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "15": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(prov){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "16": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(staticTyping){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "17": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(raw){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "18": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(type.isEmpty()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "19": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn null;        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "20": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nbreak;\n        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "21": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(!type){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "22": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(ser){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "23": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "24": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(type.getConfig()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "25": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn;\n        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "26": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(beanDesc.isEmpty()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "27": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(beanDesc.getConfig()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "28": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc != null)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "29": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(prov.isEmpty()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "30": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(getConfig()){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "31": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && prov.getConfig())){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "32": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc == null)){\nreturn NumberSerializers.NumberSerializer.instance;}        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "33": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(\"null\"){            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "34": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((type == null)){\nreturn NumberSerializers.NumberSerializer.instance;}        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "35": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc || prov.getConfig())){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "36": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((type && prov.getConfig())){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "37": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc != null)){\nreturn NumberSerializers.NumberSerializer.instance;}        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "38": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((type != null)){\nreturn NumberSerializers.NumberSerializer.instance;}        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "39": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc || false)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "40": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && null)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "41": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(CalendarisAssignableFrom(raw)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "42": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc || null)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "43": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nbreak;\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "44": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && beanDesc)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "45": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((raw == null)){\nreturn NumberSerializers.NumberSerializer.instance;}        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "46": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(DateisAssignableFrom(raw)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "47": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc || beanDesc)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "48": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && false)){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "49": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\ncontinue;\n        if (false) {            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "50": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif(null){            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "51": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && (beanDesc == null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "52": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && (beanDesc != null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "53": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc || (beanDesc == null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "54": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && (prov.getConfig() == null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "55": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((type && (beanDesc != null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "56": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc || (beanDesc != null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "57": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((type && (beanDesc == null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "58": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && (staticTyping == null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "59": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nif((beanDesc && (staticTyping != null))){\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }",
          "60": "    protected final JsonSerializer<?> findSerializerByPrimaryType(SerializerProvider prov, \n            JavaType type, BeanDescription beanDesc,\n            boolean staticTyping)\n        throws JsonMappingException\n    {\n        Class<?> raw = type.getRawClass();\n        // One unfortunate special case, as per [JACKSON-484]\n        if (InetAddress.class.isAssignableFrom(raw)) {\n            return InetAddressSerializer.instance;\n        }\n        // ... and another one, [JACKSON-522], for TimeZone\n        if (TimeZone.class.isAssignableFrom(raw)) {\n            return TimeZoneSerializer.instance;\n        }\n        // and yet one more [JACKSON-789]\n        if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n            return ToStringSerializer.instance;\n        }\n        \n        // Then check for optional/external serializers [JACKSON-386]\n        JsonSerializer<?> ser = findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n        \n        if (Number.class.isAssignableFrom(raw)) {\n            return NumberSerializers.NumberSerializer.instance;\n        }\nreturn;\n            return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n        }\n        if (Calendar.class.isAssignableFrom(raw)) {\n            return CalendarSerializer.instance;\n        }\n        if (java.util.Date.class.isAssignableFrom(raw)) {\n            return DateSerializer.instance;\n        }\n        return null;\n    }"
}