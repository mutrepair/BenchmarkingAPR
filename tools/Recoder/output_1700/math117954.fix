{
          "0": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * xb));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "1": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xb * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "2": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "3": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * xb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "4": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * xa));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "5": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * factb));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "6": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa - facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "7": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (factb * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "8": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xa * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "9": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * xa)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "10": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nfinal double result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "11": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (factb * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "12": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = (((xb * factb) / (xb * facta)) + (xa * factb));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "13": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (facta * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "14": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((xb * factb) / (xb * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "15": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (facta * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "16": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * facta)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "17": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * result));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "18": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = (xa * facta);\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "19": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * ));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "20": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = xb;\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "21": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = facta;\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "22": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (result * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "23": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa + facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "24": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = (xb * facta);\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "25": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (result * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "26": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa / facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "27": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + ( * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "28": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nif((xb != null)){\n        double result = xb * factb / (xb * facta) + xa * factb + xa * facta;        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n}\n    }",
          "29": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * x));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "30": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = (xa * factb);\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "31": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = (xb * factb);\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "32": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nresult = (result * x);\n        double result = xb * factb / (xb * facta) + xa * factb + xa * facta;        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "33": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * result)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "34": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / ( * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "35": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * )) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "36": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nif(xb){\n        double result = xb * factb / (xb * facta) + xa * factb + xa * facta;        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n}\n    }",
          "37": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nfinal double facta = 0.01745329052209854;\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "38": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (x * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "39": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (x * facta)) + (xa * factb)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "40": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nfinal double factb = 1.997844754509471E-9;\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "41": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * x)) + (xa * facta));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "42": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble result = ((((xb * factb) / (xb * facta)) + (xa * factb)) + (xa * ));\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "43": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\ndouble xa = doubleHighPart(x);\n        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }",
          "44": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nif(!xb){\n        double result = xb * factb / (xb * facta) + xa * factb + xa * facta;        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n}\n    }",
          "45": "    public static double toRadians(double x)\n    {\n        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign\n            return x;\n        }\n\n        // These are PI/180 split into high and low order bits\n        final double facta = 0.01745329052209854;\n        final double factb = 1.997844754509471E-9;\n\n        double xa = doubleHighPart(x);\n        double xb = x - xa;\n\nreturn;\n        double result = xb * factb / (xb * facta) + xa * factb + xa * facta;        if (result == 0) {\n            result = result * x; // ensure correct sign if calculation underflows\n        }\n        return result;\n    }"
}