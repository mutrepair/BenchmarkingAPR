{
          "0": "    public double getRMS() {\nreturn FastMath.sqrt((getRMS() + rows));    }",
          "1": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows));    }",
          "2": "    public double getRMS() {\nreturn FastMath.sqrt((getCovariances() + rows));    }",
          "3": "    public double getRMS() {\nreturn FastMath.sqrt((guessParametersErrors() + rows));    }",
          "4": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + DEFAULT_SINGULARITY_THRESHOLD));    }",
          "5": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + weightedResidualJacobian));    }",
          "6": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + cols));    }",
          "7": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + point));    }",
          "8": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + objective));    }",
          "9": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + weightedResiduals));    }",
          "10": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + cost));    }",
          "11": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + jacobianEvaluations));    }",
          "12": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), 0);    }",
          "13": "    public double getRMS() {\nreturn sqrt((getChiSquare() + rows));    }",
          "14": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), 1);    }",
          "15": "    public double getRMS() {\nreturn FastMath.sqrt(rows);    }",
          "16": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() - rows));    }",
          "17": "    public double getRMS() {\nreturn FastMath.sqrt(getChiSquare());    }",
          "18": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), (getChiSquare() + rows));    }",
          "19": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), rows);    }",
          "20": "    public double getRMS() {\nreturn FastMath.sqrt();    }",
          "21": "    public double getRMS() {\nreturn FastMath.getRMS((getChiSquare() + rows));    }",
          "22": "    public double getRMS() {\nreturn FastMath.sqrt(((getChiSquare() + rows) + rows));    }",
          "23": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), \"null\");    }",
          "24": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), getChiSquare());    }",
          "25": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), false);    }",
          "26": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), true);    }",
          "27": "    public double getRMS() {\nreturn FastMath.sqrt(FastMath.sqrt((getChiSquare() + rows)));    }",
          "28": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), null);    }",
          "29": "    public double getRMS() {\nreturn FastMath.debug((getChiSquare() + rows));    }",
          "30": "    public double getRMS() {\nreturn FastMath.getRMS();    }",
          "31": "    public double getRMS() {\nreturn FastMath.sqrt(0);    }",
          "32": "    public double getRMS() {\nreturn FastMath.add((getChiSquare() + rows));    }",
          "33": "    public double getRMS() {\nreturn FastMath.sqrt(\"null\");    }",
          "34": "    public double getRMS() {\nreturn FastMath.max((getChiSquare() + rows));    }",
          "35": "    public double getRMS() {\nreturn rows;    }",
          "36": "    public double getRMS() {\nreturn FastMath.e((getChiSquare() + rows));    }",
          "37": "    public double getRMS() {\nreturn getChiSquare();    }",
          "38": "    public double getRMS() {\nreturn FastMath.sqrt(1);    }",
          "39": "    public double getRMS() {\nreturn sqrt();    }",
          "40": "    public double getRMS() {\nreturn FastMath.sqrt(rows, (getChiSquare() + rows));    }",
          "41": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + getRMS));    }",
          "42": "    public double getRMS() {\nreturn FastMath.sqrt((rows + rows));    }",
          "43": "    public double getRMS() {\nupdateJacobian();\n        return FastMath.sqrt(getChiSquare() + rows);    }",
          "44": "    public double getRMS() {\nupdateResidualsAndCost();\n        return FastMath.sqrt(getChiSquare() + rows);    }",
          "45": "    public double getRMS() {\nsetUp();\n        return FastMath.sqrt(getChiSquare() + rows);    }",
          "46": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows), 2);    }",
          "47": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + getChiSquare()));    }",
          "48": "    public double getRMS() {\nreturn sqrt(rows);    }",
          "49": "    public double getRMS() {\nreturn FastMath.sqrt(((getChiSquare() + rows) + 1));    }",
          "50": "    public double getRMS() {\nreturn FastMath.sqrt(rows, 0);    }",
          "51": "    public double getRMS() {\nreturn FastMath.put((getChiSquare() + rows));    }",
          "52": "    public double getRMS() {\nreturn FastMath.sqrt(true);    }",
          "53": "    public double getRMS() {\nreturn FastMath.sqrt(getChiSquare(), 0);    }",
          "54": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + cols.rows));    }",
          "55": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + rows.rows));    }",
          "56": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + jacobianEvaluations.rows));    }",
          "57": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() + getJacobianEvaluations().rows));    }",
          "58": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() == rows));    }",
          "59": "    public double getRMS() {\nif((rows == null)){\nreturn 0;}        return FastMath.sqrt(getChiSquare() + rows);    }",
          "60": "    public double getRMS() {\nreturn FastMath.sqrt((get() + rows));    }",
          "61": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() * rows));    }",
          "62": "    public double getRMS() {\nreturn (getChiSquare() + rows);    }",
          "63": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() / rows));    }",
          "64": "    public double getRMS() {\nreturn FastMath.((getChiSquare() + rows));    }",
          "65": "    public double getRMS() {\nreturn FastMath.i((getChiSquare() + rows));    }",
          "66": "    public double getRMS() {\nreturn FastMath.sqrt((add() + rows));    }",
          "67": "    public double getRMS() {\nif((getChiSquare() + rows)){\n}\n        return FastMath.sqrt(getChiSquare() + rows);    }",
          "68": "    public double getRMS() {\nreturn FastMath.sqrt((getName() + rows));    }",
          "69": "    public double getRMS() {\nreturn 0;    }",
          "70": "    public double getRMS() {\nreturn getRMS();    }",
          "71": "    public double getRMS() {\nreturn FastMath.sqrt(((rows + rows) + rows));    }",
          "72": "    public double getRMS() {\nreturn FastMath.sqrt((getChiSquare() != rows));    }",
          "73": "    public double getRMS() {\nreturn FastMath.sqrt((debug() + rows));    }"
}