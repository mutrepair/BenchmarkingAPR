{
          "0": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((child == parent.getRight(dataElement))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "1": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(parent.getRight(dataElement)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "2": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((false && (child == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "3": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == dataElement.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "4": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\ndo{\n}while((child == parent.getRight(dataElement)))\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "5": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight(child)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "6": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "7": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "8": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(child){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "9": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == child.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "10": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child != parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "11": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight(parent)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "12": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true || (child == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "13": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == node.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "14": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\ndo{\n}while(parent.getRight(dataElement))\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "15": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (true && (child == parent.getRight(dataElement))))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "16": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(parent){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "17": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "18": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nif((child == parent.getRight(dataElement))){\n            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n}\n        }\n        return rval;\n    }",
          "19": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((node.getRight(dataElement) != null)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "20": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(dataElement){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "21": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == .getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "22": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((node == null)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "23": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getParent(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "24": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((child && (true && (child == parent.getRight(dataElement))))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "25": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (parent == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "26": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((child && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "27": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (true && (child == parent.getRight(dataElement))))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "28": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(node){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "29": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(node.getRight(dataElement)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "30": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (node.getRight(dataElement) != null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "31": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(setBlack(dataElement)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "32": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(setRed(dataElement)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "33": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == rval.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "34": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child >= parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "35": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(!child){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "36": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((dataElement && (true && (child == parent.getRight(dataElement))))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "37": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && child)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "38": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (node == null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "39": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(node.getParent(dataElement)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "40": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\ndo{\n}while(child)\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "41": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((dataElement && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "42": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((parent.getRight(dataElement) && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "43": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && child)){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "44": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight()))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "45": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getName(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "46": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "47": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (parent.getRight(dataElement) == null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "48": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.nextGreater(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "49": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child <= parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "50": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight(node)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "51": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && parent.getRight(dataElement))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "52": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (parent.getRight(dataElement) != null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "53": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child > parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "54": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == .getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "55": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(rval){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "56": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nrval = null;\n            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "57": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nrval = leastNode(node.getRight(dataElement), dataElement);\n            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "58": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight(rval)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "59": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (child != null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "60": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child < parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "61": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (dataElement == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "62": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (dataElement != null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "63": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (child == null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "64": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nrval = parent;\n            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "65": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child != null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "66": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((true && (child == parent.getRight(dataElement))) && (dataElement == null))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "67": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && ( == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "68": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile(((child && (child == parent.getRight(dataElement))) && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "69": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((((true && (child == parent.getRight(dataElement))) && (child == parent.getRight(dataElement))) && (child == parent.getRight(dataElement)))){\n\n}                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "70": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nparent = parent.getParent(dataElement);\n            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "71": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nchild = parent;\n            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "72": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == .getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "73": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (node == parent.getRight(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "74": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nreturn rval;            while (true && child == parent.getRight(dataElement)) {                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "75": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.getRight()))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "76": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\ndo{\n}while((node.getRight(dataElement) != null))\n                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }",
          "77": "    private Node<K, V> nextGreater(final Node<K, V> node, final DataElement dataElement) {\n        Node<K, V> rval;\n        if (node == null) {\n            rval = null;\n        } else if (node.getRight(dataElement) != null) {\n            // everything to the node's right is larger. The least of\n            // the right node's descendants is the next larger node\n            rval = leastNode(node.getRight(dataElement), dataElement);\n        } else {\n            // traverse up our ancestry until we find an ancestor that\n            // is null or one whose left child is our ancestor. If we\n            // find a null, then this node IS the largest node in the\n            // tree, and there is no greater node. Otherwise, we are\n            // the largest node in the subtree on that ancestor's left\n            // ... and that ancestor is the next greatest node\n            Node<K, V> parent = node.getParent(dataElement);\n            Node<K, V> child = node;\n\nwhile((true && (child == parent.toString(dataElement)))){                child = parent;\n                parent = parent.getParent(dataElement);\n            }\n            rval = parent;\n        }\n        return rval;\n    }"
}