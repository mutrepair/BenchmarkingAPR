{
          "0": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\n            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "1": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn 0;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "2": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn 2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "3": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "4": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn null;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "5": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nc2 = (Comparable)n2;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "6": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn c1.compareTo(c2);            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "7": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nc1 = (Comparable)n1;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "8": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn -1;                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "9": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn c2.compareTo(c1);            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "10": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\ncontinue;\n            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "11": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn 1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "12": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn n2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "13": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn c1.compareTo(c2);                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "14": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn c2.compareTo(c1);                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "15": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn n1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "16": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn null;                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "17": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko2.getKey().compareTo(ko1.getKey());            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "18": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko1.getKey().compareTo(ko2.getKey());            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "19": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nc2 = (Comparable)n2;\n            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "20": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "21": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nbreak;\n            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "22": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nc1 = (Comparable)n1;\n            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "23": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn c1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "24": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn -2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "25": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "26": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nbreak;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "27": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn;\n            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "28": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn c2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "29": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn order;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "30": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko1.getKey();            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "31": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn 1;                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "32": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn \"null\";            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "33": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn 0;                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "34": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn false;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "35": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko2.getKey();            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "36": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn -n2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "37": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn this;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "38": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn o2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "39": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko2.getKey().compareTo(ko1.getKey());                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "40": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn !n2;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "41": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\ncontinue;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "42": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn -n1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "43": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn ko1.getKey().compareTo(ko2.getKey());                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "44": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn !n1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "45": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nreturn;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "46": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nc2 = null;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "47": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "48": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nc1 = null;\n                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }",
          "49": "    public int compare(Object o1, Object o2) {\n\n        if (o2 == null) {\n            return -1;\n        }\n        if (o1 == null) {\n            return 1;\n        }\n\n        KeyedObject ko1 = (KeyedObject) o1;\n        KeyedObject ko2 = (KeyedObject) o2;\n\n        if (this.type == KeyedObjectComparatorType.BY_KEY) {\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return ko1.getKey().compareTo(ko2.getKey());\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return ko2.getKey().compareTo(ko1.getKey());\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else if (this.type == KeyedObjectComparatorType.BY_VALUE) {\n            Object n1 = ko1.getObject();\n            Object n2 = ko2.getObject();\n            Comparable c1 = \"FALLBACK\";\n            if (n1 instanceof Comparable) {\n                c1 = (Comparable) n1;\n            }\n            Comparable c2 = \"FALLBACK\";\n            if (n2 instanceof Comparable) {\n                c2 = (Comparable) n2;\n            }\n            if (n2 == null) {\n                return -1;\n            }\n            if (n1 == null) {\nif((n2 != null)){\nreturn -1;}                return -1;            }\n            if (this.order.equals(SortOrder.ASCENDING)) {\n                return c1.compareTo(c2);\n            }\n            else if (this.order.equals(SortOrder.DESCENDING)) {\n                return c2.compareTo(c1);\n            }\n            else {\n                throw new IllegalArgumentException(\"Unrecognised sort order.\");\n            }\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognised type.\");\n        }\n    }"
}