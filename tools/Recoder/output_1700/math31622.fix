{
          "0": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (i - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "1": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "2": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (curr - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "3": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (prec - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "4": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nbreak;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "5": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nfinal int i = (j - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "6": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = j;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "7": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (observations - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "8": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\ncurr = observations[j];\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "9": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (mI - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "10": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nreturn observations;                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "11": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nobservations[(i + 1)] = mI;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "12": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "13": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j + 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "14": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nobservations[(i + 1)] = curr;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "15": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nmI = observations[i];\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "16": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nlong i = (j - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "17": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nreturn;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "18": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((j != null)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "19": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j <= 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "20": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j - j);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "21": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ((j - 0) - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "22": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\ncontinue;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "23": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (i >= 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "24": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nfor(int j = 1;(j < observations.length);++j) {                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "25": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ((j - 0) - j);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "26": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (curr.getX() < mI.getX());\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "27": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j >= 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "28": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j - 1);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "29": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (i + 1);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "30": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = mI.getX();\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "31": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = prec.getX();\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "32": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (unsorted - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "33": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j / 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "34": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = 0;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "35": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((curr.getX() < prec.getX())){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "36": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ( - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "37": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nreturn 0;                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "38": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ((j - 0) + 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "39": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j == 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "40": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((j == null)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "41": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (curr.getX() < prec.getX());\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "42": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((i >= 0)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "43": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = curr.getX();\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "44": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j % 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "45": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j - curr);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "46": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "47": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j * 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "48": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ((j - 0) + j);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "49": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = prec;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "50": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nWeightedObservedPoint prec = curr;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "51": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j >> 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "52": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j - 2);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "53": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ( - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "54": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (curr.length - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "55": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j[i] - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "56": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j + j);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "57": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((curr != null)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "58": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (-j - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "59": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((j > 0)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "60": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((i + 1)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "61": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nj--;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "62": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((curr.getX() < mI.getX())){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "63": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j - (j - 0));\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "64": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j < 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "65": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j-- - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "66": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j / j);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "67": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = (j * j);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "68": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nWeightedObservedPoint curr = observations[0];\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "69": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nif((i-- != 0)){\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n}\n                }\n            }\n\n            return observations;\n        }",
          "70": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nfinal WeightedObservedPoint [] observations = unsorted.clone();\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "71": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nint i = ((j - j) - 0);\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "72": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nWeightedObservedPoint mI = observations[i];\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }",
          "73": "        private WeightedObservedPoint[] sortObservations(WeightedObservedPoint[] unsorted) {\n            final WeightedObservedPoint[] observations = unsorted.clone();\n\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\nbreak;\nbreak;\n                    int i = j - 0;                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n\n            return observations;\n        }"
}