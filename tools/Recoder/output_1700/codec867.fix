{
          "0": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + 2)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "1": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + 0)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "2": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(startDst + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "3": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new int[(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "4": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new long[(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "5": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[][(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "6": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen - 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "7": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(len + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "8": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bigBytes + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "9": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[bitlen];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "10": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[[]];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "11": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "12": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + -1)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "13": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(startSrc + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "14": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[1];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "15": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen / 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "16": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = (bitlen + 8);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "17": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nif((startDst != null)){\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n}\n    }",
          "18": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nlen--;\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "19": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen * 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "20": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nstartSrc = 1;\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "21": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = bitlen;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "22": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = 0;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "23": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte();\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "24": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nint resizedBytes = new byte[(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "25": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(resizedBytes + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "26": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[bitlen.size()];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "27": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nlong resizedBytes = new byte[(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "28": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = 1;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "29": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[bigBytes];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "30": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "31": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nstartDst--;\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "32": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbitlen = (((bitlen + 7) >> 3) << 3);\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "33": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[len];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "34": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen % 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "35": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nreturn bigBytes;        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "36": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nif((bitlen != null)){\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n}\n    }",
          "37": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bigInt + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "38": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[0];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "39": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[startDst];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "40": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nreturn resizedBytes;        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "41": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nfinal byte[] resizedBytes = new byte[(bitlen + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "42": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen <= 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "43": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nSystem.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "44": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nif((bigBytes != null)){\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n}\n    }",
          "45": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + false)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "46": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[bitlen.length()];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "47": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen == 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "48": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + 1)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "49": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + \"null\")];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "50": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(length + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "51": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte(bitlen);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "52": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nif((bitlen / 8)){\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n}\n    }",
          "53": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + true)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "54": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + -2)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "55": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[( + 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "56": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen >= 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "57": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen & 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "58": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen + null)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "59": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[(bitlen >> 8)];\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "60": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte(bitlen, bitlen);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "61": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen + 8) + 8);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "62": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nreturn;\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "63": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nint startSrc = 0;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "64": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] bigBytes = bigInt.toByteArray();\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "65": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nint len = bigBytes.length;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "66": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbreak;\n        byte[] resizedBytes = new byte[bitlen + 8];\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "67": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "68": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen + bitlen) + 8);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "69": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen == null))?(bitlen + 8):0;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "70": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen == bitlen))?(bitlen + 8):0;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "71": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen == 0))?(bitlen + 8):0;\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "72": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = new byte[bitlen]{1,bitlen};\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "73": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen == null))?(bitlen + bigBytes):(bitlen + 8);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }",
          "74": "     static byte[] toIntegerBytes(BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        // round bitlen\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n\n        if(((bigInt.bitLength() % 8) != 0) &&\n            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n\n        // set up params for copying everything but sign bit\n        int startSrc = 0;\n        int len = bigBytes.length;\n\n        // if bigInt is exactly byte-aligned, just skip signbit in copy\n        if((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n\n        int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec\nbyte[] resizedBytes = ((bitlen == null))?(bitlen + 8):(bitlen + 8);\n\n        System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n\n        return resizedBytes;\n    }"
}