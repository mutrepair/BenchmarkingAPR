{
          "0": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(true){                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "1": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = null;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "2": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "3": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nresult.add(value);\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "4": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = valueDes.deserialize(jp, ctxt);\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "5": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "6": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nbreak;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "7": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nreturn handleNonArray(jp, ctxt, result);            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "8": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nreturn result;            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "9": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nreturn;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "10": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(t){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "11": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nreturn null;            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "12": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(valueDes){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "13": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(jp){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "14": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(ctxt){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "15": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(_valueTypeDeserializer){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "16": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(_valueDeserializer){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "17": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\ncontinue;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "18": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(jp.nextToken()){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "19": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = false;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "20": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(typeDeser){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "21": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(result){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "22": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nbreak;\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "23": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = value;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "24": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(\"null\"){                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "25": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue++;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "26": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((t == JsonToken.VALUE_NULL)){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "27": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(!jp.isExpectedStartArrayToken()){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "28": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(!jp.isExpectedStartArrayToken()){\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n}\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "29": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((t == JsonToken.VALUE_NULL)){\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n}\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "30": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((ctxt != null)){\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n}\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "31": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((value != null)){\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n}\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "32": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nreturn this;            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "33": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "34": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nresult.add(value);\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "35": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = null;\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "36": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nvalue = valueDes.deserialize(jp, ctxt);\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "37": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((ctxt && (ctxt != null))){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "38": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(false){                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "39": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(null){                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "40": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((ctxt && (result != null))){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "41": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nObject value = ;\n            } else if (false) {                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "42": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((ctxt && (ctxt == null))){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "43": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nreturn;\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "44": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\ncontinue;\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "45": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif((ctxt && (result == null))){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }",
          "46": "    public Collection<Object> deserialize(JsonParser jp, DeserializationContext ctxt,\n            Collection<Object> result)\n        throws IOException, JsonProcessingException\n    {\n        // Ok: must point to START_ARRAY (or equivalent)\n        if (!jp.isExpectedStartArrayToken()) {\n            return handleNonArray(jp, ctxt, result);\n        }\n\n        JsonDeserializer<Object> valueDes = _valueDeserializer;\n        JsonToken t;\n        final TypeDeserializer typeDeser = _valueTypeDeserializer;\n\n        while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n            Object value;\n            \n            if (t == JsonToken.VALUE_NULL) {\n                value = null;\nif(((ctxt != null) && (t = jp.nextToken() != JsonToken.END_ARRAY))){\n                value = valueDes.deserialize(jp, ctxt);\n            } else {\n                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n            }\n            result.add(value);\n        }\n        return result;\n    }"
}