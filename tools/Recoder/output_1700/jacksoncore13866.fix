{
          "0": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 2);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "1": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 2;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "2": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i <= 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "3": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i >= 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "4": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "5": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "6": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < -1);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "7": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nbreak;\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "8": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_reportInvalidEOF(\"null\");\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "9": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = -1;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "10": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);value) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "11": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(long i = 1;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "12": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i > 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "13": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 1; i < 4; ++i) {if(0!=1)break;            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "14": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_closeInput();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "15": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_releaseBuffers();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "16": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nclose();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "17": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_isNextTokenNameYes();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "18": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_finishString();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "19": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_skipString();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "20": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_skipComment();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "21": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_skipCComment();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "22": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_skipCppComment();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "23": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_skipCR();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "24": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_skipLF();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "25": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i < 4));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "26": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(value < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "27": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nbreak;\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "28": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_reportUnexpectedChar(ch, \"null\");\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "29": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 4;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "30": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);_inputPtr) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "31": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nvalue = ((value << 4) | digit);\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "32": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n((i < 4))            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "33": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);ch) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "34": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nif((value != null)){\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n}\n        }\n        return (char) value;\n    }",
          "35": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;;++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "36": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);_inputEnd) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "37": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(_inputPtr < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "38": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);_inputBuffer) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "39": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);-i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "40": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < null);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "41": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 0);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "42": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(value << 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "43": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(_inputEnd < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "44": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nif((i != null)){\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n}\n        }\n        return (char) value;\n    }",
          "45": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i == 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "46": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 1);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "47": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < false);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "48": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(char i = 1;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "49": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i - 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "50": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(_inputBuffer < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "51": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = null;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "52": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n_reportInvalidEOF(\"null\");\nbreak;\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "53": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(ch < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "54": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;!loadMore();++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "55": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n((i < (i < 4)))            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "56": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._closeInput();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "57": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._releaseBuffers();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "58": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes.close();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "59": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._isNextTokenNameYes();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "60": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._finishString();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "61": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._skipString();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "62": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._skipComment();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "63": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._skipCComment();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "64": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._skipCppComment();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "65": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._skipCR();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "66": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nCharTypes._skipLF();\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "67": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < _inputPtr);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "68": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = false;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "69": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < _inputEnd);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "70": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\ncontinue;\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "71": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nif(!loadMore()){\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n}\n        }\n        return (char) value;\n    }",
          "72": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nreturn \"null\";        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "73": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < \"null\");++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "74": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < true);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "75": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 0;(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "76": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < i);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "77": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < 4);++i) {        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "78": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < value);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "79": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nreturn (char)value;        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "80": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n((i < i))            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "81": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nif((value == null)){\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n}\n        }\n        return (char) value;\n    }",
          "82": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nreturn;\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "83": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n((i < 0))            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "84": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - 4));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "85": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - 0));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "86": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - 1));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "87": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - 2));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "88": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = (i - 4);(i < 4);++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "89": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - i));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "90": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n        for (int i = 1; i < 4; ++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "91": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - _inputPtr));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "92": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (_inputPtr - i));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "93": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (i - _inputEnd));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "94": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (_inputEnd - i));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "95": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\nfor(int i = 1;(i < (_inputPtr - 0));++i) {            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }",
          "96": "    protected char _decodeEscaped()\n        throws IOException, JsonParseException\n    {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = (int) _inputBuffer[_inputPtr++];\n\n        switch ((int) c) {\n            // First, ones that are mapped\n        case INT_b:\n            return '\\b';\n        case INT_t:\n            return '\\t';\n        case INT_n:\n            return '\\n';\n        case INT_f:\n            return '\\f';\n        case INT_r:\n            return '\\r';\n\n            // And these are to be returned as they are\n        case INT_QUOTE:\n        case INT_SLASH:\n        case INT_BACKSLASH:\n            return (char) c;\n\n        case INT_u: // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }\n\n        // Ok, a hex escape. Need 4 characters\n        int value = 0;\n((i < (i - 0)))            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = (int) _inputBuffer[_inputPtr++];\n            int digit = CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return (char) value;\n    }"
}