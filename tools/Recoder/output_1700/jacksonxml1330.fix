{
          "0": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(true){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "1": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nreturn;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "2": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_objectIndenter.writeIndentation(gen, _nesting);\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "3": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n--_nesting;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "4": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_justHadStartElement = false;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "5": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n(ToXmlGenerator)gen;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "6": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "7": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(isInline()){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "8": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nsuper.writeEndObject();\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "9": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(_nesting){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "10": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(_justHadStartElement){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "11": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(-true){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "12": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(!_nesting){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "13": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nbreak;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "14": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(!isInline()){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "15": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(!_justHadStartElement){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "16": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((nrOfEntries != null)){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "17": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement != null)){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "18": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(!_objectIndenter.isInline()){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "19": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(\"null\"){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "20": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(!isInline()){\nreturn;\n}        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "21": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(isInline()){\nreturn;\n}        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "22": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(gen){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "23": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_nesting != null)){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "24": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_justHadStartElement = true;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "25": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(-1){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "26": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(-false){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "27": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\ncontinue;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "28": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(!_objectIndenter.isInline()){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "29": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((gen != null)){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "30": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nreturn this;        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "31": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement != null)){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "32": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_nesting = false;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "33": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_nesting = true;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "34": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(-\"null\"){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "35": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((nrOfEntries == null)){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "36": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((nrOfEntries == null)){\nreturn;\n}        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "37": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(false){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "38": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nnrOfEntries = false;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "39": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement == null)){\ncontinue;\n}\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "40": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement == null)){\nreturn;\n}        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "41": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "42": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_objectIndenter.writeIndentation(gen, _nesting);\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "43": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nbreak;\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "44": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n--_nesting;\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "45": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nthis;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "46": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n_justHadStartElement = false;\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "47": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\n(ToXmlGenerator)gen;\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "48": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif(null){            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "49": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nreturn;\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "50": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nreturn;\nreturn;\n        if (false) {            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "51": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement && (nrOfEntries == null))){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "52": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement && (_justHadStartElement == null))){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }",
          "53": "    public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException\n    {\n        if (!_objectIndenter.isInline()) {\n            --_nesting;\n        }\n        // for empty elements, no need for linefeeds etc:\nif((_justHadStartElement && (_nesting == null))){\n            _justHadStartElement = false;\n        } else {\n            _objectIndenter.writeIndentation(gen, _nesting);\n        }\n        ((ToXmlGenerator) gen)._handleEndObject();\n    }"
}