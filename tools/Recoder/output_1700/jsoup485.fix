{
          "0": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\n            }\n        }\n        return false;\n    }",
          "1": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\ncontinue;\n            }\n        }\n        return false;\n    }",
          "2": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nattr.setValue(value);\n                return false;            }\n        }\n        return false;\n    }",
          "3": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn true;            }\n        }\n        return false;\n    }",
          "4": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn false;            }\n        }\n        return false;\n    }",
          "5": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn false;                return false;            }\n        }\n        return false;\n    }",
          "6": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nbreak;\n            }\n        }\n        return false;\n    }",
          "7": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nattr.setValue(value);\nattr.setValue(value);\n                return false;            }\n        }\n        return false;\n    }",
          "8": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn;\n            }\n        }\n        return false;\n    }",
          "9": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nbreak;\n                return false;            }\n        }\n        return false;\n    }",
          "10": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn;\n                return false;            }\n        }\n        return false;\n    }",
          "11": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn prot;            }\n        }\n        return false;\n    }",
          "12": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn protocol;            }\n        }\n        return false;\n    }",
          "13": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn \"null\";            }\n        }\n        return false;\n    }",
          "14": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nprot++;\n                return false;            }\n        }\n        return false;\n    }",
          "15": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn true;                return false;            }\n        }\n        return false;\n    }",
          "16": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn attr.getKey();            }\n        }\n        return false;\n    }",
          "17": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn attr;            }\n        }\n        return false;\n    }",
          "18": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn ;            }\n        }\n        return false;\n    }",
          "19": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn null;            }\n        }\n        return false;\n    }",
          "20": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nreturn protocol.toString();            }\n        }\n        return false;\n    }",
          "21": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nattr.getKey();\n                return false;            }\n        }\n        return false;\n    }",
          "22": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\ncontinue;\n                return false;            }\n        }\n        return false;\n    }",
          "23": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif((prot != null)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "24": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nattr.setValue(value);\n            }\n        }\n        return false;\n    }",
          "25": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif((protocol != null)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "26": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif((attr != null)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "27": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif(value.toString().toLowerCase().startsWith(prot)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "28": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\n                return false;            }\n        }\n        return false;\n    }",
          "29": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif(( != null)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "30": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif((el != null)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "31": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nString prot = (protocol.toString() + \"null\");\n                return false;            }\n        }\n        return false;\n    }",
          "32": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nattr.setValue(value);\nbreak;\n                return false;            }\n        }\n        return false;\n    }",
          "33": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\n(Protocol protocol = ;\n:protocols)                return false;            }\n        }\n        return false;\n    }",
          "34": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nattr = prot;\n                return false;            }\n        }\n        return false;\n    }",
          "35": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif((prot == null)){\n}\n                return false;            }\n        }\n        return false;\n    }",
          "36": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nString value = el.absUrl(attr.getKey());\n                return false;            }\n        }\n        return false;\n    }",
          "37": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\nif((prot != null)){\nreturn false;}                return false;            }\n        }\n        return false;\n    }",
          "38": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // resolve relative urls to abs, and update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String value = el.absUrl(attr.getKey());\n        attr.setValue(value);\n        \n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (value.toString().toLowerCase().startsWith(prot)) {\n(Protocol protocol = ;\n:protocols)            }\n        }\n        return false;\n    }"
}