{
          "0": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\n            }\n        }\n\n        return true;\n    }",
          "1": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn false;            }\n        }\n\n        return true;\n    }",
          "2": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = (MatcherDecorator)m;\n                return true;            }\n        }\n\n        return true;\n    }",
          "3": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = m;\n                return true;            }\n        }\n\n        return true;\n    }",
          "4": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn false;                return true;            }\n        }\n\n        return true;\n    }",
          "5": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\ncontinue;\n            }\n        }\n\n        return true;\n    }",
          "6": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn true;            }\n        }\n\n        return true;\n    }",
          "7": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nbreak;\n                return true;            }\n        }\n\n        return true;\n    }",
          "8": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn;\n            }\n        }\n\n        return true;\n    }",
          "9": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn true;                return true;            }\n        }\n\n        return true;\n    }",
          "10": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nbreak;\n            }\n        }\n\n        return true;\n    }",
          "11": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(!m.matches(rawArgs[i])){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "12": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((rawArgs[i] != null) && rawArgs[i].getClass().isArray())){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "13": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\ncontinue;\n                return true;            }\n        }\n\n        return true;\n    }",
          "14": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((actualMatcher instanceof VarargMatcher)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "15": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((rawArgs[i] != null)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "16": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn;\n                return true;            }\n        }\n\n        return true;\n    }",
          "17": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((i == (rawArgs.length - 1))){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "18": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = (MatcherDecorator)m;\nactualMatcher = m;\n                return true;            }\n        }\n\n        return true;\n    }",
          "19": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nfor(int i = 0;(i < rawArgs.length);i++) {                return true;            }\n        }\n\n        return true;\n    }",
          "20": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = false;\n                return true;            }\n        }\n\n        return true;\n    }",
          "21": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = m;\nactualMatcher = m;\n                return true;            }\n        }\n\n        return true;\n    }",
          "22": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((rawArgs.length - 1)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "23": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn -false;            }\n        }\n\n        return true;\n    }",
          "24": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = (MatcherDecorator)m;\nactualMatcher = (MatcherDecorator)m;\n                return true;            }\n        }\n\n        return true;\n    }",
          "25": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = true;\n                return true;            }\n        }\n\n        return true;\n    }",
          "26": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((m != null)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "27": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((i != null)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "28": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = (MatcherDecorator)m;\nbreak;\n                return true;            }\n        }\n\n        return true;\n    }",
          "29": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = m;\nbreak;\n                return true;            }\n        }\n\n        return true;\n    }",
          "30": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nreturn m;            }\n        }\n\n        return true;\n    }",
          "31": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((matchers != null)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "32": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = (MatcherDecorator)m;\n            }\n        }\n\n        return true;\n    }",
          "33": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nactualMatcher = m;\n            }\n        }\n\n        return true;\n    }",
          "34": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((m != 1)){\n}\n                return true;            }\n        }\n\n        return true;\n    }",
          "35": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nMatcher actualMatcher = ;\n                return true;            }\n        }\n\n        return true;\n    }",
          "36": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((m != null)){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "37": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((i != null)){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "38": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((matchers != null)){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "39": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif((rawArgs != null)){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "40": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nfor(int i = 0;(i < rawArgs.length);i++) {            }\n        }\n\n        return true;\n    }",
          "41": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nMatcher m = matchers.get(i);\n                return true;            }\n        }\n\n        return true;\n    }",
          "42": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((m != null) && (matchers != null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "43": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((m != null) && (i != null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "44": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((i != null) && (matchers != null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "45": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((m != null) && (matchers == null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "46": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((i != null) && (i != null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "47": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((matchers != null) && (matchers != null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "48": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((m != null) && (i == null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "49": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((i != null) && (matchers == null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "50": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((matchers != null) && (i != null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "51": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((i != null) && (i == null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "52": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((m != null) && (matchers != 1))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }",
          "53": "    private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation actual) {\n        if (!actual.getMethod().isVarArgs()) {\n            //if the method is not vararg forget about it\n            return false;\n        }\n\n        //we must use raw arguments, not arguments...\n        Object[] rawArgs = actual.getRawArguments();\n        List<Matcher> matchers = invocationMatcher.getMatchers();\n\n        if (rawArgs.length != matchers.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < rawArgs.length; i++) {\n            Matcher m = matchers.get(i);\n            //it's a vararg because it's the last array in the arg list\n            if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {\n                Matcher actualMatcher;\n                //this is necessary as the framework often decorates matchers\n                if (m instanceof MatcherDecorator) {\n                    actualMatcher = ((MatcherDecorator)m).getActualMatcher();\n                } else {\n                    actualMatcher = m;\n                }\n                //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.\n                if (!(actualMatcher instanceof VarargMatcher) || !actualMatcher.matches(rawArgs[i])) {\n                    return false;\n                }\n            //it's not a vararg (i.e. some ordinary argument before varargs), just do the ordinary check\n            } else if (!m.matches(rawArgs[i])){\nif(((matchers != null) && (matchers == null))){\nreturn false;}                return true;            }\n        }\n\n        return true;\n    }"
}