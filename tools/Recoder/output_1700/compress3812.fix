{
          "0": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "1": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode > c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "2": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode <= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "3": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode < c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "4": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode == c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "5": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode != c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "6": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= m)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "7": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((unicode.unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "8": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((highChars.unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "9": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "10": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((highChars >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "11": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= i)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "12": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= reverseMapping)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "13": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >>> c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "14": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= i1)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "15": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode || c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "16": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode & c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "17": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= m.unicode)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "18": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >> c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "19": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= i0)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "20": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "21": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((reverseMapping >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "22": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((i >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "23": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((m.unicode >= )){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "24": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\ni0 = (i + 1);\n            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "25": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((i0.unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "26": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((i1 >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "27": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((i1 - i0) / 2)){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "28": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\ni1 = i;\n            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "29": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((i1 - i0)){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "30": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((i1.unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "31": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((c.unicode >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "32": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif((i0 >= c)){                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "33": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nreturn null;            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "34": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nreturn m;            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "35": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nreturn;\n            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "36": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nbreak;\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "37": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "38": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nbreak;\n            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "39": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nreturn;\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "40": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nreturn r;            if (m.unicode >= c) {                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "41": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\ni0 = (i + 1);\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "42": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode > unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "43": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && ( > m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "44": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode == unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "45": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (c > m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "46": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode > m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "47": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) || (m.unicode > unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "48": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode == m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "49": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) || (m.unicode > m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "50": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode >= m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "51": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode != m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }",
          "52": "    private Simple8BitChar encodeHighChar(char c) {\n        // for performance an simplicity, yet another reincarnation of\n        // binary search...\n        int i0 = 0;\n        int i1 = this.reverseMapping.size();\n\n        while (i1 > i0) {\n\n            int i = i0 + (i1 - i0) / 2;\n\n            Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);\n\nif(((m.unicode >= c) && (m.unicode < m.unicode))){\n                return m;\n            }\n\n            if (m.unicode < c) {\n                i0 = i + 1;\n            } else {\n                i1 = i;\n            }\n        }\n\n        if (i0 >= this.reverseMapping.size()) {\n            return null;\n        }\n\n        Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);\n\n        if (r.unicode != c) {\n            return null;\n        }\n\n        return r;\n    }"
}