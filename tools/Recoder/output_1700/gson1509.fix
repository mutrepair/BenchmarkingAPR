{
          "0": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = true;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "1": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nbeginArray();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "2": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nendArray();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "3": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nbeginObject();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "4": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nendObject();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "5": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nconsumeNonExecutePrefix();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "6": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nnextNull();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "7": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nclose();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "8": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nskipValue();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "9": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\ncheckLenient();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "10": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nskipToEndOfLine();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "11": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\ndecodeLiteral();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "12": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nlenient = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "13": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "14": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nskipping = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "15": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((hasToken != 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "16": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = hasToken;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "17": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nreturn;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "18": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nreturn null;    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "19": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "20": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif(hasToken){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "21": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((hasToken == 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "22": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = null;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "23": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral = false;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "24": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nvalue = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "25": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral = true;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "26": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nvalue = null;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "27": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((literal != 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "28": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nvalue = literal;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "29": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nreturn this;    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "30": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nbreak;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "31": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = null;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "32": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = false;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "33": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nvalue = false;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "34": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\ntoken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "35": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((token != 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "36": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = token;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "37": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((value != 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "38": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = value;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "39": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral = null;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "40": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nreturn literal;    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "41": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nsuper.readLiteral();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "42": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken++;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "43": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((literal.length() == 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "44": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = true;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "45": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.beginArray();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "46": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.endArray();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "47": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.beginObject();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "48": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.endObject();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "49": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.consumeNonExecutePrefix();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "50": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.nextNull();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "51": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.close();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "52": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.skipValue();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "53": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.checkLenient();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "54": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.skipToEndOfLine();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "55": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\n.decodeLiteral();\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "56": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = literal;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "57": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\ntoken = null;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "58": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nvalue = true;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "59": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nreturn hasToken;    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "60": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral = hasToken;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "61": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral = literal;\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "62": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif(!hasToken){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "63": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif(token){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "64": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif(value){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "65": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif(hasToken){\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "66": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nsuper.readLiteral();\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "67": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif(literal){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "68": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((literal == 0)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "69": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nlenient.hasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "70": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken.hasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "71": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nskipping.hasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "72": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nisLenient().hasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "73": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasNext().hasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "74": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nnextBoolean().hasToken = false;\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "75": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nliteral.length();\n    return token = null; // use decodeLiteral() to get the token type\n  }",
          "76": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nif((hasToken == null)){\n    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n}\n  }",
          "77": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nreturn token = null;    hasToken = false;    return token = null; // use decodeLiteral() to get the token type\n  }",
          "78": "  private JsonToken readLiteral() throws IOException {\n    String literal = nextLiteral();\n    if (literal.length() == 0) {\n      throw syntaxError(\"Expected literal value\");\n    }\n    value = literal;\nhasToken = -1;\n    return token = null; // use decodeLiteral() to get the token type\n  }"
}