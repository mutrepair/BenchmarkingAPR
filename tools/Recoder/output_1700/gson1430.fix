{
          "0": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) % 0));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "1": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder = new StringBuilder();\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "2": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) % 2));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "3": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) - 1));\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "4": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(readEscapeCharacter());\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "5": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, (pos - start));\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "6": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbreak;\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "7": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nstart = pos;\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "8": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder = new StringBuilder();\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "9": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((start - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "10": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) - 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "11": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nreturn \"null\";          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "12": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "13": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nreturn builder.toString();          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "14": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "15": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, start, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "16": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) <= 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "17": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, (pos - start));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "18": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nstart = pos;\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "19": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, ((pos - start) % 1), start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "20": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((builder - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "21": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, buffer, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "22": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) + 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "23": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) >= 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "24": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(readEscapeCharacter());\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "25": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(pos, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "26": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "27": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(builder, start, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "28": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "29": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "30": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - builder) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "31": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((limit - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "32": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nreturn new String(buffer, start, ((pos - start) - 1));          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "33": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "34": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "35": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "36": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nif((builder == null)){\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "37": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((buffer - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "38": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, buffer, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "39": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nreturn null;          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "40": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, ((pos - start) % 1), buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "41": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos <= start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "42": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nif(((pos - start) % 1)){\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "43": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "44": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((quote - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "45": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\ncontinue;\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "46": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos + start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "47": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nif((c == \"null\")){\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "48": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, pos, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "49": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nreturn builder;          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "50": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "51": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((c - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "52": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos >= start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "53": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(((pos - start) % 1), start, buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "54": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, buffer, buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "55": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(((pos - start) % 1), buffer, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "56": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(pos, ((pos - start) % 1), start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "57": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, pos);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "58": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) == 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "59": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) / 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "60": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, start, buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "61": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, pos);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "62": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(((pos - start) % 1), start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "63": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nreturn;\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "64": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nif(skipping){\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "65": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(quote, start, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "66": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nif((pos - start)){\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "67": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(pos, start, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "68": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, ((pos - start) % 1), buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "69": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - pos) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "70": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - quote) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "71": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - buffer) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "72": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, ((pos - start) % 1), start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "73": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - c) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "74": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) < 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "75": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nif((c == quote)){\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "76": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, buffer, ((pos - start) % 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "77": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, ((pos - start) % 1), pos);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "78": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(pos, start, buffer);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "79": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) > 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "80": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(start, pos, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "81": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, buffer, start);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "82": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, (pos - start) % 1);          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "83": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\nbuilder.append(buffer, start, ((pos - start) * 1));\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }"
}