{
          "0": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(true){      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "1": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "2": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(previous){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "3": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(cur){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "4": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(lastJump){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "5": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((iter != null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "6": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(!previous){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "7": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(!lastJump){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "8": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(cur.getFirstChild().getNext().getNext()){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "9": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((cur.isTry() && NodeUtil.hasFinally(cur))){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "10": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((cur.getLastChild() != previous)){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "11": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(cur.getLastChild()){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "12": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(label){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "13": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((cur.isTry() && NodeUtil.hasFinally(cur))){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "14": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(cur.isTry()){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "15": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nbreak;\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "16": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((parent != null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "17": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nreturn;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "18": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(!cur){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "19": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(parent){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "20": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((cur.getLastChild() != previous)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "21": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((iter == null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "22": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((lastJump == node)){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "23": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(!parent){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "24": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nPreconditions.checkState((parent != null), \"null\");\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "25": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nprevious = cur;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "26": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(!label){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "27": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((lastJump != null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "28": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((previous != null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "29": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((parent != null)){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "30": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nlastJump = cur;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "31": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((iter != null)){\nreturn;\n}    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "32": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(null){      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "33": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nlabel = node.getFirstChild().getString();\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "34": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((iter != null)){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "35": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nfinallyMap.put(lastJump, iter);\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "36": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\ncreateEdge(node, Branch.UNCOND, iter);\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "37": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((cur != null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "38": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((iter == null)){\nreturn;\n}    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "39": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nfinallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "40": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\ncreateEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "41": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\niter = cur.getFirstChild().getNext().getNext();\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "42": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((parent == null)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "43": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(node.hasChildren()){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "44": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nbreak;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "45": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nfor(cur = node!isContinueTarget(cur, parent, label);cur = parent) {    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "46": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif((lastJump == node)){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "47": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nNode iter = cur;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "48": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(node.hasChildren()){\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n}\n  }",
          "49": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(((cur.isTry() && NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous))){\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "50": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\ncontinue;\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "51": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nNode parent = node.getParent();\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "52": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nNode lastJump = ;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "53": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(false){      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "54": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nfor(cur = node!isContinueTarget(cur, parent, label);cur = parent) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "55": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nNode previous = null;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "56": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nNode cur = ;\n    if (false) {      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "57": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nif(\"null\"){      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "58": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nlastJump = cur;\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }",
          "59": "  private void handleContinue(Node node) {\n    String label = null;\n    if (node.hasChildren()) {\n      label = node.getFirstChild().getString();\n    }\n    Node cur;\n    Node previous = null;\n    Node lastJump;\n\n    // Similar to handBreak's logic with a few minor variation.\n    Node parent = node.getParent();\n    for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent()) {\n      if (cur.isTry() && NodeUtil.hasFinally(cur)\n          && cur.getLastChild() != previous) {\n        if (lastJump == node) {\n          createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n        } else {\n          finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n        }\n        lastJump = cur;\n      }\n      Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n      previous = cur;\n    }\n    Node iter = cur;\nPreconditions.checkState((parent != null), \"null\");\n      iter = cur.getFirstChild().getNext().getNext();\n    }\n\n    if (lastJump == node) {\n      createEdge(node, Branch.UNCOND, iter);\n    } else {\n      finallyMap.put(lastJump, iter);\n    }\n  }"
}