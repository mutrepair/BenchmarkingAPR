{
          "0": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!iteratorChain.isEmpty()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "1": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nreturn;\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "2": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\ncheckLocked();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "3": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nlockChain();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "4": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nupdateCurrentIterator();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "5": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nremove();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "6": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\ncurrentIterator = iteratorChain.remove();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "7": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\ncurrentIterator = EmptyIterator();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "8": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nlastUsedIterator = currentIterator;\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "9": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nbreak;\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "10": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\n            currentIterator = iteratorChain.remove();\n        }\n    }",
          "11": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(isEmpty){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "12": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(isEmpty()){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "13": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!iteratorChain.isEmpty()){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "14": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(iteratorChain.remove()){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "15": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nif(iteratorChain.isEmpty()){\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n}\n    }",
          "16": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(iteratorChain.isEmpty()){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "17": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!isEmpty()){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "18": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(currentIterator){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "19": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(EmptyIterator()){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "20": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile((currentIterator == null)){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "21": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nif((currentIterator == null)){\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n}\n    }",
          "22": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(((currentIterator == null) && !iteratorChain.isEmpty())){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "23": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\ncontinue;\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "24": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nsuper.updateCurrentIterator();\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "25": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!currentIterator){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "26": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!isEmpty){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "27": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile((!iteratorChain.isEmpty() && null)){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "28": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!iteratorChain.updateCurrentIterator()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "29": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nlastUsedIterator = null;\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }",
          "30": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!.isEmpty()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "31": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(((currentIterator != null) && !iteratorChain.isEmpty())){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "32": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nbreak;\n            currentIterator = iteratorChain.remove();\n        }\n    }",
          "33": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile((!iteratorChain.isEmpty() && (currentIterator != null))){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "34": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile((!iteratorChain.isEmpty() && (iteratorChain.remove() != null))){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "35": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!LOG.isEmpty()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "36": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!.isEmpty()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "37": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile((!iteratorChain.isEmpty() && (currentIterator == null))){\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "38": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!iteratorChain.EmptyIterator()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "39": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\ndo{\n}while(iteratorChain.isEmpty())\n            currentIterator = iteratorChain.remove();\n        }\n    }",
          "40": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\ncontinue;\n            currentIterator = iteratorChain.remove();\n        }\n    }",
          "41": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!iteratorChain.remove()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "42": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!Math.isEmpty()){            currentIterator = iteratorChain.remove();\n        }\n    }",
          "43": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nwhile(!iteratorChain.isEmpty()){\ncurrentIterator = iteratorChain.remove();\n\n}            currentIterator = iteratorChain.remove();\n        }\n    }",
          "44": "    protected void updateCurrentIterator() {\n        if (currentIterator == null) {\n            if (iteratorChain.isEmpty()) {\n                currentIterator = EmptyIterator.<E> emptyIterator();\n            } else {\n                currentIterator = iteratorChain.remove();\n            }\n            // set last used iterator here, in case the user calls remove\n            // before calling hasNext() or next() (although they shouldn't)\n            lastUsedIterator = currentIterator;\n        }\n\nreturn;\nreturn;\n        while (!iteratorChain.isEmpty()) {            currentIterator = iteratorChain.remove();\n        }\n    }"
}