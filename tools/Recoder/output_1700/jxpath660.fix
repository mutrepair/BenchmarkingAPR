{
          "0": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getPosition() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "1": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "2": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getCurrentPosition() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "3": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(isChildOrderingRequired()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "4": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(hasNext()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "5": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(constructIterator()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "6": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(nextSet()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "7": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(nextNode()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "8": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(getDocumentOrder()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "9": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getCurrentNodePointer() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "10": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == 0)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "11": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!isChildOrderingRequired()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "12": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!hasNext()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "13": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!constructIterator()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "14": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!nextSet()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "15": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!nextNode()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "16": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nreturn false;        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "17": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == false)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "18": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() >= -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "19": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(Collections.isChildOrderingRequired()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "20": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(Collections.hasNext()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "21": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(Collections.constructIterator()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "22": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(Collections.nextSet()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "23": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(Collections.nextNode()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "24": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() != -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "25": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == 1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "26": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nperformIteratorStep();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "27": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nremove();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "28": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nreset();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "29": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!getDocumentOrder()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "30": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nset.add(pointer);\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "31": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.sort(list, REVERSE_COMPARATOR);\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "32": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nlist.add(pointer);\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "33": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == 2)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "34": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() <= -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "35": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.sort(list);\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "36": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "37": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextNode() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "38": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() > -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "39": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!pointer){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "40": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && (getDocumentOrder() == -1))){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "41": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((iterator() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "42": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!pointerIterator){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "43": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nbreak;\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "44": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(pointerIterator){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "45": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextSet() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "46": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!Collections.isChildOrderingRequired()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "47": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!Collections.hasNext()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "48": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!Collections.constructIterator()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "49": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!Collections.nextSet()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "50": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!Collections.nextNode()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "51": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\npointerIterator = list.iterator();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "52": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(pointer){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "53": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getName() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "54": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(isChildOrderingRequired()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "55": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(hasNext()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "56": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(constructIterator()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "57": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(nextSet()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "58": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(nextNode()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "59": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(list){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "60": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(Collections.getDocumentOrder()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "61": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.performIteratorStep();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "62": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.remove();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "63": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.reset();\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "64": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((isEmpty() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "65": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) || (getDocumentOrder() == -1))){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "66": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!list){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "67": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!isChildOrderingRequired()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "68": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!hasNext()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "69": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!constructIterator()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "70": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!nextSet()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "71": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!nextNode()){\nreturn false;}        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "72": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nreturn true;        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "73": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((constructIterator() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "74": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == true)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "75": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() == -2)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "76": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nreturn;\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "77": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.sort(list, REVERSE_COMPARATOR);\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "78": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(list.isEmpty()){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "79": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(!set.contains(pointer)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "80": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() < -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "81": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nset.add(pointer);\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "82": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nlist.add(pointer);\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "83": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && isChildOrderingRequired())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "84": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && hasNext())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "85": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && constructIterator())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "86": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && nextSet())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "87": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && nextNode())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "88": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((isChildOrderingRequired() == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "89": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((hasNext() == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "90": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((constructIterator() == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "91": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextSet() == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "92": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextNode() == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "93": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\ncontinue;\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "94": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((pointer == -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "95": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((pointer > -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "96": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && !isChildOrderingRequired())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "97": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && !hasNext())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "98": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && !constructIterator())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "99": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && !nextSet())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "100": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif(((getDocumentOrder() == -1) && !nextNode())){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "101": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((pointer != -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "102": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((isChildOrderingRequired() > -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "103": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((hasNext() > -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "104": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((constructIterator() > -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "105": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextSet() > -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "106": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextNode() > -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "107": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() - -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "108": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((pointer < -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "109": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((isChildOrderingRequired() != -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "110": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((hasNext() != -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "111": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((constructIterator() != -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "112": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextSet() != -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "113": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextNode() != -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "114": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((isChildOrderingRequired() < -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "115": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((hasNext() < -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "116": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((constructIterator() < -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "117": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextSet() < -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "118": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((nextNode() < -1)){\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "119": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\n        if (getDocumentOrder() == -1) {            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "120": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((toString() == -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "121": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nCollections.sort(list);\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "122": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\npointerIterator = list.iterator();\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "123": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\n            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }",
          "124": "    private boolean constructIterator() {\n        HashSet set = new HashSet();\n        ArrayList list = new ArrayList();\n        while (nextSet()) {\n            while (nextNode()) {\n                NodePointer pointer = getCurrentNodePointer();\n                if (!set.contains(pointer)) {\n//                    Pointer cln = (Pointer) pointer.clone();\n                    set.add(pointer);\n                    list.add(pointer);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            return false;\n        }\n\nif((getDocumentOrder() + -1)){            Collections.sort(list);\n        }\n        else {\n            Collections.sort(list, REVERSE_COMPARATOR);\n        }\n        pointerIterator = list.iterator();\n        return true;\n    }"
}