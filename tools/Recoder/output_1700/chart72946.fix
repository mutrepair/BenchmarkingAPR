{
          "0": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new long[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "1": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new int[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "2": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nlong result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "3": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nint result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "4": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "5": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new boolean[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "6": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = 0;\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "7": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new double[1];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "8": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "9": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = 1;\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "10": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new Object[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "11": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = ;\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "12": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nboolean result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "13": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nfinal double[] result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "14": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = 2;\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "15": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "16": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new List[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "17": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new String[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "18": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[[]];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "19": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new double[2];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "20": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = sumY;\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "21": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = };\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "22": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nObject result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "23": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[1];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "24": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[][0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "25": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "26": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nString result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "27": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nList result = new double[0];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "28": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[sumY];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "29": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double(0);\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "30": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = {0,0};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "31": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[] result = new double[false];\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "32": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble ybar = (sumY / n);\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "33": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nreturn;\n        double[] result = new double[0];        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "34": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\nresult[1] = (sxy / sxx);\n        double[] result = new double[0];        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "35": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[0]{1};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "36": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\n        double[] result = new double[0];        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "37": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[0]{1,1};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "38": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = new double[0]{1,0};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "39": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = {0,0,0,0,0};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "40": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = {0,0,0,0,0,0,0};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "41": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = {0,0,0,0,0,0,0,0,0};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }",
          "42": "    public static double[] getPowerRegression(double[][] data) {\n\n        int n = data.length;\n        if (n < 2) {\n            throw new IllegalArgumentException(\"Not enough data.\");\n        }\n\n        double sumX = 0;\n        double sumY = 0;\n        double sumXX = 0;\n        double sumXY = 0;\n        for (int i = 0; i < n; i++) {\n            double x = Math.log(data[i][0]);\n            double y = Math.log(data[i][1]);\n            sumX += x;\n            sumY += y;\n            double xx = x * x;\n            sumXX += xx;\n            double xy = x * y;\n            sumXY += xy;\n        }\n        double sxx = sumXX - (sumX * sumX) / n;\n        double sxy = sumXY - (sumX * sumY) / n;\n        double xbar = sumX / n;\n        double ybar = sumY / n;\n\ndouble[]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};\n        result[1] = sxy / sxx;\n        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);\n\n        return result;\n\n    }"
}