{
          "0": "    public static boolean isIndexedType(JavaType type)\n    {\nif(true){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "1": "    public static boolean isIndexedType(JavaType type)\n    {\nif(type){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "2": "    public static boolean isIndexedType(JavaType type)\n    {\nif(!type){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "3": "    public static boolean isIndexedType(JavaType type)\n    {\nif(type.isEmpty()){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "4": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type == null)){\nreturn false;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "5": "    public static boolean isIndexedType(JavaType type)\n    {\nif(type.getRawClass()){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "6": "    public static boolean isIndexedType(JavaType type)\n    {\nsuper.isIndexedType();\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "7": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type != null)){\nreturn false;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "8": "    public static boolean isIndexedType(JavaType type)\n    {\ntype = false;\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "9": "    public static boolean isIndexedType(JavaType type)\n    {\nif(-false){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "10": "    public static boolean isIndexedType(JavaType type)\n    {\ntype = true;\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "11": "    public static boolean isIndexedType(JavaType type)\n    {\nif(cls){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "12": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type || type.getRawClass())){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "13": "    public static boolean isIndexedType(JavaType type)\n    {\nif(!type.isEmpty()){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "14": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type == null)){\nreturn true;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "15": "    public static boolean isIndexedType(JavaType type)\n    {\nreturn false;        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "16": "    public static boolean isIndexedType(JavaType type)\n    {\ntype = type;\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "17": "    public static boolean isIndexedType(JavaType type)\n    {\nif(!type){\nreturn false;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "18": "    public static boolean isIndexedType(JavaType type)\n    {\nif(type){\nreturn false;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "19": "    public static boolean isIndexedType(JavaType type)\n    {\nsuper.isIndexedType(type);\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "20": "    public static boolean isIndexedType(JavaType type)\n    {\nif((cls == char[])){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "21": "    public static boolean isIndexedType(JavaType type)\n    {\nif((cls == byte[])){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "22": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type || (type == null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "23": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type && type.getRawClass())){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "24": "    public static boolean isIndexedType(JavaType type)\n    {\nif(-true){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "25": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type != null)){\nreturn true;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "26": "    public static boolean isIndexedType(JavaType type)\n    {\nreturn true;        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "27": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type != null)){\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n}\n    }    ",
          "28": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type || type)){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "29": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type || (type != null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "30": "    public static boolean isIndexedType(JavaType type)\n    {\nif(-1){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "31": "    public static boolean isIndexedType(JavaType type)\n    {\nreturn;\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "32": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type == null)){\n        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n}\n    }    ",
          "33": "    public static boolean isIndexedType(JavaType type)\n    {\nif((type && (type == null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "34": "    public static boolean isIndexedType(JavaType type)\n    {\nif(\"null\"){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "35": "    public static boolean isIndexedType(JavaType type)\n    {\nif(1){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "36": "    public static boolean isIndexedType(JavaType type)\n    {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "37": "    public static boolean isIndexedType(JavaType type)\n    {\nif(((type == null) || (type == null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "38": "    public static boolean isIndexedType(JavaType type)\n    {\nbreak;\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "39": "    public static boolean isIndexedType(JavaType type)\n    {\nif(((type != null) || (type == null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "40": "    public static boolean isIndexedType(JavaType type)\n    {\nif(((type == null) && (type == null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "41": "    public static boolean isIndexedType(JavaType type)\n    {\nif(((type != null) && (type == null))){\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "42": "    public static boolean isIndexedType(JavaType type)\n    {\nif(false){            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "43": "    public static boolean isIndexedType(JavaType type)\n    {\nreturn;\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "44": "    public static boolean isIndexedType(JavaType type)\n    {\nif(((type == null) && (type == null))){\nreturn false;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    ",
          "45": "    public static boolean isIndexedType(JavaType type)\n    {\nif(((type == null) && (type != null))){\nreturn false;}        if (true) {            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }    "
}