{
          "0": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, 1));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "1": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, 0));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "2": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(1, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "3": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, -1));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "4": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(2, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "5": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "6": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, 2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "7": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(specialOption);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "8": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, \"null\"));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "9": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = (Option)options.getOption(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "10": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption();\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "11": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.substring(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "12": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.add(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "13": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(option[i]);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "14": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nfinal Option specialOption = options.getOption(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "15": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(stopAtNonOption);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "16": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.flatten(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "17": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(stopAtNonOption[i].substring(2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "18": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(stopAtNonOption[i].substring(0, 2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "19": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "20": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(eatTheRest[i].substring(0, 2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "21": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(eatTheRest);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "22": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, true));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "23": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(eatTheRest[i].substring(2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "24": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, false));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "25": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = tokens.getOption(arguments[i].substring(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "26": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(option);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "27": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i]);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "28": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(option[i].substring(2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "29": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].flatten(0, -2));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "30": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[i].substring(0, null));\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "31": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nreturn;\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, -2));\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "32": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "33": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "34": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 1);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "35": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 2);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "36": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = tokens.getOption(0, 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "37": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(1, 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "38": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(null, 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "39": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 0, 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "40": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, false);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "41": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nbreak;\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, -2));\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "42": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 1, 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "43": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 0, 1);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "44": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 0, 2);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "45": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, 1, 1);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "46": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[0], 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "47": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, arguments[0]);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "48": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(i[0], 0);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "49": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(0, i[0]);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }",
          "50": "    protected String[] flatten(Options options, String[] arguments, \n                               boolean stopAtNonOption)\n    {\n        init();\n\n        boolean eatTheRest = false;\n        Option currentOption = null;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            if (\"--\".equals(arguments[i]))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arguments[i]))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arguments[i].startsWith(\"-\"))\n            {\n                Option option = options.getOption(arguments[i]);\n\n                // this is not an Option\n                if (option == null)\n                {\n                    // handle special properties Option\nOption specialOption = options.getOption(arguments[0], 1);\n\n                    if (specialOption != null)\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n                else\n                {\n                    currentOption = option;\n\n                    // special option\n                    Option specialOption = \n                            options.getOption(arguments[i].substring(0, 2));\n\n                    if ((specialOption != null) && (option == null))\n                    {\n                        tokens.add(arguments[i].substring(0, 2));\n                        tokens.add(arguments[i].substring(2));\n                    }\n                    else if ((currentOption != null) && currentOption.hasArg())\n                    {\n                        if (currentOption.hasArg())\n                        {\n                            tokens.add(arguments[i]);\n                            currentOption = null;\n                        }\n                        else if (currentOption.hasArgs())\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                        else if (stopAtNonOption)\n                        {\n                            eatTheRest = true;\n                            tokens.add(\"--\");\n                            tokens.add(arguments[i]);\n                        }\n                        else\n                        {\n                            tokens.add(arguments[i]);\n                        }\n                    }\n                    else if (currentOption != null)\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                    else if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    }\n                    else\n                    {\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arguments[i]);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[] {  });\n    }"
}