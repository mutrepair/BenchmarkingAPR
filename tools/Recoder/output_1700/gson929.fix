{
          "0": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(string.equals(\"null\")){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "1": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((string && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "2": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "3": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "4": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((htmlSafe && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "5": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.lastIndexOf(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "6": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient || string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "7": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((value && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "8": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(lenient){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "9": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "10": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(!lenient){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "11": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((\"null\" + value)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "12": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.getName(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "13": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(( && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "14": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && value.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "15": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((string.equals(\"null\") && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "16": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.m(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "17": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((lenient && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "18": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!string && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "19": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && !string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "20": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "21": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((string.lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "22": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(isLenient()){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "23": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(isHtmlSafe()){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "24": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((((!lenient && string.equals(\"null\")) && string.equals(\"null\")) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "25": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(string){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "26": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(( && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "27": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nstring.equals(\"null\");\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "28": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.toString(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "29": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nflush();\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "30": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nclose();\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "31": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nnewline();\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "32": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nbeforeName();\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "33": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!htmlSafe && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "34": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((lenient.lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "35": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((htmlSafe.lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "36": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((isLenient().lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "37": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((isHtmlSafe().lenient && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "38": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((string != null)){\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}\n  }",
          "39": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((string && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "40": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && .equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "41": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!value && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "42": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((value == null)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "43": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && !string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "44": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && !string.isEmpty())){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "45": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && .equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "46": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) || string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "47": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.equals(null))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "48": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(string.equals()){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "49": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((string.equals(\"null\") && string.equals(\"null\")) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "50": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!string.equals(\"null\") && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "51": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.nullValue(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "52": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && (string.equals(\"null\") == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "53": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(!string){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "54": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.valueOf(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "55": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((string == null)){\nreturn null;}    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "56": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(string.lenient){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "57": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((lenient && string.equals(\"null\")) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "58": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(isLenient(false)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "59": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(isHtmlSafe(false)){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "60": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.equals(true))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "61": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.get(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "62": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && (string == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "63": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && string.equals(false))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "64": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((! && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "65": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && (lenient == null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "66": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && (lenient != null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "67": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && (lenient != null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "68": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && string.equals(\"null\")) && (string != null))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "69": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(value){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "70": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((!lenient && out.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "71": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(( && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "72": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nout.append(string);\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "73": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && !string.equals(\"null\")) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "74": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nbeforeValue(false);\n    if (!lenient\n        && (string.equals(\"NaN\"))) {      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "75": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nbeforeValue(false);\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "76": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nout.append(string);\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "77": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && (lenient != null)) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "78": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(( && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "79": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(((!lenient && (string != null)) && string.equals(\"null\"))){\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "80": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif(( && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }",
          "81": "  public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n      return nullValue();\n    }\n\n    String string = value.toString();\nif((equals && string.equals(\"null\"))){      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n  }"
}