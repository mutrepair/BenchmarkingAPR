{
          "0": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(key.equals(key2)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "1": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key1))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "2": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "3": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key3))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "4": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(hashCode))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "5": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "6": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && delegateMap.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "7": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(hash3))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "8": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((hash3 == hashCode)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "9": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(hash1))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "10": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && hashCode.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "11": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((hash1 == hashCode)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "12": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.containsKey(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "13": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals())){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "14": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(size))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "15": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(key2){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "16": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key1.key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "17": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key2.key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "18": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key3.key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "19": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(next().key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "20": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(getKey().key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "21": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false || key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "22": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\nreturn true;                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "23": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(isEmpty(key2)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "24": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(hasNext(key2)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "25": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && .equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "26": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((key.equals(key2) && key.equals(key2))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "27": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(((false && key.equals(key2)) && key.equals(key2))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "28": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(!key.equals(key2)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "29": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((\"null\" && key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "30": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nkey.equals(key2);\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "31": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(key){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "32": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && !key.equals(key2))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "33": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && LOG.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "34": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(!key2){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "35": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((key.equals(\"null\") && key.equals(key2))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "36": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\nbreak;\n                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "37": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.add(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "38": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(key.equals(key3)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "39": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(key.equals(key1)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "40": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key.key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "41": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(\"null\"))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "42": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.debug(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "43": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.equals(key2))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "44": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\nreturn false;                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "45": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((-true && key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "46": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.get(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "47": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(isEmpty()){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "48": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(hasNext()){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "49": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(((false && key.equals(key2)) && key.equals(\"null\"))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "50": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(((hash1 == hashCode) && key.equals(key1))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "51": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && Math.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "52": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && .equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "53": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(((hash3 == hashCode) && key.equals(key3))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "54": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.key(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "55": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && .equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "56": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((1 && key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "57": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(((false && key.equals(key2)) && key.equals(false))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "58": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((size > 0)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "59": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((key1 == null)){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "60": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false && key.getName(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "61": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\nreturn delegateMap.containsKey(key);                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "62": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\nreturn;\n                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "63": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((key.equals(key2) && (false && key.equals(key2)))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "64": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\ncontinue;\n                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "65": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif(((key.equals(key2) && key.equals(key2)) && key.equals(key2))){\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "66": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\n                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "67": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false == key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "68": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((false != key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "69": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\n                        if (false && key.equals(key2)) {                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }",
          "70": "    public boolean containsKey(final Object key) {\n        if (delegateMap != null) {\n            return delegateMap.containsKey(key);\n        }\n        if (key == null) {\n            switch (size) {  // drop through\n                case 3:\n                    if (key3 == null) {\n                        return true;\n                    }\n                case 2:\n                    if (key2 == null) {\n                        return true;\n                    }\n                case 1:\n                    if (key1 == null) {\n                        return true;\n                    }\n            }\n        } else {\n            if (size > 0) {\n                final int hashCode = key.hashCode();\n                switch (size) {  // drop through\n                    case 3:\n                        if (hash3 == hashCode && key.equals(key3)) {\n                            return true;\n                        }\n                    case 2:\nif((3 && key.equals(key2))){                            return true;\n                        }\n                    case 1:\n                        if (hash1 == hashCode && key.equals(key1)) {\n                            return true;\n                        }\n                }\n            }\n        }\n        return false;\n    }"
}