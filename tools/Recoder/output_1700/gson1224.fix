{
          "0": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "1": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbeginArray();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "2": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nendArray();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "3": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbeginObject();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "4": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nendObject();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "5": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nconsumeNonExecutePrefix();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "6": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nnextNull();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "7": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nclose();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "8": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nskipValue();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "9": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ncheckLenient();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "10": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nskipToEndOfLine();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "11": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ndecodeLiteral();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "12": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\npop();\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "13": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\npop();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "14": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nhasToken = true;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "15": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\npos--;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "16": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nhasToken = true;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "17": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nif(true){        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "18": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "19": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbeginArray();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "20": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nendArray();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "21": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbeginObject();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "22": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nendObject();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "23": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nconsumeNonExecutePrefix();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "24": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nnextNull();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "25": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nclose();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "26": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nskipValue();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "27": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ncheckLenient();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "28": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nskipToEndOfLine();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "29": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ndecodeLiteral();\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "30": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\npos--;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "31": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nvalue = \"null\";\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "32": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nvalue = \"null\";\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "33": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "34": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nif(false){        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "35": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\npop();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "36": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbeginArray();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "37": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nendArray();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "38": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nbeginObject();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "39": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nendObject();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "40": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nconsumeNonExecutePrefix();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "41": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nnextNull();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "42": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nclose();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "43": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nskipValue();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "44": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ncheckLenient();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "45": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nskipToEndOfLine();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "46": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ndecodeLiteral();\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "47": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nhasToken = true;\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "48": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\npos--;\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "49": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nif(isLenient()){\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "50": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nif(hasNext()){\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "51": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nif(nextBoolean()){\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "52": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nbreak;\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "53": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nreturn;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "54": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nif(!isLenient()){\nbreak;\n}    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "55": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nif(!hasNext()){\nbreak;\n}    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "56": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nif(!nextBoolean()){\nbreak;\n}    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "57": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nif(isLenient()){\nbreak;\n}    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "58": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nif(hasNext()){\nbreak;\n}    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "59": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nif(nextBoolean()){\nbreak;\n}    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "60": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nvalue = \"null\";\nbreak;\nbreak;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "61": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ncontinue;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "62": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\nreturn false;    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "63": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nif(\"null\"){        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "64": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "65": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\ntoken = false;\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\n      if (false) {        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "66": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\ncontinue;\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }",
          "67": "  private JsonToken nextInArray(boolean firstElement) throws IOException {\n    if (firstElement) {\n      replaceTop(JsonScope.NONEMPTY_ARRAY);\n    } else {\n      /* Look for a comma before each element after the first element. */\n      switch (nextNonWhitespace()) {\n      case ']':\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }\n    }\n\n    switch (nextNonWhitespace()) {\n    case ']':\nreturn;\n        pop();\n        hasToken = true;\n        return token = JsonToken.END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      /* In lenient mode, a 0-length literal means 'null' */\n      checkLenient();\n      pos--;\n      hasToken = true;\n      value = \"null\";\n      return token = JsonToken.NULL;\n    default:\n      pos--;\n      return nextValue();\n    }\n  }"
}