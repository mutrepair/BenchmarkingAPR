{
          "0": "  private void decodeLiteral() throws IOException {\nif(true){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "1": "  private void decodeLiteral() throws IOException {\nbeginArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "2": "  private void decodeLiteral() throws IOException {\nendArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "3": "  private void decodeLiteral() throws IOException {\nbeginObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "4": "  private void decodeLiteral() throws IOException {\nendObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "5": "  private void decodeLiteral() throws IOException {\nconsumeNonExecutePrefix();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "6": "  private void decodeLiteral() throws IOException {\nnextNull();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "7": "  private void decodeLiteral() throws IOException {\nclose();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "8": "  private void decodeLiteral() throws IOException {\nskipValue();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "9": "  private void decodeLiteral() throws IOException {\ncheckLenient();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "10": "  private void decodeLiteral() throws IOException {\nskipToEndOfLine();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "11": "  private void decodeLiteral() throws IOException {\ndecodeLiteral();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "12": "  private void decodeLiteral() throws IOException {\nsuper.decodeLiteral();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "13": "  private void decodeLiteral() throws IOException {\nreturn;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "14": "  private void decodeLiteral() throws IOException {\nif(isLenient()){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "15": "  private void decodeLiteral() throws IOException {\nif(hasNext()){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "16": "  private void decodeLiteral() throws IOException {\nif(nextBoolean()){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "17": "  private void decodeLiteral() throws IOException {\nif(isLenient()){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "18": "  private void decodeLiteral() throws IOException {\nif(hasNext()){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "19": "  private void decodeLiteral() throws IOException {\nif(nextBoolean()){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "20": "  private void decodeLiteral() throws IOException {\nif(!isLenient()){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "21": "  private void decodeLiteral() throws IOException {\nif(!hasNext()){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "22": "  private void decodeLiteral() throws IOException {\nif(!nextBoolean()){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "23": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.NULL;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "24": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.STRING;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "25": "  private void decodeLiteral() throws IOException {\nif(token){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "26": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.BOOLEAN;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "27": "  private void decodeLiteral() throws IOException {\nDouble.parseDouble(value);\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "28": "  private void decodeLiteral() throws IOException {\nif(-true){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "29": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.NUMBER;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "30": "  private void decodeLiteral() throws IOException {\nthis.beginArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "31": "  private void decodeLiteral() throws IOException {\nthis.endArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "32": "  private void decodeLiteral() throws IOException {\nthis.beginObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "33": "  private void decodeLiteral() throws IOException {\nthis.endObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "34": "  private void decodeLiteral() throws IOException {\nthis.consumeNonExecutePrefix();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "35": "  private void decodeLiteral() throws IOException {\nthis.nextNull();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "36": "  private void decodeLiteral() throws IOException {\nthis.close();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "37": "  private void decodeLiteral() throws IOException {\nthis.skipValue();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "38": "  private void decodeLiteral() throws IOException {\nthis.checkLenient();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "39": "  private void decodeLiteral() throws IOException {\nthis.skipToEndOfLine();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "40": "  private void decodeLiteral() throws IOException {\nthis.decodeLiteral();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "41": "  private void decodeLiteral() throws IOException {\nif(token){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "42": "  private void decodeLiteral() throws IOException {\nif(token){\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n}\n  }",
          "43": "  private void decodeLiteral() throws IOException {\nif((token != null)){\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n}\n  }",
          "44": "  private void decodeLiteral() throws IOException {\nif(!isLenient()){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "45": "  private void decodeLiteral() throws IOException {\nif(!hasNext()){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "46": "  private void decodeLiteral() throws IOException {\nif(!nextBoolean()){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "47": "  private void decodeLiteral() throws IOException {\nif((token != null)){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "48": "  private void decodeLiteral() throws IOException {\nif(!token){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "49": "  private void decodeLiteral() throws IOException {\nDouble.beginArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "50": "  private void decodeLiteral() throws IOException {\nDouble.endArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "51": "  private void decodeLiteral() throws IOException {\nDouble.beginObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "52": "  private void decodeLiteral() throws IOException {\nDouble.endObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "53": "  private void decodeLiteral() throws IOException {\nDouble.consumeNonExecutePrefix();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "54": "  private void decodeLiteral() throws IOException {\nDouble.nextNull();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "55": "  private void decodeLiteral() throws IOException {\nDouble.close();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "56": "  private void decodeLiteral() throws IOException {\nDouble.skipValue();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "57": "  private void decodeLiteral() throws IOException {\nDouble.checkLenient();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "58": "  private void decodeLiteral() throws IOException {\nDouble.skipToEndOfLine();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "59": "  private void decodeLiteral() throws IOException {\nDouble.decodeLiteral();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "60": "  private void decodeLiteral() throws IOException {\nif((token == null)){\nreturn;\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "61": "  private void decodeLiteral() throws IOException {\nJsonToken.beginArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "62": "  private void decodeLiteral() throws IOException {\nJsonToken.endArray();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "63": "  private void decodeLiteral() throws IOException {\nJsonToken.beginObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "64": "  private void decodeLiteral() throws IOException {\nJsonToken.endObject();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "65": "  private void decodeLiteral() throws IOException {\nJsonToken.consumeNonExecutePrefix();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "66": "  private void decodeLiteral() throws IOException {\nJsonToken.nextNull();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "67": "  private void decodeLiteral() throws IOException {\nJsonToken.close();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "68": "  private void decodeLiteral() throws IOException {\nJsonToken.skipValue();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "69": "  private void decodeLiteral() throws IOException {\nJsonToken.checkLenient();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "70": "  private void decodeLiteral() throws IOException {\nJsonToken.skipToEndOfLine();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "71": "  private void decodeLiteral() throws IOException {\nJsonToken.decodeLiteral();\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "72": "  private void decodeLiteral() throws IOException {\ntoken = false;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "73": "  private void decodeLiteral() throws IOException {\nif(-false){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "74": "  private void decodeLiteral() throws IOException {\ntoken = true;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "75": "  private void decodeLiteral() throws IOException {\nif(!token){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "76": "  private void decodeLiteral() throws IOException {\nif(!true){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "77": "  private void decodeLiteral() throws IOException {\nif((value.equalsIgnoreCase(\"null\") || value.equalsIgnoreCase(\"null\"))){\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n}\n  }",
          "78": "  private void decodeLiteral() throws IOException {\nif(null){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "79": "  private void decodeLiteral() throws IOException {\nif((token == null)){\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n}\n  }",
          "80": "  private void decodeLiteral() throws IOException {\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "81": "  private void decodeLiteral() throws IOException {\nif((value.equalsIgnoreCase(\"null\") || value.equalsIgnoreCase(\"null\"))){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "82": "  private void decodeLiteral() throws IOException {\nbreak;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "83": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.STRING;\nreturn;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "84": "  private void decodeLiteral() throws IOException {\nif(\"null\"){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "85": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.NULL;\nreturn;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "86": "  private void decodeLiteral() throws IOException {\ntoken = JsonToken.BOOLEAN;\nreturn;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "87": "  private void decodeLiteral() throws IOException {\nreturn;\nreturn;\n    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "88": "  private void decodeLiteral() throws IOException {\nif(false){      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "89": "  private void decodeLiteral() throws IOException {\nif(((token != null) && (value.equalsIgnoreCase(\"null\") || value.equalsIgnoreCase(\"null\")))){\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "90": "  private void decodeLiteral() throws IOException {\nbreak;\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "91": "  private void decodeLiteral() throws IOException {\nif((token != null)){\nisLenient();\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "92": "  private void decodeLiteral() throws IOException {\nif((token != null)){\nhasNext();\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "93": "  private void decodeLiteral() throws IOException {\nif((token != null)){\nnextBoolean();\n}    if (false) {      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }",
          "94": "  private void decodeLiteral() throws IOException {\nreturn;\n      token = JsonToken.NULL;\n    } else if (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\")) {\n      token = JsonToken.BOOLEAN;\n    } else {\n      try {\n        Double.parseDouble(value); // this work could potentially be cached\n        token = JsonToken.NUMBER;\n      } catch (NumberFormatException ignored) {\n        // this must be an unquoted string\n        checkLenient();\n        token = JsonToken.STRING;\n      }\n    }\n  }"
}