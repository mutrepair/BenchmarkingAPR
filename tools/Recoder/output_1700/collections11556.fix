{
          "0": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "1": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getName())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "2": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), root.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "3": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), parent.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "4": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), left.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "5": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), right.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "6": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), predecessor.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "7": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), next.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "8": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), current.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "9": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), previous.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "10": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), prefixStart.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "11": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "12": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), subtree.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "13": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), firstEntry().getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "14": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), lastEntry().getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "15": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), nextEntry().getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "16": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), previousEntry().getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "17": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(delegate.compare(node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "18": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "19": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "20": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), node.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "21": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), key.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "22": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "23": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "24": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "25": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "26": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), delegate.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "27": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "28": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif((node != null)){\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n}\n        }",
          "29": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), o.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "30": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "31": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "32": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(node){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "33": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "34": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "35": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(isEmpty()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "36": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(isInternalNode()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "37": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(isExternalNode()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "38": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(hasNext()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "39": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(hasPrevious()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "40": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(isFromInclusive()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "41": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(isToInclusive()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "42": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), key)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "43": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getKey())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "44": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), .getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "45": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), key)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "46": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nclear();\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "47": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nincrementSize();\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "48": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\ndecrementSize();\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "49": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nincrementModCount();\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "50": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nremove();\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "51": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key, entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "52": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key, node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "53": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(!delegate.compare(node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "54": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(delegate.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "55": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, node.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "56": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, entry.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "57": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(!compare(key)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "58": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), node.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "59": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(((node != null) && compare(node.getValue(), entry.getValue()))){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "60": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "61": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, entry.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "62": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), node.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "63": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), entry.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "64": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), .getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "65": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(o.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "66": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "67": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "68": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.toString())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "69": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare()){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "70": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "71": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif((entry.getValue() != null)){\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n}\n        }",
          "72": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), node.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "73": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(((entry.getValue() != null) && compare(node.getValue(), entry.getValue()))){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "74": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "75": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), node.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "76": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "77": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), entry.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "78": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.remove())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "79": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "80": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(key){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "81": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "82": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "83": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(entry.getValue(), entry.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "84": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif((node == null)){\nreturn true;}            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "85": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(((node.getValue() != null) && compare(node.getValue(), entry.getValue()))){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "86": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "87": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "88": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, entry.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "89": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key, entry.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "90": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key, node.getValue(), node.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "91": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node, node.getValue(), node)){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "92": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key, node.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "93": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(key, entry.getValue(), entry.getValue())){\n                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "94": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif((node != null)){\nreturn true;}            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "95": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(remove(node.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "96": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nremoveEntry(node);\n            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "97": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(debug(node.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "98": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(removeEntry(node.getValue(), entry.getValue())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "99": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif(compare(node.getValue(), entry.get())){                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "100": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nif((node == null)){\nreturn false;}            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }",
          "101": "        public boolean remove(final Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n\n            final Map.Entry<K, V> entry = (Map.Entry<K, V>) o;\n            final K key = entry.getKey();\n            if (!delegate.inRange(key)) {\n                return false;\n            }\n\n            final TrieEntry<K, V> node = getEntry(key);\nreturn true;            if (compare(node.getValue(), entry.getValue())) {                removeEntry(node);\n                return true;\n            }\n            return false;\n        }"
}