{
          "0": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nreset();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "1": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nreturn true;                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "2": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nreturn;\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "3": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nstack.push(currentNodePointer.childIterator(ELEMENT_NODE_TEST, false, null));\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "4": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(true){                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "5": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nposition++;\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "6": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\ncurrentNodePointer = it.getNodePointer();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "7": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nbreak;\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "8": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nstack.pop();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "9": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nreturn false;                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "10": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "11": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\ncurrentNodePointer = parentContext.getCurrentNodePointer();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "12": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nsuper.nextNode();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "13": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(isChildOrderingRequired()){\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "14": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(nextNode()){\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "15": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(isRecursive()){\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "16": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(nodeTest){\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "17": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nstack = new Stack();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "18": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nsetStarted = true;\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "19": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nthis.reset();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "20": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(-false){                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "21": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(!nodeTest){\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "22": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\ncontinue;\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "23": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nELEMENT_NODE_TEST = false;\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "24": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "25": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nreturn this;                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "26": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nbreak;\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "27": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nNodeIterator it = (NodeIterator)stack.peek();\n                if (true) {                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "28": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nif(false){                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "29": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\nreturn;\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }",
          "30": "    public boolean nextNode() {\n        if (!setStarted) {\n            setStarted = true;\n            stack = new Stack();\n            currentNodePointer = parentContext.getCurrentNodePointer();\n            if (currentNodePointer != null) {\n                if (!currentNodePointer.isLeaf()) {\n                    stack.push(\n                        currentNodePointer.childIterator(\n                            ELEMENT_NODE_TEST,\n                            false,\n                            null));\n                }\ncontinue;\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            NodeIterator it = (NodeIterator) stack.peek();\n            if (it.setPosition(it.getPosition() + 1)) {\n                currentNodePointer = it.getNodePointer();\n                if (!isRecursive()) {\n                    if (!currentNodePointer.isLeaf()) {\n                        stack.push(\n                            currentNodePointer.childIterator(\n                                ELEMENT_NODE_TEST,\n                                false,\n                                null));\n                    }\n                    if (currentNodePointer.testNode(nodeTest)) {\n                        position++;\n                        return true;\n                    }\n                }\n            }\n            else {\n                // We get here only if the name test failed \n                // and the iterator ended\n                stack.pop();\n            }\n        }\n        return false;\n    }"
}