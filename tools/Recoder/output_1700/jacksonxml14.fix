{
          "0": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(false){                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "1": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(localName.isEmpty()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "2": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(USE_DEFAULT){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "3": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(localName.useWrapping()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "4": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(!_cfgDefaultUseWrapper){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "5": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(localName){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "6": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName == null)){\nreturn PropertyName.NO_NAME;}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "7": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(w.namespace()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "8": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName == null)){\nreturn PropertyName.USE_DEFAULT;}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "9": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName == null)){\nreturn null;}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "10": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "11": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(localName.namespace()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "12": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName != null)){\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n}\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "13": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(w){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "14": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(!USE_DEFAULT){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "15": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName == null)){\nreturn PropertyName.construct(w.localName(), w.namespace());}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "16": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName != null)){\nreturn PropertyName.NO_NAME;}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "17": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(!localName){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "18": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(!localName.isEmpty()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "19": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName == null)){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "20": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(!localName.useWrapping()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "21": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName == null)){\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n}\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "22": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(!useWrapping()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "23": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(PropertyName.USE_DEFAULT){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "24": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName != null)){\nreturn PropertyName.USE_DEFAULT;}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "25": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nlocalName = w.localName();\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "26": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(useWrapping()){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "27": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(NO_NAME){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "28": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName != null)){\nreturn null;}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "29": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName != null)){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "30": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName != null)){\nreturn PropertyName.construct(w.localName(), w.namespace());}            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "31": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(-false){                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "32": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nreturn PropertyName.NO_NAME;            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "33": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nreturn;\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "34": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nreturn null;            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "35": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nreturn PropertyName.USE_DEFAULT;            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "36": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(_cfgDefaultUseWrapper){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "37": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nreturn PropertyName.construct(w.localName(), w.namespace());            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "38": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(1){                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "39": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(\"null\"){                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "40": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName != null) && (w != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "41": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName != null) || (w != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "42": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName == null) || (w != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "43": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName || (localName == null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "44": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((_cfgDefaultUseWrapper || (localName == null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "45": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName == null) && (w != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "46": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nbreak;\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "47": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName && (localName == null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "48": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(0){                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "49": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName && (localName != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "50": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((w != null)){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "51": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif((localName || (localName != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "52": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nbreak;\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "53": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(_cfgDefaultUseWrapper){\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n}\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "54": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nString localName = w.localName();\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "55": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nreturn;\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "56": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName == null) || (localName == null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "57": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName == null) && (localName == null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "58": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName == null) || (localName != null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "59": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(((localName != null) && (localName == null))){\n                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "60": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nJacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper);\n            if (true) {                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }",
          "61": "    public PropertyName findWrapperName(Annotated ann)\n    {\n        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n        if (w != null) {\n            // Special case: wrapping explicitly blocked?\n            if (!w.useWrapping()) {\n                return PropertyName.NO_NAME;\n            }\n            // also: need to ensure we use marker:\n            String localName = w.localName();\nif(true){                return PropertyName.USE_DEFAULT;\n            }\n            return PropertyName.construct(w.localName(), w.namespace());\n        }\n        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n         *   default settings...\n         */\n        if (_cfgDefaultUseWrapper) {\n            return PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }"
}