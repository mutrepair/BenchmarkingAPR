{
          "0": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "1": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "2": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?2:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "3": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "4": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nfinal int keysLength = ((templateKeys == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "5": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nreturn;\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "6": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = this.registry;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "7": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:templatizedTypes.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "8": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:getTemplateKeys().size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "9": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:getTemplatizedTypes().size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "10": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:registry.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "11": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys >= null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "12": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (templateKeys == null);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "13": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?templateKeys:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "14": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nlong keysLength = ((templateKeys == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "15": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((templateKeys != null)){\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n}\n  }",
          "16": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys <= null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "17": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nclearResolved();\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "18": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((templateKeys == null)){\nreturn;\n}    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "19": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?templateKeys.size():templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "20": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:keysLength.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "21": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nthis.registry = registry;\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "22": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((templateKeys == null)){\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n}\n  }",
          "23": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys > null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "24": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = templateKeys;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "25": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = this.templateKeys;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "26": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?false:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "27": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?-1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "28": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys != null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "29": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (int)templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "30": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nImmutableList builder = ImmutableList.builder();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "31": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:templateKeys;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "32": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:(templateKeys == null);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "33": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (int)templateKeys;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "34": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (templateKeys.size())?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "35": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nthis.templatizedTypes = templateKeys;\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "36": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "37": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (keysLength - typesLength);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "38": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nbuilder.addAll(templatizedTypes);\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "39": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (keysLength == 0);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "40": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (templateKeys <= null);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "41": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templatizedTypes == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "42": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((keysLength == 0)){\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n}\n  }",
          "43": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((templateKeys != null)){\nreturn;\n}    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "44": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (typesLength == 0);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "45": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((registry == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "46": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys < null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "47": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nthis.clearResolved();\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "48": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((registry != null)){\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n}\n  }",
          "49": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((typesLength == 0)){\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n}\n  }",
          "50": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((keysLength - typesLength)){\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n}\n  }",
          "51": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:ImmutableList.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "52": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (templateKeys >= null);\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "53": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nif((registry == null)){\nreturn;\n}    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "54": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = 0;\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "55": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nthis.templatizedTypes = templatizedTypes;\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "56": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = (templateKeys)?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "57": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nthis.templateKeys = templateKeys;\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "58": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = new IllegalArgumentException(\"null\");\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "59": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?true:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "60": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nbuilder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "61": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\ntemplatizedTypes = builder.build();\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "62": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\ntemplateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "63": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nsuper.JSType();\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "64": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?0:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "65": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:((templateKeys == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "66": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((keysLength == null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "67": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\ntemplateKeys = ImmutableList.of();\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "68": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys - null))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "69": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\ntemplatizedTypes = ImmutableList.of();\n    int keysLength = templateKeys == null ? 1 : templateKeys.size();    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "70": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?1:templateKeys.JSType();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "71": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == 0))?1:templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }",
          "72": "  JSType(JSTypeRegistry registry, ImmutableList<String> templateKeys,\n      ImmutableList<JSType> templatizedTypes) {\n    this.registry = registry;\n\n    // Do sanity checking on the specified keys and templatized types.\nint keysLength = ((templateKeys == null))?\"null\":templateKeys.size();\n    int typesLength = templatizedTypes == null ? 0 : templatizedTypes.size();\n    if (typesLength > keysLength) {\n      throw new IllegalArgumentException(\n          \"Cannot have more templatized types than template keys\");\n    } else if (typesLength < keysLength) {\n      // If there are fewer templatized types than keys, extend the templatized\n      // types list to match the number of keys, using UNKNOWN_TYPE for the\n      // unspecified types.\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      if (typesLength > 0) {\n        builder.addAll(templatizedTypes);\n      }\n      for (int i = 0; i < keysLength - typesLength; i++) {\n        builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n      templatizedTypes = builder.build();\n    } else if (keysLength == 0 && typesLength == 0) {\n      // Ensure that both lists are non-null.\n      templateKeys = ImmutableList.of();\n      templatizedTypes = ImmutableList.of();\n    }\n\n    this.templateKeys = templateKeys;\n    this.templatizedTypes = templatizedTypes;\n  }"
}