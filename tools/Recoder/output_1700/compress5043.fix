{
          "0": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nbreak;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "1": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "2": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nreturn;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "3": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nit.remove();\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "4": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopyStream(change.getInput(), out, change.getEntry());\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "5": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = false;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "6": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopyStream(in, out, entry);\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "7": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncontinue;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "8": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = copy;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "9": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(copy){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "10": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nreturn;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "11": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nchange = true;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "12": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(entry.getName().equals(change.targetFile())){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "13": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopyStream(change.getInput(), out, change.getEntry());\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "14": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = false;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "15": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif((change.type() == Change.TYPE_DELETE)){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "16": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = true;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "17": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nit.remove();\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "18": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif((copy != null)){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "19": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopyStream(in, out, entry);\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "20": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nit = true;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "21": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\n(it.hasNext())                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "22": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = copy;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "23": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif((entry.getName() != null)){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "24": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy++;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "25": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = null;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "26": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(!isDeletedLater(entry)){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "27": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(!copy){\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "28": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy--;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "29": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(entry.getName().matches((change.targetFile() + \"null\"))){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "30": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nentry = true;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "31": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = out;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "32": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nout = true;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "33": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = entry;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "34": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif((change.type() == Change.TYPE_ADD)){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "35": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(copy){\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "36": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif((copy != \"null\")){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "37": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nbreak;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "38": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif(((change.type() == Change.TYPE_DELETE) && (entry.getName() != null))){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "39": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = true;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "40": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncopy = copy.getName();\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "41": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\n = true;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "42": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nentry = false;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "43": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nif((copy == null)){\n                        copy = true;                        it.remove();\n                        break;\n}\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "44": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\ncontinue;\n                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "45": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nChange change = (Change)it.next();\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "46": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nbreak;\nbreak;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }",
          "47": "    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n            throws IOException {\n        ArchiveEntry entry = null;\n        while ((entry = in.getNextEntry()) != null) {\n            boolean copy = true;\n\n            for (Iterator it = changes.iterator(); it.hasNext();) {\n                Change change = (Change) it.next();\n\n                if (change.type() == Change.TYPE_ADD) {\n                    copyStream(change.getInput(), out, change.getEntry());\n                    it.remove();\n                }\n\n                if (change.type() == Change.TYPE_DELETE\n                        && entry.getName() != null) {\n                    if (entry.getName().equals(change.targetFile())) {\nboolean copy = true;\n                        copy = true;                        it.remove();\n                        break;\n                    } else if (entry.getName().matches(\n                            change.targetFile() + \"/.*\")) {\n                        copy = false;\n                        break;\n                    }\n                }\n            }\n\n            if (copy) {\n                if (!isDeletedLater(entry)) {\n                    copyStream(in, out, entry);\n                }\n            }\n        }\n    }"
}