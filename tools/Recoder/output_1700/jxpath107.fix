{
          "0": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((namespace == null) && (this.namespace != null))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "1": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((true && !namespace.equals(this.namespace))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "2": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((namespace == null) || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "3": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((namespace == null)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "4": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((this.namespace != null)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "5": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((namespace == null) && (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "6": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace == null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "7": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) && (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "8": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace))) || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "9": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "10": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace))) && (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "11": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(!namespace.equals(this.namespace)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "12": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace != null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "13": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !classPrefix.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "14": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.classPrefix)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "15": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) && (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "16": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((namespace == null) || (this.namespace != null))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "17": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((true || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "18": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace > null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "19": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace >= null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "20": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((true && (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "21": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace > null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "22": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "23": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace >= null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "24": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.target)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "25": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (this.namespace != null))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "26": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((namespace == null) || !namespace.equals(this.namespace))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "27": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) || !namespace.equals(this.namespace)) || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "28": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.EMPTY_ARRAY)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "29": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) && (this.namespace != null))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "30": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) || !namespace.equals(this.namespace)) && (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "31": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((target instanceof Collection)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "32": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace <= null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "33": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((method != null)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "34": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.parameters)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "35": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace <= null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "36": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((parameters.length >= 1)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "37": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) || (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "38": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((target instanceof NodeSet)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "39": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace < null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "40": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((target != null)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "41": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((parameters == null)){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "42": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((true || !namespace.equals(this.namespace)) || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "43": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(((namespace == null) && !namespace.equals(this.namespace))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "44": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) && ((namespace == null) || !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "45": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || ((namespace == null) || !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "46": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.name)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "47": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace < null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "48": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.hasNext(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "49": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || !namespace.equals(this.namespace))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "50": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((true || (this.namespace != null))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "51": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true == !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "52": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.getFunction(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "53": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) && !namespace.equals(this.namespace))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "54": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true || !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "55": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.lookupMethod(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "56": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(EMPTY_ARRAY){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "57": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !target.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "58": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.next(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "59": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace && null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "60": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !MethodLookupUtils.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "61": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(parameters){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "62": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "63": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif(namespace){\n            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "64": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace && null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "65": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true != !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "66": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.getClass(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "67": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !TypeUtils.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "68": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !namespace.convert(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "69": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "70": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nparameters = EMPTY_ARRAY;\n        if ((namespace == null && this.namespace != null)\n            || (true && !namespace.equals(this.namespace))) {            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "71": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace || null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "72": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true && !.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "73": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace || null) && (this.namespace != null)) || (true && !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "74": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nif((((namespace == null) && (this.namespace != null)) || (true > !namespace.equals(this.namespace)))){            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "75": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\nreturn;\n        if ((namespace == null && this.namespace != null)\n            || (true && !namespace.equals(this.namespace))) {            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }",
          "76": "    public Function getFunction(\n        String namespace,\n        String name,\n        Object[] parameters) \n    {\n        if ((namespace == null && this.namespace != null)\n            || (true && !namespace.equals(this.namespace))) {            return null;\n        }\n\n        if (parameters == null) {\n            parameters = EMPTY_ARRAY;\n        }\n\n        if (parameters.length >= 1) {\n            Object target = TypeUtils.convert(parameters[0], Object.class);\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                    \n                if (target instanceof NodeSet) {\n                    target = ((NodeSet) target).getPointers();\n                }\n                \n                method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n                \n                if (target instanceof Collection) {\n                    Iterator iter = ((Collection) target).iterator();\n                    if (iter.hasNext()) {\n                        target = iter.next();\n                        if (target instanceof Pointer) {\n                            target = ((Pointer) target).getValue();\n                        }\n                    }\n                    else {\n                        target = null;\n                    }\n                }\n            }\n            if (target != null) {\n                Method method =\n                    MethodLookupUtils.lookupMethod(\n                        target.getClass(),\n                        name,\n                        parameters);\n                if (method != null) {\n                    return new MethodFunction(method);\n                }\n            }\n        }\n\n        String fullName = classPrefix + name;\n        int inx = fullName.lastIndexOf('.');\n        if (inx == -1) {\n            return null;\n        }\n\n        String className = fullName.substring(0, inx);\n        String methodName = fullName.substring(inx + 1);\n\n        Class functionClass;\n        try {\n            functionClass = Class.forName(className);\n        }\n        catch (ClassNotFoundException ex) {\n            throw new JXPathException(\n                \"Cannot invoke extension function \"\n                    + (namespace != null ? namespace + \":\" + name : name),\n                ex);\n        }\n\n        if (methodName.equals(\"new\")) {\n            Constructor constructor =\n                MethodLookupUtils.lookupConstructor(functionClass, parameters);\n            if (constructor != null) {\n                return new ConstructorFunction(constructor);\n            }\n        }\n        else {\n            Method method =\n                MethodLookupUtils.lookupStaticMethod(\n                    functionClass,\n                    methodName,\n                    parameters);\n            if (method != null) {\n                return new MethodFunction(method);\n            }\n        }\n        return null;\n    }"
}