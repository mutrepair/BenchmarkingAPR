{
          "0": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "1": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nc[j] = (z[j] - (mu[j] * c[(j + 1)]));\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "2": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nd[j] = ((c[(j + 1)] - c[j]) / (3d * h[j]));\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "3": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nd[j] = ((c[(j + 1)] - c[j]) / (3d * h[j]));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "4": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nbreak;\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "5": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nc[j] = (z[j] - (mu[j] * c[(j + 1)]));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "6": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nd[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "7": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 0d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "8": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (c[(j + 1)] * (2.0 * c[j]));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "9": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nc[n] = (c[(j + 1)] * (2.0 * c[j]));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "10": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nc[n] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "11": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((j * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "12": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nc[n] = 0d;\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "13": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 0));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "14": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nreturn;\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "15": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (j * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "16": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * j))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "17": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 1));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "18": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = ((y[(j + 1)] - y[j]) / h[j]);\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "19": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nd[j] = (c[(j + 1)] * (2.0 * c[j]));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "20": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "21": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nfor(int j = (n - 1);(j >= 0);j--) {            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "22": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif((j >= 0)){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "23": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (h[j] * (c[(j + 1)] * (2.0 * c[j])));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "24": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 2));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "25": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d);\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "26": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nj = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "27": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - j) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "28": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nc[n] = (h[j] * (c[(j + 1)] * (2.0 * c[j])));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "29": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((j - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "30": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = ((((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d)) + j);\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "31": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif((h[j] * (c[(j + 1)] * (2.0 * c[j])))){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "32": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\ncontinue;\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "33": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif(((y[(j + 1)] - y[j]) / h[j])){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "34": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (c[(j + 1)] * (2.0 * j[n]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "35": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((h[j] * (j[n] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "36": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif(((h[j] * (c[(j + 1)] * (2.0 * c[j]))) / 3d)){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "37": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif((c[(j + 1)] * (2.0 * c[j]))){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "38": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nb[j] = (((y[(j + 1)] - y[j]) / h[j]) - ((j[n] * (c[(j + 1)] * (2.0 * c[j]))) / 3d));\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "39": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif((2.0 * c[j])){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "40": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\nif((y[(j + 1)] - y[j])){\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n}\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }",
          "41": "    public PolynomialSplineFunction interpolate(double x[], double y[])\n        throws DimensionMismatchException,\n               NumberIsTooSmallException,\n               NonMonotonicSequenceException {\n        if (x.length != y.length) {\n            throw new DimensionMismatchException(x.length, y.length);\n        }\n\n        if (x.length < 3) {\n            throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,\n                                                x.length, 3, true);\n        }\n\n        // Number of intervals.  The number of data points is n + 1.\n        final int n = x.length - 1;\n\n        MathArrays.checkOrder(x);\n\n        // Differences between knot points\n        final double h[] = new double[n];\n        for (int i = 0; i < n; i++) {\n            h[i] = x[i + 1] - x[i];\n        }\n\n        final double mu[] = new double[n];\n        final double z[] = new double[n + 1];\n        mu[0] = 0d;\n        z[0] = 0d;\n        double g = 0;\n        for (int i = 1; i < n; i++) {\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\n            mu[i] = h[i] / g;\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\n        }\n\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\n        final double b[] = new double[n];\n        final double c[] = new double[n + 1];\n        final double d[] = new double[n];\n\n        z[n] = 0d;\n        c[n] = 0d;\n\n        for (int j = n -1; j >=0; j--) {\n            c[j] = z[j] - mu[j] * c[j + 1];\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] * (2.0 * c[j])) / 3d;            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\n        }\n\n        final PolynomialFunction polynomials[] = new PolynomialFunction[n];\n        final double coefficients[] = new double[4];\n        for (int i = 0; i < n; i++) {\n            coefficients[0] = y[i];\n            coefficients[1] = b[i];\n            coefficients[2] = c[i];\n            coefficients[3] = d[i];\n            polynomials[i] = new PolynomialFunction(coefficients);\n        }\n\n        return new PolynomialSplineFunction(x, polynomials);\n    }"
}