{
          "0": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(true){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "1": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "2": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(isCollection()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "3": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(isLeaf()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "4": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(node1){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "5": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nremove();\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "6": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(node){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "7": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nbreak;\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "8": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(!isCollection()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "9": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(!isLeaf()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "10": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(list.size()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "11": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(e){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "12": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "13": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((node1 instanceof Attribute)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "14": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\n.remove();\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "15": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(.isCollection()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "16": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(.isLeaf()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "17": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((node2 instanceof Attribute)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "18": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(pointer1){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "19": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(pointer2.getBaseValue()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "20": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(children.isEmpty()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "21": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(node2){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "22": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n}\n        }\n\n        return 0;\n    }",
          "23": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(-true){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "24": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(list){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "25": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(.isCollection()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "26": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(.isLeaf()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "27": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(isCollection(i)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "28": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(isLeaf(i)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "29": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(\"null\"){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "30": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(node1.isEmpty()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "31": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nreturn 1;            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "32": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(.isCollection()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "33": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(.isLeaf()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "34": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(!node1){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "35": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(!node){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "36": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == null)){\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n}\n        }\n\n        return 0;\n    }",
          "37": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(children.size()){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "38": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((\"null\" + \"null\")){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "39": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(null){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "40": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nreturn -1;            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "41": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nreturn 1;}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "42": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nreturn -1;}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "43": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((children != null)){\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n}\n        }\n\n        return 0;\n    }",
          "44": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(-1){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "45": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nn = false;\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "46": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nbreak;\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "47": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((children != null)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "48": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nn = true;\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "49": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nreturn;\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "50": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == node2)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "51": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == null)){\nreturn 1;}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "52": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == null)){\nreturn -1;}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "53": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == null)){\ncontinue;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "54": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((children == null)){\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n}\n        }\n\n        return 0;\n    }",
          "55": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((node instanceof Element)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "56": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((node1 != null)){\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n}\n        }\n\n        return 0;\n    }",
          "57": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\ncontinue;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "58": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == node1)){\n                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "59": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(1){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "60": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nfor(int i = 0;(i < length);i++) {            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "61": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nObject n = children.get(i);\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "62": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nreturn 0;            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "63": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((children != null)){\nreturn 1;}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "64": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((children != null)){\nreturn -1;}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "65": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nfor(int i = 0;(i < length);i++) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "66": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif(false){                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "67": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nisCollection();\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "68": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nisLeaf();\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "69": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nint length = list.size();\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "70": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\n.isCollection();\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "71": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\n.isLeaf();\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "72": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nList list = (Element)getNode();\n            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "73": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nn = false;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "74": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nn = true;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "75": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nchildren = false;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "76": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nlength = false;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "77": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nchildren = true;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "78": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nlength = true;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "79": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == null)){\nn = false;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "80": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nn = null;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "81": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n != null)){\nnode1 = false;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }",
          "82": "    public int compareChildNodePointers(\n        NodePointer pointer1,\n        NodePointer pointer2) \n    {\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n\n        if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {\n            return -1;\n        }\n        else if (\n            !(node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            return 1;\n        }\n        else if (\n            (node1 instanceof Attribute) && (node2 instanceof Attribute)) {\n            List list = ((Element) getNode()).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                }\n                else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0; // Should not happen\n        }\n\n        if (!(node instanceof Element)) {\n            throw new RuntimeException(\n                \"JXPath internal error: \"\n                    + \"compareChildNodes called for \"\n                    + node);\n        }\n\n        List children = ((Element) node).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            Object n = children.get(i);\nif((n == null)){\nn = true;\n}            if (false) {                return -1;\n            }\n            else if (n == node2) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }"
}