{
          "0": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((i >= 0)){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "1": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((types[(i - 1)] == types[i])){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "2": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "3": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) || (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "4": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 2)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "5": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] >= types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "6": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i <= 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "7": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == values))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "8": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (values == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "9": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nbreak;\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "10": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (i == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "11": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[i] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "12": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == types[(i - 1)]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "13": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == i))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "14": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i > 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "15": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (values[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "16": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "17": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] <= types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "18": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == values[(i - 1)]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "19": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i == 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "20": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (values[i] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "21": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "22": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == values[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "23": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i < 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "24": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] > types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "25": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i >= 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "26": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - -1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "27": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == types))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "28": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && ((i >= 0) && (types[(i - 1)] == types[i])))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "29": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i != 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "30": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nreturn null;            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "31": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nvalues[i] = (end.getValue(i) - start.getValue(i));\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "32": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\ntypes[i] = start.getFieldType(i).getDurationType();\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "33": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] < types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "34": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((i - 1)){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "35": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "36": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i <= 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "37": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (isize == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "38": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == isize))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "39": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nreturn new Period(values, PeriodType.forFields(types));            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "40": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] != types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "41": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(values - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "42": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i > 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "43": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((start == null)){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "44": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == start[(i - 1)]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "45": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i == 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "46": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nfor(int i = 0,i = 0;(i < isize);i++) {            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "47": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nif((types[(i - 1)] == types[i])){\n            values[i] = end.getValue(i) - start.getValue(i);\n}\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "48": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - -\"null\")] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "49": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] == start))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "50": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (start[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "51": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\ncontinue;\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "52": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (start == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "53": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nif((i >= 0)){\n            values[i] = end.getValue(i) - start.getValue(i);\n}\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "54": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((start.getFieldType(i) != end.getFieldType(i))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "55": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (i[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "56": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "57": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i < 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "58": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i - 0) && (types[(i - 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "59": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i == 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "60": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i != 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "61": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i != 1)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "62": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 1)] - types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "63": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (values == 0))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "64": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (i == 0))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "65": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();            if (i >= 0 && types[i - 1] == types[i]) {                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n\nreturn;\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "66": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - \"null\")] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "67": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i == 1)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "68": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - null)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "69": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((i >= 0) && (types[(i - 0)] == types[i]))){                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "70": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i != 1)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "71": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (types[(i - 1)] == types[i])) && (i == 0))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "72": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (values != 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "73": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (values == 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "74": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i != 0) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "75": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i == i)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "76": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (types[(i - 1)] == types[i])) && (i == 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "77": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (types[(i - 1)] == types[i])) && (i != 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "78": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i == values)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "79": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((i >= 0) && (i != i)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "80": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i != 0)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "81": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i == 0)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "82": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i == i)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "83": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i != i)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "84": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i == values)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "85": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (values == i)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "86": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i == i[(i - 1)])) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "87": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif((((((i >= 0) && (i == i)) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i])) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "88": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i == 0)) && (i == 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }",
          "89": "    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n        if (start == null || end == null) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n        }\n        if (start.size() != end.size()) {\n            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n        }\n        DurationFieldType[] types = new DurationFieldType[start.size()];\n        int[] values = new int[start.size()];\n        for (int i = 0, isize = start.size(); i < isize; i++) {\n            if (start.getFieldType(i) != end.getFieldType(i)) {\n                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n            }\n            types[i] = start.getFieldType(i).getDurationType();\nif(((((i >= 0) && (i == i)) && (i == 0)) && (types[(i - 1)] == types[i]))){\n                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n            }\n            values[i] = end.getValue(i) - start.getValue(i);\n        }\n        return new Period(values, PeriodType.forFields(types));\n    }"
}