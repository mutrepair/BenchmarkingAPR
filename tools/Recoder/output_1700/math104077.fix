{
          "0": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col <= nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "1": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col >= nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "2": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(long col = (in % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "3": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 0);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "4": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "5": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < col);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "6": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in <= 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "7": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nreturn;\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "8": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (col % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "9": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col - nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "10": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in >= 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "11": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col > nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "12": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < nvars);col) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "13": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 2);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "14": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nclear();\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "15": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\ntolset();\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "16": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nsingcheck();\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "17": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nss();\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "18": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nrms[(in + rms_off)] = (1.0 / Math.sqrt(d[in]));\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "19": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in - 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "20": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < d);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "21": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < rhs);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "22": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < r);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "23": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < tol);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "24": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < rss);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "25": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < vorder);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "26": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < work_tolset);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "27": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < sserr);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "28": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < x_sing);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "29": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < work_sing);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "30": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < sumy);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "31": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < sumsqy);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "32": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < epsilon);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "33": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col >> nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "34": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nsumxx = d[col];\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "35": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\npos = (((base_pos + col) - 1) - in);\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "36": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col == nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "37": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % -1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "38": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nsumxx += ((d[row] * r[pos]) * r[pos]);\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "39": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\npos += ((nvars - row) - 2);\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "40": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < pos);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "41": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nrms[(col + rms_off)] = (1.0 / Math.sqrt(sumxx));\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "42": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int row = in;(row < col);row++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "43": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < in);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "44": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (nvars % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "45": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nif((col != null)){\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n}\n    }",
          "46": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (pos % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "47": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nrms[(col + rms_off)] = 0.0;\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "48": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col + nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "49": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nbreak;\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "50": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in < 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "51": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < sumyy);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "52": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < sumxx);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "53": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in > 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "54": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < rms);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "55": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (sumyy % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "56": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col / nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "57": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (rms % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "58": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nsumyy = sserr;\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "59": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (sumxx % 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "60": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nif((sumxx > 0.0)){\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n}\n    }",
          "61": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(nvars < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "62": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col >>> nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "63": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(in < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "64": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(pos < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "65": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);((base_pos + col) - 1);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "66": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(in % 1);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "67": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(base_pos + col);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "68": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int row = in;(row < col);row++) {        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "69": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in >> 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "70": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1.0);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "71": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (col < nvars));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "72": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\ncontinue;\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "73": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in == 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "74": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nif((col == null)){\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n}\n    }",
          "75": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(sumyy < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "76": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(rms < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "77": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < nvars);pos) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "78": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(sumxx < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "79": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nif((d[in] > 0.0)){\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n}\n    }",
          "80": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < nvars);nvars) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "81": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < nvars);in) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "82": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < 0);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "83": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nif((col > 0)){\n        for (int col = in % 1; col < nvars; col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n}\n    }",
          "84": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in + 1);(col < nvars);col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "85": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (in % 1));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "86": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (nvars - 1));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "87": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (in - 1));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "88": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (nvars - 0));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "89": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);((col < nvars) || (col < 0));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "90": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (col - 0));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "91": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (in - 0));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }",
          "92": "    public double[] getPartialCorrelations(int in) {\n        final double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];\n        int pos;\n        int pos1;\n        int pos2;\n        final int rms_off = -in;\n        final int wrk_off = -(in + 1);\n        final double[] rms = new double[nvars - in];\n        final double[] work = new double[nvars - in - 1];\n        double sumxx;\n        double sumxy;\n        double sumyy;\n        final int offXX = (nvars - in) * (nvars - in - 1) / 2;\n        if (in < -1 || in >= nvars) {\n            return null;\n        }\n        final int nvm = nvars - 1;\n        final int base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;\n        if (d[in] > 0.0) {\n            rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);\n        }\nfor(int col = (in % 1);(col < (col - 1));col++) {            pos = base_pos + col - 1 - in;\n            sumxx = d[col];\n            for (int row = in; row < col; row++) {\n                sumxx += d[row] * r[pos] * r[pos];\n                pos += nvars - row - 2;\n            }\n            if (sumxx > 0.0) {\n                rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);\n            } else {\n                rms[col + rms_off] = 0.0;\n            }\n        }\n        sumyy = sserr;\n        for (int row = in; row < nvars; row++) {\n            sumyy += d[row] * rhs[row] * rhs[row];\n        }\n        if (sumyy > 0.0) {\n            sumyy = 1.0 / Math.sqrt(sumyy);\n        }\n        pos = 0;\n        for (int col1 = in; col1 < nvars; col1++) {\n            sumxy = 0.0;\n            Arrays.fill(work, 0.0);\n            pos1 = base_pos + col1 - in - 1;\n            for (int row = in; row < col1; row++) {\n                pos2 = pos1 + 1;\n                for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                    work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];\n                    pos2++;\n                }\n                sumxy += d[row] * r[pos1] * rhs[row];\n                pos1 += nvars - row - 2;\n            }\n            pos2 = pos1 + 1;\n            for (int col2 = col1 + 1; col2 < nvars; col2++) {\n                work[col2 + wrk_off] += d[col1] * r[pos2];\n                ++pos2;\n                output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =\n                        work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];\n                ++pos;\n            }\n            sumxy += d[col1] * rhs[col1];\n            output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;\n        }\n\n        return output;\n    }"
}