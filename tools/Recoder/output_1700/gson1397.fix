{
          "0": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(true){            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "1": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn \"null\";          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "2": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder.append(buffer, start, ((pos - start) - 1));\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "3": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder = new StringBuilder();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "4": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(isLenient()){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "5": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(hasNext()){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "6": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(nextBoolean()){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "7": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder.append(buffer, start, (pos - start));\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "8": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbeginArray();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "9": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nendArray();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "10": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbeginObject();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "11": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nendObject();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "12": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nconsumeNonExecutePrefix();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "13": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nnextNull();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "14": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nclose();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "15": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nskipValue();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "16": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\ncheckLenient();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "17": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nskipToEndOfLine();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "18": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\ndecodeLiteral();\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "19": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(buffer){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "20": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder.append(readEscapeCharacter());\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "21": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "22": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nstart = pos;\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "23": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbreak;\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "24": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn builder.toString();          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "25": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(((pos - start) - 1)){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "26": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(pos){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "27": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn;\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "28": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(isLenient()){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "29": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(hasNext()){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "30": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(nextBoolean()){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "31": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn new String(buffer, start, ((pos - start) - 1));          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "32": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(start){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "33": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(-true){            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "34": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn null;          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "35": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((pos - start)){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "36": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(1){            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "37": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!isLenient()){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "38": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!hasNext()){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "39": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!nextBoolean()){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "40": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!isLenient()){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "41": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!hasNext()){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "42": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!nextBoolean()){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "43": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(!buffer){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "44": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(builder){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "45": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(skipping){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "46": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbreak;\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "47": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder.append(buffer, start, ((pos - start) - 1));\nreturn \"null\";          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "48": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\ncontinue;\n          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "49": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(skipping){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "50": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(c){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "51": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn false;          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "52": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(buffer){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "53": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder.append(readEscapeCharacter());\nreturn \"null\";          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "54": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(((pos - start) - 1)){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "55": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((c == \"null\")){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "56": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((builder == null)){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "57": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && ((pos - start) - 1))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "58": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(false){            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "59": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (pos < limit))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "60": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((pos && ((pos - start) - 1))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "61": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif(\"null\"){            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "62": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((pos && (pos < limit))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "63": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((start != null)){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "64": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer || ((pos - start) - 1))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "65": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((start == null)){\nreturn \"null\";}          } else if (false) {            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "66": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nbuilder.append(buffer, start, ((pos - start) - 1));\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "67": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\ncontinue;\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "68": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nreturn;\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "69": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer == 1))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "70": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer != 1))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "71": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer > 0))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "72": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer == null))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "73": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (start == null))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "74": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (pos == null))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "75": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (start == 0))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "76": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer == 0))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "77": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer == start))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "78": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (buffer == buffer))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "79": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\nif((buffer && (pos == 0))){\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n          if (builder == null) {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }"
}