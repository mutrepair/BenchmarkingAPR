{
          "0": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount > actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "1": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "2": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount < actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "3": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount <= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "4": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount == actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "5": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "6": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount != actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "7": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount || actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "8": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount && actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "9": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((chunk >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "10": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount != null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "11": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((lastInvocation >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "12": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= chunk)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "13": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nreporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "14": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= lastInvocation)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "15": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nreporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "16": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((invocations >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "17": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount == null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "18": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((chunk != null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "19": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \ninvocationMarker.markVerifiedInOrder(chunk, wanted, context);\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "20": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wanted >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "21": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount instanceof actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "22": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount & actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "23": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nreturn;\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "24": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount < actualCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "25": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wanted != null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "26": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= invocations)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "27": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= wantedCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "28": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((firstUndesired >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "29": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= wanted)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "30": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && actualCount)){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "31": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((chunk == null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "32": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) || (wantedCount < actualCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "33": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((lastInvocation != null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "34": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount == null)){\nreturn;\n}        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "35": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((invocations != null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "36": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount >= actualCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "37": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount >= firstUndesired)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "38": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount > wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "39": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wanted == null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "40": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount == actualCount)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "41": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount != null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "42": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount != 0)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "43": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount != null))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "44": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount != actualCount)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "45": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount > wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "46": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount > 0)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "47": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount < wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "48": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount == wanted)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "49": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wanted != null))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "50": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) || (wantedCount > wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "51": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount != wanted)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "52": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount == wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "53": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount > 0))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "54": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((lastInvocation == null)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "55": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(( >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "56": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount < wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "57": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) || (wantedCount < wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "58": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount != wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "59": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) || (wantedCount > wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "60": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount == 0)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "61": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wanted == wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "62": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount > actualCount)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "63": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((actualCount < 0)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "64": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount == wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "65": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount == null))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "66": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wanted != wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "67": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) || (wantedCount < wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "68": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((context >= actualCount)){            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "69": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wanted == wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "70": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nreporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "71": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount >= wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "72": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount != wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "73": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wanted != wantedCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "74": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif((wantedCount < actualCount)){\n        if (wantedCount >= actualCount) {            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n}\n    }",
          "75": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wanted > wanted))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }",
          "76": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {\n        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);\n        \n        int actualCount = chunk.size();\n        \nif(((wantedCount >= actualCount) && (wantedCount > actualCount))){\n            Location lastInvocation = finder.getLastLocation(chunk);\n            reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = chunk.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerifiedInOrder(chunk, wanted, context);\n    }"
}