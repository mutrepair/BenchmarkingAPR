{
          "0": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = 0;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "1": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = standardOffset;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "2": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "3": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "4": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\ninstant += offset;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "5": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = setDayOfMonthNext(chrono, next);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "6": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = chrono.year().add(next, 1);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "7": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset <= saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "8": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn (next - offset);            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "9": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = chrono.millisOfDay().set(next, 0);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "10": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = setDayOfWeek(chrono, next);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "11": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "12": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset >= saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "13": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "14": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = offset;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "15": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset + saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "16": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn offset;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "17": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset += (standardOffset - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "18": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (chrono - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "19": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = standardOffset;\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "20": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = 0;\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "21": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - chrono);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "22": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = instant;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "23": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (next - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "24": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nif((iMode == \"null\")){\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n}\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "25": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nif((next <= instant)){\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n}\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "26": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\ninstant += offset;\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "27": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = chrono.year().add(next, 1);\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "28": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = setDayOfMonthNext(chrono, next);\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "29": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn (next - offset);                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "30": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = chrono.millisOfDay().set(next, 0);\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "31": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (iMode - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "32": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset == saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "33": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (offset - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "34": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn standardOffset;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "35": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - offset);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "36": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = setDayOfWeek(chrono, next);\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "37": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = saveMillis;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "38": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "39": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - next);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "40": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nnext = (standardOffset - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "41": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = ( - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "42": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - iMode);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "43": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - standardOffset);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "44": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nif((iDayOfWeek == 0)){\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n}\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "45": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (iMonthOfYear - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "46": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset / saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "47": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - );\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "48": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (instant - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "49": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset - iMonthOfYear);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "50": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset++;\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "51": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset < saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "52": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset % saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "53": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "54": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nif((iMode == \"null\")){\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "55": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset * saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "56": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset > saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "57": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (saveMillis - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "58": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nif((next <= instant)){\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "59": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = (standardOffset + standardOffset);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "60": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = ((standardOffset - saveMillis) + 0);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "61": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = ((standardOffset - saveMillis) + saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "62": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nif((iDayOfWeek == 0)){\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "63": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = ((standardOffset - saveMillis) + standardOffset);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "64": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = ((standardOffset - saveMillis) + 1);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "65": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nchrono = (standardOffset - saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "66": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nreturn;\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "67": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\nbreak;\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "68": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\n                offset = standardOffset - saveMillis;            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }",
          "69": "        public long next(long instant, int standardOffset, int saveMillis) {\n            int offset;\n            if (iMode == 'w') {\noffset = ((saveMillis - saveMillis) + saveMillis);\n            } else if (iMode == 's') {\n                offset = standardOffset;\n            } else {\n                offset = 0;\n            }\n\n            // Convert from UTC to local time.\n            instant += offset;\n\n            Chronology chrono = ISOChronology.getInstanceUTC();\n            long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n            // Be lenient with millisOfDay.\n            next = chrono.millisOfDay().set(next, 0);\n            next = chrono.millisOfDay().add(next, iMillisOfDay);\n            next = setDayOfMonthNext(chrono, next);\n\n            if (iDayOfWeek == 0) {\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = setDayOfMonthNext(chrono, next);\n                }\n            } else {\n                next = setDayOfWeek(chrono, next);\n                if (next <= instant) {\n                    next = chrono.year().add(next, 1);\n                    next = chrono.monthOfYear().set(next, iMonthOfYear);\n                    next = setDayOfMonthNext(chrono, next);\n                    next = setDayOfWeek(chrono, next);\n                }\n            }\n\n            // Convert from local time to UTC.\n            return next - offset;\n        }"
}