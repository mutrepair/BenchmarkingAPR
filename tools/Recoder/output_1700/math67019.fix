{
          "0": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal long fourTheta = (-4 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "1": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-1 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "2": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "3": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal int fourTheta = (-4 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "4": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (6.0 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "5": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\ninterpolatedState[i] = (((currentState[i] + (coeff1 * yDot1)) + (coeff23 * yDot23)) + (coeff4 * yDot4));\n            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "6": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nreturn;\n            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "7": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 * oneMinusThetaH);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "8": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (3 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "9": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 - theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "10": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\ninterpolatedDerivatives[i] = (((coeffDot1 * yDot1) + (coeffDot23 * yDot23)) + (coeffDot4 * yDot4));\n            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "11": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (2 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "12": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (1 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "13": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (5 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "14": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = theta;\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "15": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 * yDotK);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "16": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "17": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (0 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "18": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 / theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "19": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-2 * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "20": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nif((i < interpolatedState.length)){\n            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n}\n        }\n\n    }",
          "21": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 % theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "22": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nbreak;\n            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "23": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (false * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "24": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double coeff4 = (s * (((-fourTheta - 1) * theta) - 1));\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "25": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double coeff23 = (s * (((fourTheta - 2) * theta) - 2));\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "26": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (\"null\" * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "27": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double coeff1 = (s * (((-fourTheta + 5) * theta) - 1));\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "28": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 + theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "29": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\ncontinue;\n            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "30": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((-4 * theta) * 1);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "31": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 << theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "32": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (-4 >> theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "33": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfor(int i = 0;(i < interpolatedState.length);++i) {            final double fourTheta      = -4 * theta;            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "34": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((-4 * theta) * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "35": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((-4 * theta) * 0);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "36": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((-4 * theta) * oneMinusThetaH);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "37": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (theta * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "38": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (theta * 1);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "39": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = (theta / theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "40": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((theta * theta) * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "41": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((theta * theta) / theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }",
          "42": "    protected void computeInterpolatedStateAndDerivatives(final double theta,\n                                            final double oneMinusThetaH) {\n\n        final double oneMinusTheta  = 1 - theta;\n        final double oneMinus2Theta = 1 - 2 * theta;\n        final double coeffDot1     = oneMinusTheta * oneMinus2Theta;\n        final double coeffDot23    = 2 * theta * oneMinusTheta;\n        final double coeffDot4     = -theta * oneMinus2Theta;\n        if ((previousState != null) && (theta <= 0.5)) {\n            final double fourTheta2     = 4 * theta * theta;\n            final double s             = theta * h / 6.0;\n            final double coeff1        = s * ( 6 - 9 * theta + fourTheta2);\n            final double coeff23       = s * ( 6 * theta - fourTheta2);\n            final double coeff4        = s * (-3 * theta + fourTheta2);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        previousState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        } else {\nfinal double fourTheta = ((theta * 1) * theta);\n            final double s             = oneMinusThetaH / 6.0;\n            final double coeff1        = s * ((-fourTheta + 5) * theta - 1);\n            final double coeff23       = s * (( fourTheta - 2) * theta - 2);\n            final double coeff4        = s * ((-fourTheta - 1) * theta - 1);\n            for (int i = 0; i < interpolatedState.length; ++i) {\n                final double yDot1  = yDotK[0][i];\n                final double yDot23 = yDotK[1][i] + yDotK[2][i];\n                final double yDot4  = yDotK[3][i];\n                interpolatedState[i] =\n                        currentState[i] + coeff1  * yDot1 + coeff23 * yDot23 + coeff4  * yDot4;\n                interpolatedDerivatives[i] =\n                        coeffDot1 * yDot1 + coeffDot23 * yDot23 + coeffDot4 * yDot4;\n            }\n        }\n\n    }"
}