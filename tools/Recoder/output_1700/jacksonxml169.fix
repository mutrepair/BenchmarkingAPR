{
          "0": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(requiresCustomCodec()){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "1": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(canUseCharArrays()){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "2": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(true){            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "3": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!requiresCustomCodec()){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "4": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!canUseCharArrays()){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "5": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(sr){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "6": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsuper.createParser();\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "7": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(_generatorFeatures){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "8": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(_cfgNameForTextElement){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "9": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr == null)){\nreturn null;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "10": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!sr){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "11": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nreturn;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "12": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(e){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "13": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!_generatorFeatures){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "14": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nreturn null;        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "15": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!requiresCustomCodec()){\nreturn null;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "16": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!canUseCharArrays()){\nreturn null;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "17": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(_objectCodec){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "18": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(requiresCustomCodec(sr)){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "19": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(canUseCharArrays(sr)){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "20": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(requiresCustomCodec()){\nreturn null;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "21": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(canUseCharArrays()){\nreturn null;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "22": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nreturn sr;        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "23": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr != null)){\nreturn null;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "24": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(sr.isEmpty()){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "25": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(_xmlGeneratorFeatures){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "26": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsuper.createParser(sr);\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "27": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsr = false;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "28": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr != null)){\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n}\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "29": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr == null)){\nreturn StaxUtil.throwXmlAsIOException(e);}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "30": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!_cfgNameForTextElement){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "31": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!requiresCustomCodec()){\nreturn StaxUtil.throwXmlAsIOException(e);}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "32": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!canUseCharArrays()){\nreturn StaxUtil.throwXmlAsIOException(e);}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "33": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsr = true;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "34": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsr = sr;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "35": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!e){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "36": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr == null)){\nreturn xp;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "37": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!requiresCustomCodec()){\nreturn xp;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "38": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(!canUseCharArrays()){\nreturn xp;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "39": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nreturn StaxUtil.throwXmlAsIOException(e);        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "40": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nreturn xp;        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "41": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr != null)){\nreturn StaxUtil.throwXmlAsIOException(e);}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "42": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nxp.setXMLTextElementName(_cfgNameForTextElement);\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "43": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsr = null;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "44": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr != null)){\nreturn xp;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "45": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nthis.sr = sr;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "46": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr == null)){\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n}\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "47": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nreturn this;        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "48": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nsr = _initializeXmlReader(sr);\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "49": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nbreak;\n        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "50": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr == null)){\nreturn sr;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "51": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr != null)){\nreturn sr;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "52": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr == null)){\nreturn false;}        if (true) {            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "53": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif(\"null\"){            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "54": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr || (sr == null))){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "55": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr || (sr != null))){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "56": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "57": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr && (sr != null))){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "58": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nif((sr && (sr == null))){\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }",
          "59": "    public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n    {\n        // note: should NOT move parser if already pointing to START_ELEMENT\nbreak;\n            try {\n                sr = _initializeXmlReader(sr);\n            } catch (XMLStreamException e) {\n                return StaxUtil.throwXmlAsIOException(e);\n            }\n        }\n\n        // false -> not managed\n        FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n        if (_cfgNameForTextElement != null) {\n            xp.setXMLTextElementName(_cfgNameForTextElement);\n        }\n        return xp;\n    }"
}