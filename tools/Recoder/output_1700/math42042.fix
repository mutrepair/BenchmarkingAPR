{
          "0": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k > (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "1": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k < (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "2": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k || (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "3": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "4": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k <= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "5": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k && (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "6": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "7": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e + 52)){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "8": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k == (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "9": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nreturn ((sign(bits) == 0L))?1:0;        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "10": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nreturn 0;        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "11": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((bits >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "12": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nreturn (int)((m >> (k - e)) & 0x1L);        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "13": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nreturn ((sign(bits) == 0L))?0:1;        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "14": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k != (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "15": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 2))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "16": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((offset >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "17": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((m >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "18": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((i >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "19": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e >= 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "20": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 0L))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "21": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (bits + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "22": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k & (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "23": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k > offset)){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "24": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k | (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "25": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 1))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "26": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e <= 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "27": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k < e)){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "28": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 0x1L))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "29": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e > 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "30": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((components >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "31": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (m + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "32": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nbreak;\n        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "33": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((m >> (k - e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "34": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(( >= (e + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "35": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 52))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "36": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (i + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "37": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((sign(bits) == 0L)){\n        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n}\n        }\n    }",
          "38": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e == 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "39": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (k + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "40": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (offset + 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "41": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nreturn 1;        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "42": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e > (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "43": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nreturn;\n        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "44": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e < 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "45": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e != 52))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "46": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((k >= (e + 0))){            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "47": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e == e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "48": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e > e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "49": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (e > e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "50": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\ncontinue;\n        } else if (k >= (e + 52)) {            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "51": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e >= e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "52": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e != e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "53": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (m > e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "54": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e > e) || (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "55": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e != null) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "56": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e > 52) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "57": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (k > e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "58": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) || (e > e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "59": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e < e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "60": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e == i) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "61": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (e < e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "62": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((m > e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "63": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (e >= e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "64": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e <= e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "65": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e == e) || (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "66": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e == null) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "67": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (e == e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "68": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e >= e) || (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "69": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e > i) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "70": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (m < e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "71": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) || (m > e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "72": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((m >= e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "73": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e == k) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "74": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k == e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "75": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (e > i))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "76": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (k == e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "77": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k > e) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "78": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((e > k) && (k >= (e + 52)))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "79": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (m >= e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "80": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif(((k >= (e + 52)) && (e > k))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "81": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "82": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e > (e - e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "83": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e > (e <= e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "84": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e < (e - e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }",
          "85": "    private int getBit(final int i, final int k) {\n        final long bits = Double.doubleToLongBits(components[i]);\n        final int e = exponent(bits);\n        if ((k < e) || (k > offset)) {\n            return 0;\n        } else if (k == offset) {\n            return (sign(bits) == 0L) ? 1 : 0;\nif((e <= (e - e))){\n            return (sign(bits) == 0L) ? 0 : 1;\n        } else {\n            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);\n            return (int) ((m >> (k - e)) & 0x1L);\n        }\n    }"
}