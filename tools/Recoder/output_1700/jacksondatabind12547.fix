{
          "0": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nfinal int i = -1;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "1": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nreturn;\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "2": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = 1;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "3": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = ;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "4": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = 2;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "5": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = -1;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "6": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nlong i = -1;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "7": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nprovider.defaultSerializeNull(jgen);\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "8": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nbreak;\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "9": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nserializer = _findAndAddDynamic(serializers, provider.constructSpecializedType(_elementType, cc), provider);\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "10": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nserializer = _findAndAddDynamic(serializers, cc, provider);\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "11": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nserializer.serializeWithType(elem, jgen, provider, typeSer);\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "12": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\ncontinue;\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "13": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nserializers = _dynamicSerializers;\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "14": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nwrapAndThrow(provider, e, value, i);\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "15": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "16": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = 0;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "17": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = -2;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "18": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = _valueTypeSerializer;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "19": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((provider == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "20": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen != 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "21": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nsuper.serializeTypedContents();\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "22": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nfor((i < len);++i) {        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "23": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((value == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "24": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen == null)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "25": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((_valueTypeSerializer == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "26": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((len == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "27": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen != 0)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "28": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nfinal int i = ;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "29": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((elem == null)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "30": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((provider != 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "31": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((_dynamicSerializers == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "32": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((_valueTypeSerializer != 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "33": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((len == 0)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "34": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((elem == null)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "35": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((value != 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "36": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = null;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "37": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = _dynamicSerializers;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "38": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((provider == null)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "39": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((provider != 0)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "40": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = value;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "41": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nObject elem = value.get(i);\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "42": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "43": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen != null)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "44": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((value == null)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "45": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen == 0)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "46": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((_valueTypeSerializer == null)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "47": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((i == 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "48": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nprovider.defaultSerializeNull(jgen);\nreturn;\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "49": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = false;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "50": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nfor((i < len);++i) {return;\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "51": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nfinal int len = value.size();\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "52": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((i < len)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "53": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif(_elementType.hasGenericTypes()){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "54": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nPropertySerializerMap serializers = _dynamicSerializers;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "55": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((serializer == null)){\n        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n}\n    }",
          "56": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nint i = \"null\";\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "57": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nif((jgen > 0)){\nreturn;\n}        int i = -1;        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "58": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nboolean i = -1;\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "59": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nClass<?> cc = elem.getClass();\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }",
          "60": "    public void serializeTypedContents(List<?> value, JsonGenerator jgen, SerializerProvider provider)\n        throws IOException, JsonGenerationException\n    {\n        final int len = value.size();\n        if (len == 0) {\n            return;\n        }\nJsonSerializer<Object> serializer = serializers.serializerFor(cc);\n        try {\n            final TypeSerializer typeSer = _valueTypeSerializer;\n            PropertySerializerMap serializers = _dynamicSerializers;\n            for (; i < len; ++i) {\n                Object elem = value.get(i);\n                if (elem == null) {\n                    provider.defaultSerializeNull(jgen);\n                } else {\n                    Class<?> cc = elem.getClass();\n                    JsonSerializer<Object> serializer = serializers.serializerFor(cc);\n                    if (serializer == null) {\n                        // To fix [JACKSON-508]\n                        if (_elementType.hasGenericTypes()) {\n                            serializer = _findAndAddDynamic(serializers,\n                                    provider.constructSpecializedType(_elementType, cc), provider);\n                        } else {\n                            serializer = _findAndAddDynamic(serializers, cc, provider);\n                        }\n                        serializers = _dynamicSerializers;\n                    }\n                    serializer.serializeWithType(elem, jgen, provider, typeSer);\n                }\n            }\n        } catch (Exception e) {\n            // [JACKSON-55] Need to add reference information\n            wrapAndThrow(provider, e, value, i);\n        }\n    }"
}