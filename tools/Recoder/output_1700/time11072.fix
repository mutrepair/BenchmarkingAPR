{
          "0": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "1": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant - getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "2": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant + getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "3": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant * getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "4": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)));    }",
          "5": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)));    }",
          "6": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getDateTimeMillis().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "7": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((minuteOfHour / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "8": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant % getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "9": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((hourOfDay / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "10": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)));    }",
          "11": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)));    }",
          "12": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay);    }",
          "13": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getDateTimeMillis().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "14": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);    }",
          "15": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, minuteOfHour, (instant / getZone().getOffset(instant)));    }",
          "16": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, instant));    }",
          "17": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);    }",
          "18": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, minuteOfHour));    }",
          "19": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant <= getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "20": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, hourOfDay));    }",
          "21": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nif((instant / getZone().getOffset(instant))){\n        return localToUTC(getBase().getDateTimeMillis\n                          (instant / getZone().getOffset(instant),\n}\n                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "22": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "23": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant);    }",
          "24": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant & getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "25": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getDateTimeMillis(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "26": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), hourOfDay);    }",
          "27": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC((instant / getZone().getOffset(instant)));    }",
          "28": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((secondOfMinute / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "29": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), hourOfDay, (instant / getZone().getOffset(instant)));    }",
          "30": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant >> getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "31": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), minuteOfHour);    }",
          "32": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant << getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "33": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant < getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "34": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), secondOfMinute);    }",
          "35": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)), secondOfMinute);    }",
          "36": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, secondOfMinute));    }",
          "37": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, secondOfMinute, (instant / getZone().getOffset(instant)));    }",
          "38": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)), minuteOfHour);    }",
          "39": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC();    }",
          "40": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), minuteOfHour, secondOfMinute);    }",
          "41": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)));    }",
          "42": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, minuteOfHour, (instant / getZone().getOffset(instant)), secondOfMinute);    }",
          "43": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), minuteOfHour, millisOfSecond);    }",
          "44": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), minuteOfHour, (instant / getZone().getOffset(instant)));    }",
          "45": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), hourOfDay, (instant / getZone().getOffset(instant)), secondOfMinute);    }",
          "46": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().get((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "47": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)), hourOfDay, secondOfMinute);    }",
          "48": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, minuteOfHour, secondOfMinute, (instant / getZone().getOffset(instant)));    }",
          "49": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)), minuteOfHour, secondOfMinute);    }",
          "50": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, minuteOfHour, (instant / getZone().getOffset(instant)), (instant / getZone().getOffset(instant)));    }",
          "51": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, (instant / getZone().getOffset(instant)), secondOfMinute, millisOfSecond);    }",
          "52": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getName((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "53": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, minuteOfHour, (instant / getZone().getOffset(instant)), millisOfSecond);    }",
          "54": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute);    }",
          "55": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, (instant / getZone().getOffset(instant)), hourOfDay, secondOfMinute, millisOfSecond);    }",
          "56": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);    }",
          "57": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis(( / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "58": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getBase(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "59": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((millisOfSecond / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "60": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(get().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "61": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getName().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "62": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().toString((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "63": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getBase((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "64": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn getDateTimeMillis(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "65": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getOffset((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "66": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn debug(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "67": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().instant((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "68": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().get(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "69": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getZone(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "70": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / get().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "71": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getName().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "72": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().add((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "73": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, ));    }",
          "74": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().getDateTimeMillis((instant / getZone().getName(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "75": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(instant().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "76": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(toString().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "77": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(getBase().debug((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "78": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(add().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "79": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn;\n        return localToUTC(getBase().getDateTimeMillis\n                          (instant / getZone().getOffset(instant),\n                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "80": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn localToUTC(debug().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }",
          "81": "    public long getDateTimeMillis(long instant,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\nreturn getName(getBase().getDateTimeMillis((instant / getZone().getOffset(instant)), hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));    }"
}