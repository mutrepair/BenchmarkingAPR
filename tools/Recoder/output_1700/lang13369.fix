{
          "0": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = 2;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "1": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i <= pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "2": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i >= pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "3": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "4": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < i);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "5": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(padChars < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "6": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < pads);i) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "7": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < padChars);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "8": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\npadStr = SPACE;\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "9": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i > pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "10": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padChars != 0)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "11": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(padding < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "12": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\npadding[i] = padChars[(i % padLen)];\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "13": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -2;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "14": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < padding);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "15": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < pads);padChars) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "16": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padChars != 1)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "17": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padChars != null)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "18": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(pads < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "19": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;;i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "20": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i < pads));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "21": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\npadChars++;\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "22": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = false;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "23": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn new String(padding);            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "24": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i - pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "25": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = 0;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "26": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((i != 0)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "27": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i == pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "28": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((pads <= PAD_LIMIT)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "29": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(char[] i = -1;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "30": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(strLen < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "31": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < pads);padding) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "32": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\n            for (int i = -1; i < pads; i++) {if(0!=1)break;                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "33": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padLen == 1)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "34": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = \"null\";(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "35": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((i != 1)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "36": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn str;            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "37": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((i != null)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "38": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn padStr.substring(0, pads).concat(str);            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "39": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < strLen);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "40": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = true;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "41": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;( < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "42": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn;\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "43": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < 0);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "44": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < );i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "45": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padChars == 0)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "46": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padding != 0)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "47": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i > i);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "48": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < pads);pads) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "49": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padChars == 1)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "50": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\n((i < i))                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "51": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\n((i < (i < pads)))                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "52": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((padChars == null)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "53": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i >> pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "54": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = 1;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "55": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn padStr.concat(str);            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "56": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn leftPad(str, size, padStr.charAt(0));            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "57": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nbreak;\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "58": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i > (i < pads));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "59": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = null;(i < pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "60": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i > 0);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "61": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i <= i);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "62": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nreturn null;            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "63": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i >>> pads);i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "64": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nif((i > 0)){\n            for (int i = -1; i < pads; i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n}\n        }\n    }",
          "65": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i - 1));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "66": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i - i));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "67": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i - 0));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "68": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i - pads));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "69": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i - padChars));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }",
          "70": "    public static String leftPad(final String str, final int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = SPACE;\n        }\n        final int padLen = padStr.length();\n        final int strLen = str.length();\n        final int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            final char[] padding = new char[pads];\n            final char[] padChars = padStr.toCharArray();\nfor(int i = -1;(i < (i - strLen));i++) {                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }"
}