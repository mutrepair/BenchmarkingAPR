{
          "0": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "1": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = maxX;\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "2": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((minX - x2) * dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "3": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = minX;\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "4": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (x2 + (((maxY - y2) * dx) / dy));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "5": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = maxY;\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "6": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (x2 + (((minY - y2) * dx) / dy));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "7": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = rect.outcode(x2, y2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "8": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = minY;\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "9": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) - dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "10": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "11": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (x2 + (((maxY - y2) * dx) / dy));\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "12": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = maxX;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "13": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = maxY;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "14": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) + dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "15": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (((maxX - x2) / dy) / dx);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "16": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = minX;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "17": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX + x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "18": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (x2 + (((minY - y2) * dx) / dy));\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "19": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = rect.outcode(x2, y2);\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "20": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((minX - x2) * dy) / dx));\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "21": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (((maxX - x2) / dy) / dx);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "22": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (((maxX - x2) / dy) / dx);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "23": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = minY;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "24": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (((minY - y2) * dx) / dy);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "25": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 - (((maxX - x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "26": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / y2) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "27": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nreturn;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "28": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = ((maxX - x2) / dy);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "29": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (((minY - y2) * dx) / dy);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "30": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / maxY) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "31": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dx) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "32": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP) && (dy != 0.0))){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "33": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / x2) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "34": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = ((maxX - x2) / dy);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "35": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = ((maxX - x2) / dy);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "36": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / f2) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "37": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM) && (dy != 0.0))){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "38": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / maxX) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "39": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (maxX - x2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "40": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((((maxX - x2) / dy) / dx)){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "41": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / y2));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "42": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) <= dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "43": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (maxX - x2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "44": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (dy != 0.0);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "45": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / maxY));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "46": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (x2 + (((minY - y2) * dx) / dy));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "47": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX <= x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "48": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX / x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "49": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (maxX - x2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "50": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / x2));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "51": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (minY - y2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "52": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / f2));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "53": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (x2 + (((minY - y2) * dx) / dy));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "54": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (dy != 0.0);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "55": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = ((minY - y2) * dx);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "56": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / maxX));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "57": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = (y2 + (((maxX - x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "58": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) / dy));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "59": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nx2 = (((minY - y2) * dx) / dy);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "60": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif(((maxX - x2) / dy)){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "61": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((f2 != 0)){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "62": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX * x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "63": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) * dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "64": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT) && (dx != 0.0))){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "65": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((maxX - x2)){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "66": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX % x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "67": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) >= dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "68": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) == dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "69": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) % dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "70": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX >= x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "71": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nif((((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT) && (dx != 0.0))){\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n}\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "72": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX == x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "73": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nbreak;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "74": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX & x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "75": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX < x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "76": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) < dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "77": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 / (((maxX - x2) / dy) / dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "78": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ny2 = (y2 + (((maxX - x2) / dy) & dx));\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "79": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\ncontinue;\n                    y2 = y2 + (maxX - x2) / dy / dx;                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "80": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = ((((((((y2 + y2) + y2) + y2) + y2) + y2) + y2) + y2) + y2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }",
          "81": "    public static boolean clipLine(Line2D line, Rectangle2D rect) {\n\n        double x1 = line.getX1();\n        double y1 = line.getY1();\n        double x2 = line.getX2();\n        double y2 = line.getY2();\n\n        double minX = rect.getMinX();\n        double maxX = rect.getMaxX();\n        double minY = rect.getMinY();\n        double maxY = rect.getMaxY();\n\n        int f1 = rect.outcode(x1, y1);\n        int f2 = rect.outcode(x2, y2);\n\n        while ((f1 | f2) != 0) {\n            if ((f1 & f2) != 0) {\n                return false;\n            }\n            double dx = (x2 - x1);\n            double dy = (y2 - y1);\n            // update (x1, y1), (x2, y2) and f1 and f2 using intersections\n            // then recheck\n            if (f1 != 0) {\n                // first point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f1 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y1 = y1 + (minX - x1) * dy / dx;\n                    x1 = minX;\n                }\n                else if ((f1 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\n                    y1 = y1 + (maxX - x1) * dy / dx;\n                    x1 = maxX;\n                }\n                else if ((f1 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x1 = x1 + (maxY - y1) * dx / dy;\n                    y1 = maxY;\n                }\n                else if ((f1 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x1 = x1 + (minY - y1) * dx / dy;\n                    y1 = minY;\n                }\n                f1 = rect.outcode(x1, y1);\n            }\n            else if (f2 != 0) {\n                // second point is outside, so we update it against one of the\n                // four sides then continue\n                if ((f2 & Rectangle2D.OUT_LEFT) == Rectangle2D.OUT_LEFT\n                        && dx != 0.0) {\n                    y2 = y2 + (minX - x2) * dy / dx;\n                    x2 = minX;\n                }\n                else if ((f2 & Rectangle2D.OUT_RIGHT) == Rectangle2D.OUT_RIGHT\n                        && dx != 0.0) {\nf2 = ((((((((x2 + y2) + y2) + y2) + y2) + y2) + y2) + y2) + y2);\n                    x2 = maxX;\n                }\n                else if ((f2 & Rectangle2D.OUT_BOTTOM) == Rectangle2D.OUT_BOTTOM\n                        && dy != 0.0) {\n                    x2 = x2 + (maxY - y2) * dx / dy;\n                    y2 = maxY;\n                }\n                else if ((f2 & Rectangle2D.OUT_TOP) == Rectangle2D.OUT_TOP\n                        && dy != 0.0) {\n                    x2 = x2 + (minY - y2) * dx / dy;\n                    y2 = minY;\n                }\n                f2 = rect.outcode(x2, y2);\n            }\n        }\n\n        line.setLine(x1, y1, x2, y2);\n        return true;  // the line is visible - if it wasn't, we'd have\n                      // returned false from within the while loop above\n\n    }"
}