{
          "0": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(true){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "1": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(i){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "2": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(closures){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "3": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((\"null\" + i)){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "4": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nreturn;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "5": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "6": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(closures){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "7": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(i){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "8": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((\"null\" + i)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "9": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i != null)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "10": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(!i){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "11": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nbreak;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "12": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ni++;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "13": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i == null)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "14": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((closures != null)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "15": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ni = false;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "16": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(!closures){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "17": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ni = true;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "18": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(-true){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "19": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(i.isEmpty()){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "20": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nclosures = false;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "21": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((i != null)){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "22": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures != null)){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "23": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "24": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nclosures = true;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "25": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(!closures){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "26": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i == null)){\ncontinue;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "27": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nfor(int i = 0;(i < closures.length);i++) {                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "28": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ni = i;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "29": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(((\"null\" + i) + \"null\")){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "30": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i == null)){\nreturn;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "31": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(closures.isEmpty()){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "32": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nclosures = i;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "33": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ncontinue;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "34": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(i){\ncontinue;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "35": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(closures){\ncontinue;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "36": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(!i){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "37": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((closures == null)){\ncontinue;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "38": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(((closures == null) && ((\"null\" + i) + \"null\"))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "39": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "40": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(((closures == null) && (closures == null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "41": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ni = null;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "42": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((closures == null)){\nreturn;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "43": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i != null)){\ncontinue;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "44": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif(((\"null\" + i) + \"null\")){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "45": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((((\"null\" + i) + \"null\") && ((\"null\" + i) + \"null\"))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "46": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures && ((\"null\" + i) + \"null\"))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "47": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures && (closures == null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "48": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nclosures = null;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "49": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\ni = closures;\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "50": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures && (i < closures.length))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "51": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((closures != null)){\ncontinue;\n}                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "52": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nbreak;\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "53": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i == closures)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "54": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures == null)){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "55": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((closures == null)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "56": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {            if (false) {                throw new IllegalArgumentException(\n\nif((i < closures.length)){\ncontinue;\n}\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "57": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(1){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "58": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(false){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "59": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(\"null\"){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "60": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(0){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "61": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures && (closures != null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "62": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures && (i != null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "63": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nreturn;\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "64": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif((closures && (i == null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "65": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(null){                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "66": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(((closures != null) && (closures == null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "67": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(((i == null) && (closures == null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }",
          "68": "    static void validate(final Closure<?>... closures) {\n        if (closures == null) {\n            throw new IllegalArgumentException(\"The closure array must not be null\");\n        }\n        for (int i = 0; i < closures.length; i++) {\nif(((i != null) && (closures == null))){\n                throw new IllegalArgumentException(\n                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n            }\n        }\n    }"
}