{
          "0": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = retval;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "1": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nisLocked = true;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "2": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncheckChainIntegrity();\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "3": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = 2;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "4": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nisLocked = true;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "5": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncheckChainIntegrity();\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "6": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "7": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = 0;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "8": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = 1;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "9": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = 1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "10": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nsetForwardSort(comparatorIndex);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "11": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nsetReverseSort(comparatorIndex);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "12": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nsetForwardSort(retval);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "13": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nsetReverseSort(retval);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "14": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncheckLocked();\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "15": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nbreak;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "16": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval++;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "17": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif(retval){\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "18": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = false;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "19": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nreturn 0;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "20": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval--;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "21": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nreturn;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "22": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nreturn 0;                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "23": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = true;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "24": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = null;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "25": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nreturn retval;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "26": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif((retval != null)){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "27": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncomparator = 1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "28": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nreturn retval;                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "29": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = 0;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "30": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval.get(comparatorIndex);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "31": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "32": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = retval;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "33": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = false;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "34": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif((retval > 0)){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "35": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval += retval;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "36": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nsetForwardSort(0);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "37": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nsetReverseSort(0);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "38": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif(isLocked()){\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "39": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = true;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "40": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif(retval){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "41": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = o2;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "42": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncomparatorIndex = 1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "43": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncomparators();\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "44": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncomparators = 1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "45": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = comparator;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "46": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = retval.get(comparatorIndex);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "47": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\no2 = 1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "48": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncontinue;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "49": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nfor(int comparatorIndex = 0;comparators.hasNext();++comparatorIndex) {                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "50": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif((orderingBits.get(comparatorIndex) == true)){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "51": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncomparators.next();\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "52": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif((retval == 0)){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "53": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nisLocked = 1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "54": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\ncontinue;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "55": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif((retval != 0)){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "56": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = setForwardSort(retval);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "57": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nretval = setReverseSort(retval);\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "58": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nbreak;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "59": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nif((retval == null)){\n                        retval = 1;                    } else {\n                        retval = 1;\n}\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "60": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\nreturn;\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "61": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                    if (retval > 0) {\n                        retval = 1;                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }"
}