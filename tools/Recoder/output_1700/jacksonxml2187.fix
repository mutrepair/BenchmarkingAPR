{
          "0": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\n        }\n        return false;\n    }    ",
          "1": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn true;        }\n        return false;\n    }    ",
          "2": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn false;        }\n        return false;\n    }    ",
          "3": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn false;            return false;        }\n        return false;\n    }    ",
          "4": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncontinue;\n        }\n        return false;\n    }    ",
          "5": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn cls;        }\n        return false;\n    }    ",
          "6": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn;\n        }\n        return false;\n    }    ",
          "7": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn type;        }\n        return false;\n    }    ",
          "8": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncls++;\n            return false;        }\n        return false;\n    }    ",
          "9": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn type.getRawClass();        }\n        return false;\n    }    ",
          "10": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn ;        }\n        return false;\n    }    ",
          "11": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn \"null\";        }\n        return false;\n    }    ",
          "12": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((cls == char[])){\n}\n            return false;        }\n        return false;\n    }    ",
          "13": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nbreak;\n            return false;        }\n        return false;\n    }    ",
          "14": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn (cls == char[]);        }\n        return false;\n    }    ",
          "15": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((cls == byte[])){\n}\n            return false;        }\n        return false;\n    }    ",
          "16": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncls--;\n            return false;        }\n        return false;\n    }    ",
          "17": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn;\n            return false;        }\n        return false;\n    }    ",
          "18": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn (cls == byte[]);        }\n        return false;\n    }    ",
          "19": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn type.isContainerType();        }\n        return false;\n    }    ",
          "20": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ntype.getRawClass();\n            return false;        }\n        return false;\n    }    ",
          "21": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((cls == null)){\nreturn false;}            return false;        }\n        return false;\n    }    ",
          "22": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn true;            return false;        }\n        return false;\n    }    ",
          "23": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nbreak;\n        }\n        return false;\n    }    ",
          "24": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((type == null)){\nreturn false;}            return false;        }\n        return false;\n    }    ",
          "25": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ntype = false;\n            return false;        }\n        return false;\n    }    ",
          "26": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ntype = cls;\n            return false;        }\n        return false;\n    }    ",
          "27": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif(cls){\nreturn false;}            return false;        }\n        return false;\n    }    ",
          "28": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn cls;            return false;        }\n        return false;\n    }    ",
          "29": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((type != null)){\nreturn false;}            return false;        }\n        return false;\n    }    ",
          "30": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((cls != null)){\nreturn false;}            return false;        }\n        return false;\n    }    ",
          "31": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncls = false;\n            return false;        }\n        return false;\n    }    ",
          "32": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nsuper.isIndexedType();\n            return false;        }\n        return false;\n    }    ",
          "33": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncls = cls;\n            return false;        }\n        return false;\n    }    ",
          "34": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ntype = true;\n            return false;        }\n        return false;\n    }    ",
          "35": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncls = true;\n            return false;        }\n        return false;\n    }    ",
          "36": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn null;        }\n        return false;\n    }    ",
          "37": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((type != null)){\n}\n            return false;        }\n        return false;\n    }    ",
          "38": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((cls != null)){\n}\n            return false;        }\n        return false;\n    }    ",
          "39": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncontinue;\n            return false;        }\n        return false;\n    }    ",
          "40": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nreturn this;        }\n        return false;\n    }    ",
          "41": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ncls = type;\n            return false;        }\n        return false;\n    }    ",
          "42": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\ntype = type;\n            return false;        }\n        return false;\n    }    ",
          "43": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((type == cls)){\nreturn false;}            return false;        }\n        return false;\n    }    ",
          "44": "    public static boolean isIndexedType(JavaType type)\n    {\n        if (type.isContainerType()) {\n            Class<?> cls = type.getRawClass();\n            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n            // (actually, ditto for char[]; thought to be a String)\n            if (cls == byte[].class || cls == char[].class) {\n                return false;\n            }\n            // issue#5: also, should not add wrapping for Maps\n            if (Map.class.isAssignableFrom(cls)) {\n                return false;\n            }\nif((cls == null)){\n}\n            return false;        }\n        return false;\n    }    "
}