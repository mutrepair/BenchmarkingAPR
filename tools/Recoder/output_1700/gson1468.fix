{
          "0": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbreak;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "1": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder = new StringBuilder();\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "2": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "3": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos - start));\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "4": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\npos--;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "5": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "6": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (limit / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "7": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbreak;\nbreak;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "8": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\ncheckLenient();\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "9": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn builder.toString();      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "10": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\ncheckLenient();\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "11": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (start / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "12": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder = new StringBuilder();\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "13": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "14": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn \"null\";      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "15": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos - start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "16": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\npos--;\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "17": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (builder / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "18": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "19": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn new String(buffer, start, (pos - start));      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "20": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos - start));\nbreak;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "21": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn builder;      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "22": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\ncontinue;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "23": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(start, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "24": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (buffer / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "25": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, ( / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "26": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\npos--;\nbreak;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "27": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (c / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "28": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, (pos / start), start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "29": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append((pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "30": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "31": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(pos, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "32": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn null;      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "33": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nif((pos / start)){\n}\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "34": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nif(skipping){\n}\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "35": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nif((builder == null)){\n}\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "36": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (skipping / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "37": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos / builder));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "38": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "39": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder = new StringBuilder();\nbreak;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "40": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\ncheckLenient();\nbreak;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "41": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos + start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "42": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn builder.append(buffer, start, (pos / start));    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "43": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nif((builder == null)){\nbreak;\n}      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "44": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos / c));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "45": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbreak;\nbuilder = new StringBuilder();\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "46": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(builder, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "47": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn buffer;      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "48": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(NON_EXECUTE_PREFIX, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "49": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn builder.append(buffer, start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "50": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(pos, (pos / start), start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "51": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos / ));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "52": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "53": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn start;      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "54": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(start, buffer, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "55": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append((pos / start), buffer, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "56": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nif(skipping){\nbreak;\n}      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "57": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(pos, start, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "58": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nif((pos / start)){\nbreak;\n}      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "59": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn pos;      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "60": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn builder.toString();break;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "61": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(start, buffer, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "62": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(pos, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "63": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(c, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "64": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n.append(buffer, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "65": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbreak;\nbuilder.append(buffer, start, (pos - start));\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "66": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, c);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "67": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, buffer);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "68": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(1);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "69": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(start, pos, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "70": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbreak;\npos--;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "71": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, pos);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "72": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn \"null\";break;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "73": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos <= start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "74": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos / buffer));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "75": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append((pos / start), pos, start);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "76": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nreturn (pos / start);      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "77": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(start, pos, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "78": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(, start, (pos / start));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "79": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, 0);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "80": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, (pos / pos));\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "81": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append((pos / start), start, buffer);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "82": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbreak;\ncontinue;\n      builder.append(buffer, start, pos / start);    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "83": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, false);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }",
          "84": "  private String nextLiteral() throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n        switch (c) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos--;\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start);\n          } else {\n            builder.append(buffer, start, pos - start);\n            return builder.toString();\n          }\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\nbuilder.append(buffer, start, builder);\n    } while (fillBuffer(1));\n\n    return builder.toString();\n  }"
}