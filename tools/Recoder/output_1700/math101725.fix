{
          "0": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "1": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] >= 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "2": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] <= 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "3": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] > 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "4": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nreturn;\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "5": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] != 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "6": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nbreak;\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "7": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((i == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "8": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nif((i != null)){\ncontinue;\n}\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "9": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (countSum2 == 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "10": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((i[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "11": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] < 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "12": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((countSum1 == 0)){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "13": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed1[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "14": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((i[1].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "15": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[1].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "16": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nif((countSum1 == 0)){\ncontinue;\n}\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "17": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\ncollSums[i] = (observed1[i] + observed2[i]);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "18": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed1[1].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "19": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\ncountSum2 += observed2[i];\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "20": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nk[0].[i] = observed1[i];\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "21": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nk[1].[i] = observed2[i];\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "22": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[0].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "23": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nif((i == null)){\ncontinue;\n}\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "24": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (observed2[i] == 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "25": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\ncountSum1 += observed1[i];\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "26": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (countSum1 == 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "27": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed1[0].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "28": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((i[0].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "29": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\nfor(int i = 0;(i < observed1.length);i++) {            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "30": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((countSum1[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "31": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "32": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\ni++;\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "33": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((countSum1[1].[i] == 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "34": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) && (countSum2 == 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "35": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (observed1[i] + observed2[i]))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "36": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {            if (observed2[i] == 0) {                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n\ncontinue;\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "37": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(i.isEmpty()){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "38": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == null))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "39": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "40": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] - 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "41": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i != 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "42": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i != null))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "43": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) && (i == 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "44": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i < 0))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "45": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == observed2))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "46": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == i))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "47": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) && (i != null))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "48": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) && (i == null))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "49": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == observed1))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "50": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] + 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "51": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] && 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "52": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif((observed2[i] >>> 0)){                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "53": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i < observed2))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "54": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == ))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "55": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (observed1 == i))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "56": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (observed2 == i))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "57": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (observed2 == null))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "58": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i < i))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "59": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == countSum1))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "60": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nbreak;\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "61": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == observed2[0]))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "62": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == observed1[0]))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }",
          "63": "    public double gDataSetsComparison(final long[] observed1, final long[] observed2)\n            throws DimensionMismatchException, NotPositiveException, ZeroException {\n\n        // Make sure lengths are same\n        if (observed1.length < 2) {\n            throw new DimensionMismatchException(observed1.length, 2);\n        }\n        if (observed1.length != observed2.length) {\n            throw new DimensionMismatchException(observed1.length, observed2.length);\n        }\n\n        // Ensure non-negative counts\n        MathArrays.checkNonNegative(observed1);\n        MathArrays.checkNonNegative(observed2);\n\n        // Compute and compare count sums\n        long countSum1 = 0;\n        long countSum2 = 0;\n\n        // Compute and compare count sums\n        final long[] collSums = new long[observed1.length];\n        final long[][] k = new long[2][observed1.length];\n\n        for (int i = 0; i < observed1.length; i++) {\nif(((observed2[i] == 0) || (i == i[0]))){\n                throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);\n            } else {\n                countSum1 += observed1[i];\n                countSum2 += observed2[i];\n                collSums[i] = observed1[i] + observed2[i];\n                k[0][i] = observed1[i];\n                k[1][i] = observed2[i];\n            }\n        }\n        // Ensure neither sample is uniformly 0\n        if (countSum1 == 0 || countSum2 == 0) {\n            throw new ZeroException();\n        }\n        final long[] rowSums = {countSum1, countSum2};\n        final double sum = (double) countSum1 + (double) countSum2;\n        return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));\n    }"
}