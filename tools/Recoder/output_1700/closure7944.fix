{
          "0": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((1 / thisValue) == (1 - thatValue));        }\n      }\n      return false;\n    }",
          "1": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (thisValue != 0.0);        }\n      }\n      return false;\n    }",
          "2": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue >= 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "3": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thatValue != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "4": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn false;        }\n      }\n      return false;\n    }",
          "5": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "6": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (1 / thisValue);        }\n      }\n      return false;\n    }",
          "7": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue <= 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "8": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (1 - thatValue);        }\n      }\n      return false;\n    }",
          "9": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "10": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - thisValue)));        }\n      }\n      return false;\n    }",
          "11": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) >= (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "12": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))));        }\n      }\n      return false;\n    }",
          "13": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue > 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "14": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) <= (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "15": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue == 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "16": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 >= thatValue)));        }\n      }\n      return false;\n    }",
          "17": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (( != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "18": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((compareJsType != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "19": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) > (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "20": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue - 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "21": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 <= thatValue)));        }\n      }\n      return false;\n    }",
          "22": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue < 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "23": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((equivalent != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "24": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) < (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "25": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "26": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((recurse != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "27": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - )));        }\n      }\n      return false;\n    }",
          "28": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - compareJsType)));        }\n      }\n      return false;\n    }",
          "29": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 >= thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "30": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))) || ((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))));        }\n      }\n      return false;\n    }",
          "31": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((node != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "32": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 > thatValue)));        }\n      }\n      return false;\n    }",
          "33": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 <= thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "34": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - equivalent)));        }\n      }\n      return false;\n    }",
          "35": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((1 / thisValue) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "36": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thatValue == 0.0)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "37": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || (thatValue < thisValue));        }\n      }\n      return false;\n    }",
          "38": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (true - thatValue)));        }\n      }\n      return false;\n    }",
          "39": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) - (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "40": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - recurse)));        }\n      }\n      return false;\n    }",
          "41": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 < thatValue)));        }\n      }\n      return false;\n    }",
          "42": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) && ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "43": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) != (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "44": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 == thatValue)));        }\n      }\n      return false;\n    }",
          "45": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 - node)));        }\n      }\n      return false;\n    }",
          "46": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thisValue == 0.0)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "47": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 > thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "48": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue + 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "49": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || (thisValue < thisValue));        }\n      }\n      return false;\n    }",
          "50": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetQuotedString();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "51": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nremove();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "52": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\ndetachChildren();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "53": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetAllFlags();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "54": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nclearAllFlags();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "55": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nclearSideEffectFlags();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "56": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetMutatesGlobalState();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "57": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetThrows();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "58": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetMutatesThis();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "59": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetMutatesArguments();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "60": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nsetReturnsTainted();\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "61": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) + (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "62": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 < thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "63": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thatValue != 0.0)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "64": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thatValue == thisValue)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "65": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))) || (thatValue < thisValue));        }\n      }\n      return false;\n    }",
          "66": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thatValue == thatValue)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "67": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))) || (thatValue == thisValue));        }\n      }\n      return false;\n    }",
          "68": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thisValue == thisValue)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "69": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || ((1 / thisValue) == (1 - thatValue))) || (thatValue > thisValue));        }\n      }\n      return false;\n    }",
          "70": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn false;          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "71": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thisValue != 0.0)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "72": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 != thatValue)));        }\n      }\n      return false;\n    }",
          "73": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 == thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "74": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (( != 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "75": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 - thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "76": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue / 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "77": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (0 - thatValue)));        }\n      }\n      return false;\n    }",
          "78": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (1 + thatValue)));        }\n      }\n      return false;\n    }",
          "79": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue >> 0.0) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "80": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn (((thisValue != 0.0) || (thisValue == thatValue)) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "81": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (false - thatValue)));        }\n      }\n      return false;\n    }",
          "82": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 != thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "83": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 + thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "84": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) == (0.0 - thatValue)));        }\n      }\n      return false;\n    }",
          "85": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((thisValue != 0.0) || ((1 / thisValue) / (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "86": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || (thatValue == thisValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "87": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || (thatValue == thatValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "88": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn;\n          return (thisValue != 0.0) || (1/thisValue == 1 - thatValue);        }\n      }\n      return false;\n    }",
          "89": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || (thisValue == thisValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "90": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || (thisValue == thatValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "91": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || (thatValue != thisValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "92": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) && (thatValue == thisValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "93": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) || (thatValue != thatValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }",
          "94": "    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);\n      if (equivalent) {\n        double thisValue = getDouble();\n        double thatValue = ((NumberNode) node).getDouble();\n        if (thisValue == thatValue) {\n          // detect the difference between 0.0 and -0.0.\nreturn ((((thisValue != 0.0) && (thatValue == thatValue)) || ((1 / thisValue) == (1 - thatValue))) || ((1 / thisValue) == (1 - thatValue)));        }\n      }\n      return false;\n    }"
}