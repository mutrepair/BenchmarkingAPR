{
          "0": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nBLOCK_SIZE = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "1": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "2": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nrows = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "3": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\ncolumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "4": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockRows = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "5": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "6": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns - BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "7": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) / blocks);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "8": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) / rows);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "9": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) / columns);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "10": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) / blockRows);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "11": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) / blockColumns);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "12": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns >> BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "13": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) - BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "14": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns >= BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "15": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns <= BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "16": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns >>> BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "17": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 2) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "18": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns + BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "19": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 0) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "20": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = ((columns % BLOCK_SIZE) - 1);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "21": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns / BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "22": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns == BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "23": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns += (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "24": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns % BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "25": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) >> BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "26": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns * BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "27": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nreturn;\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "28": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) % BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "29": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = blockColumns;\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "30": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((BLOCK_SIZE % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "31": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((blocks % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "32": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((rows % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "33": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((blockRows % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "34": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((blockColumns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "35": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) >> 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "36": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) <= 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "37": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) >= 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "38": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "39": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) + 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "40": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) % 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "41": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) + BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "42": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) * BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "43": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) >>> BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "44": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockRows = (((rows + BLOCK_SIZE) - 1) / BLOCK_SIZE);\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "45": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) <= BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "46": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nthis.columns = columns;\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "47": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) == 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "48": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nBLOCK_SIZE.blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "49": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nrows.blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "50": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\ncolumns.blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "51": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockRows.blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "52": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns.blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "53": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\ngetRowDimension().blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "54": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\ngetColumnDimension().blockColumns = (((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "55": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "56": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % blockColumns) - 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "57": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) / 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "58": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nthis.rows = rows;\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "59": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nthis.columns = columns;\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "60": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) >= BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "61": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "62": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) >>> 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "63": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nsuper(rows, columns);\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "64": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) - 1) & BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "65": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = ((((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE) / columns);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "66": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((columns % BLOCK_SIZE) * 1) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "67": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nthis.rows = rows;\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "68": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = ((((columns % BLOCK_SIZE) - 1) / BLOCK_SIZE) * columns);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "69": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "70": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nbreak;\n        blockColumns = (columns % BLOCK_SIZE - 1) / BLOCK_SIZE;\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "71": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((((blockColumns - blockColumns) * columns) * BLOCK_SIZE) * BLOCK_SIZE) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }",
          "72": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (((((blockColumns - blockColumns) * blockColumns) * BLOCK_SIZE) * BLOCK_SIZE) / BLOCK_SIZE);\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }"
}