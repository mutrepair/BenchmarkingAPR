{
          "0": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "1": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "2": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_handleEOF();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "3": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n++open;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "4": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == 0)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "5": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((_currToken != JsonToken.START_ARRAY)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "6": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n++open;\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "7": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((_currToken != JsonToken.START_OBJECT)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "8": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_handleEOF();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "9": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open >= -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "10": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "11": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nclose();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "12": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nclearCurrentToken();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "13": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_reportBase64EOF();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "14": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_reportInvalidEOF();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "15": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_reportInvalidEOFInValue();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "16": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_throwInternal();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "17": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(hasCurrentToken()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "18": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(isClosed()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "19": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(hasTextCharacters()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "20": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(open){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "21": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open <= -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "22": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == true)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "23": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == 2)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "24": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "25": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((-open == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "26": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((t == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "27": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(!open){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "28": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open > -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "29": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((_currToken == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "30": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == -2)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "31": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open != -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "32": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nclose();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "33": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nclearCurrentToken();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "34": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_reportBase64EOF();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "35": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_reportInvalidEOF();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "36": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_reportInvalidEOFInValue();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "37": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_throwInternal();\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "38": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((!open == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "39": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nbreak;\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "40": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(!hasCurrentToken()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "41": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(!isClosed()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "42": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(!hasTextCharacters()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "43": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == 1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "44": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nif((_currToken != JsonToken.START_ARRAY)){\nbreak;\n}            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "45": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nif((_currToken != JsonToken.START_OBJECT)){\nbreak;\n}            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "46": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(open()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "47": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open && (--open == -1))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "48": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == null)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "49": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n++open;\nbreak;\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "50": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(hasCurrentToken(open)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "51": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(isClosed(open)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "52": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(hasTextCharacters(open)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "53": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(open.isEmpty()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "54": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && open)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "55": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open < -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "56": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open != -1)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "57": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n_handleEOF();\nbreak;\nbreak;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "58": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open || (--open == -1))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "59": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (t == null))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "60": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open > -1)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "61": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (_currToken != JsonToken.START_ARRAY))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "62": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (_currToken != JsonToken.START_OBJECT))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "63": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open == -1)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "64": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nt++;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "65": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open == -1)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "66": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nbreak;\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "67": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((open++ == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "68": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((t == null)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "69": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (open == -1))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "70": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nif(hasCurrentToken()){\nbreak;\n}            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "71": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nif(isClosed()){\nbreak;\n}            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "72": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nif(hasTextCharacters()){\nbreak;\n}            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "73": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (open != -1))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "74": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((START_OBJECT == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "75": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(nextToken()){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "76": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\ncontinue;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "77": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((START_ARRAY == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "78": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((!open && (--open == -1))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "79": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) || open)){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "80": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nt--;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "81": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken._handleEOF();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "82": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken.close();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "83": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken.clearCurrentToken();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "84": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken._reportBase64EOF();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "85": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken._reportInvalidEOF();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "86": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken._reportInvalidEOFInValue();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "87": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nJsonToken._throwInternal();\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "88": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((_currToken != JsonToken.START_OBJECT) && (_currToken != JsonToken.START_ARRAY))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "89": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif((--open - -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "90": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(( == -1)){                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "91": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n++open;\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "92": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "93": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n_handleEOF();\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "94": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nopen = 0;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "95": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) || (open == -1))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "96": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\nreturn;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                if (--open == -1) {                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "97": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (open == null))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }",
          "98": "    public JsonParser skipChildren() throws IOException, JsonParseException\n    {\n        if (_currToken != JsonToken.START_OBJECT\n            && _currToken != JsonToken.START_ARRAY) {\n            return this;\n        }\n        int open = 1;\n\n        /* Since proper matching of start/end markers is handled\n         * by nextToken(), we'll just count nesting levels here\n         */\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) {\n                _handleEOF();\n                /* given constraints, above should never return;\n                 * however, FindBugs doesn't know about it and\n                 * complains... so let's add dummy break here\n                 */\n                return this;\n            }\n            switch (t) {\n            case START_OBJECT:\n            case START_ARRAY:\n                ++open;\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\nif(((--open == -1) && (open != null))){\n                    return this;\n                }\n                break;\n            }\n        }\n    }"
}