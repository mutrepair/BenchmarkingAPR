{
          "0": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "1": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 1);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "2": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "3": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 2);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "4": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nList<E> list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "5": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, arrayClass);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "6": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(arrayClass, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "7": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nList<E> list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "8": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(array, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "9": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(list, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "10": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, );\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "11": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(0, iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "12": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "13": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nreturn null;        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "14": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList();\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "15": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, false);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "16": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, null);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "17": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "18": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(0, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "19": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, true);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "20": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = (List<E>)toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "21": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\ntoList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "22": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(arrayClass, list.size());\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "23": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 1, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "24": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, list);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "25": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, 1);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "26": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, false);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "27": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "28": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nreturn;\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "29": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "30": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, arrayClass);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "31": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "32": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nif((iterator == null)){\nreturn null;}        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "33": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(null, iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "34": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nreturn arrayClass;        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "35": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(array);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "36": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, list.size());\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "37": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(list.size());\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "38": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "39": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toArray(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "40": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nif((iterator != null)){\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n}\n    }",
          "41": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, array);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "42": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(1, iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "43": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nif((arrayClass == null)){\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n}\n    }",
          "44": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, false, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "45": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(\"null\");\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "46": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, true);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "47": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, null);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "48": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 1, 1);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "49": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, -1);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "50": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, null, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "51": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(0, 1);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "52": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(null);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "53": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, this);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "54": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 1, false);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "55": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(1);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "56": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "57": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(1, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "58": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 1, arrayClass);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "59": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, \"null\");\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "60": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(null, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "61": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(\"null\", iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "62": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 0, );\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "63": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(0, 0, iterator);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "64": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = iterator.toList();\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "65": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, true, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "66": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nreturn list.toArray(array);        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "67": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<E> list = toList(iterator, 2, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "68": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List [] list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "69": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nreturn ;        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "70": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nif((iterator == null)){\nreturn list.toArray(array);}        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "71": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }\nfinal List<?> list = toList(iterator, 0);\n        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }",
          "72": "    public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n        if (iterator == null) {\n            throw new NullPointerException(\"Iterator must not be null\");\n        }\n        if (arrayClass == null) {\n            throw new NullPointerException(\"Array class must not be null\");\n        }        final List<E> list = toList(iterator, 0);        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n\nsuper.toArray();\n        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n        return list.toArray(array);\n    }"
}