{
          "0": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "1": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "2": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2)))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "3": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getStart() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "4": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getEnd() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "5": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "6": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) >= (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "7": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((middle.getDiag() == (end1 - end2))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "8": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "9": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) <= (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "10": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle == null) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "11": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((middle.getStart() == end1)){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "12": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((middle.getDiag() == (start1 - start2))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "13": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 >= start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "14": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((middle == null)){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "15": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) > (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "16": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle.getStart() == end1) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "17": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 <= start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "18": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "19": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2)))) && ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "20": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) < (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "21": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() != (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "22": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start1))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "23": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle.getStart() == end1) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "24": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "25": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || (middle.getDiag() == (end1 - end2))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "26": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2)))) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "27": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((i < end1) && (j < end2)) && equator.equate(sequence1.get(i), sequence2.get(j)))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "28": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 == start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "29": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle == null) && ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - start2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "30": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - end1))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "31": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (sequence2.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "32": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((middle.getEnd() == start1)){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "33": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - i))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "34": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 > start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "35": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 - end2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "36": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (sequence1.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "37": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle == null) || (middle.getDiag() == (end1 - end2)))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "38": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 != start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "39": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((end1 - start1) > (end2 - start2))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "40": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2))))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "41": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif(((middle.getStart() == end1) || (middle.getDiag() == (end1 - end2)))){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "42": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((end1 - end2)){\n\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "43": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) - (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "44": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getDiag() == (start1 < start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "45": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (equator.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "46": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nscript.append(new KeepCommand<T>(sequence1.get(i)));\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "47": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.getName() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "48": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\n++j;\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "49": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\n++i;\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "50": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nscript.append(new DeleteCommand<T>(sequence1.get(i)));\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "51": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nscript.append(new InsertCommand<T>(sequence2.get(j)));\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "52": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nreturn;\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "53": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.buildScript() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "54": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) + (middle.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "55": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (middle.get() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "56": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\nif((((middle == null) || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))) || ((middle.getEnd() == start1) == (script.getDiag() == (start1 - start2))))){\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }",
          "57": "    private void buildScript(final int start1, final int end1, final int start2, final int end2,\n                             final EditScript<T> script) {\n\n        final Snake middle = getMiddleSnake(start1, end1, start2, end2);\n\n        if (middle == null\n                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n                || middle.getEnd() == start1 == (middle.getDiag() == start1 - start2)) {\n            int i = start1;\n            int j = start2;\n            while (i < end1 || j < end2) {\n                if (i < end1 && j < end2 && equator.equate(sequence1.get(i), sequence2.get(j))) {\n                    script.append(new KeepCommand<T>(sequence1.get(i)));\n                    ++i;\n                    ++j;\n                } else {\n                    if (end1 - start1 > end2 - start2) {\n                        script.append(new DeleteCommand<T>(sequence1.get(i)));\n                        ++i;\n                    } else {\n                        script.append(new InsertCommand<T>(sequence2.get(j)));\n                        ++j;\n                    }\n                }\n            }\n\n        } else {\n\n            buildScript(start1, middle.getStart(),\n                        start2, middle.getStart() - middle.getDiag(),\n                        script);\n            for (int i = middle.getStart(); i < middle.getEnd(); ++i) {\n                script.append(new KeepCommand<T>(sequence1.get(i)));\n            }\n            buildScript(middle.getEnd(), end1,\n                        middle.getEnd() - middle.getDiag(), end2,\n                        script);\n        }\n    }"
}