{
          "0": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 2));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "1": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 1));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "2": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 0xe0));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "3": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(1 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "4": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(2 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "5": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 0));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "6": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 2) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "7": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0xe0 | (ch >> 12));\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "8": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 0x80));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "9": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "10": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 1) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "11": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | (ch & 0x3f));\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "12": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0xe0 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "13": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "14": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 0x3f));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "15": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "16": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | (ch & 0x3f));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "17": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[(ch & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "18": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[((ch >> 4) & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "19": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[((ch >> 8) & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "20": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "21": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 0xe0) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "22": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "23": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[((ch >> 12) & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "24": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0xe0 | (ch >> 12));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "25": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = BYTE_u;\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "26": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | true));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "27": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\noutputPtr = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "28": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 0) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "29": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "30": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 12));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "31": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch & 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "32": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 & ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "33": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nch = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "34": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "35": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[((ch >> 12) & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "36": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[(ch & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "37": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((bbuf >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "38": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[((ch >> 4) & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "39": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = HEX_CHARS[((ch >> 8) & 0xF)];\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "40": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | -1));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "41": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = BYTE_u;\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "42": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 && ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "43": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | false));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "44": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch | 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "45": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++];\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "46": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 0x80) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "47": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nwriteStartArray();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "48": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nwriteEndArray();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "49": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nwriteStartObject();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "50": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nwriteEndObject();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "51": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nwriteNull();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "52": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nflush();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "53": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nclose();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "54": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\n_releaseBuffers();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "55": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\n_writeNull();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "56": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\n_flushBuffer();\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "57": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\n = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "58": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x3f | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "59": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(true | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "60": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nHEX_CHARS = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "61": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (long)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "62": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nBYTE_u = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "63": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[(ch & 0xF)] = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "64": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(-1 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "65": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nch[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "66": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\noutputPtr[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "67": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = bbuf;\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "68": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)((ch >> 6) | 63);\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "69": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >>> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "70": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nreturn outputPtr;            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "71": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nif(((ch >= SURR1_FIRST) && (ch <= SURR2_LAST))){\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n}\n        }\n        return outputPtr;\n    }",
          "72": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(12 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "73": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(false | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "74": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = writeNumber(ch);\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "75": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = _writeQuotedInt(ch);\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "76": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nHEX_CHARS[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "77": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 0x3f) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "78": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "79": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(63 | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "80": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch >> 6) | 6));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "81": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(0x80 | ((ch - 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "82": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbreak;\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "83": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)((0x80 | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "84": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nreturn;\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "85": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\n            bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) | 63));            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "86": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)((((0x80 | (outputPtr & outputPtr)) | bbuf) | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "87": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(((((((bbuf & outputPtr) | outputPtr) | outputPtr) | outputPtr) | 63) | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "88": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)(((((((bbuf & outputPtr) | outputPtr) | outputPtr) | outputPtr) | 6) | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "89": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)((((((((bbuf & outputPtr) | outputPtr) | outputPtr) | outputPtr) | outputPtr) | 63) | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "90": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)((((((((bbuf & outputPtr) & outputPtr) | outputPtr) | outputPtr) | outputPtr) | 63) | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }",
          "91": "    private int _outputMultiByteChar(int ch, int outputPtr)\n        throws IOException\n    {\n        byte[] bbuf = _outputBuffer;\n        if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n            bbuf[outputPtr++] = BYTE_BACKSLASH;\n            bbuf[outputPtr++] = BYTE_u;\n            \n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];\n            bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];\n        } else {\n            bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));\nbbuf[outputPtr++] = (byte)((((((((bbuf & outputPtr) | outputPtr) | outputPtr) | outputPtr) | outputPtr) | 6) | ((ch >> 6) | 63)) | ((ch >> 6) | 63));\n            bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n        }\n        return outputPtr;\n    }"
}