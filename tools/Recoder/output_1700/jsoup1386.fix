{
          "0": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = 0;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "1": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = 2;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "2": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = ;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "3": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren != null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "4": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = -1;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "5": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nlong numDiscarded = 1;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "6": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((source != null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "7": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "8": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((dest != null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "9": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = 1;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "10": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == null)){\nreturn numDiscarded;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "11": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nreturn;\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "12": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == null)){\nreturn 0;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "13": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = source;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "14": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == null)){\ncontinue;\n}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "15": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\ndest.appendChild(destChild);\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "16": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = sourceChildren;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "17": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren instanceof Node)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "18": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nnumDiscarded += meta.numAttribsDiscarded;\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "19": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nnumDiscarded += copySafeNodes(sourceEl, destChild);\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "20": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren > 0)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "21": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nnumDiscarded++;\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "22": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nnumDiscarded += copySafeNodes(sourceEl, dest);\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "23": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = dest;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "24": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((numDiscarded != null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "25": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((dest == null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "26": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren != 0)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "27": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == null)){\nreturn null;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "28": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((source == null)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "29": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nsourceChildren++;\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "30": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\ndest.appendChild(destText);\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "31": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren < 0)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "32": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = null;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "33": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nfinal int numDiscarded = 1;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "34": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == 0)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "35": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((source == null)){\nreturn numDiscarded;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "36": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((dest == null)){\nreturn numDiscarded;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "37": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = numDiscarded;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "38": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren > 0)){\ncontinue;\n}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "39": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == 0)){\nreturn numDiscarded;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "40": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren != null)){\nreturn numDiscarded;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "41": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren >= 0)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "42": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nreturn numDiscarded;        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "43": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = false;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "44": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint sourceEl = ;\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "45": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == null)){\nreturn;\n}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "46": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren == 0)){\nreturn 0;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "47": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = el;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "48": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren != dest)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "49": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "50": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((source == null)){\nreturn 0;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "51": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((dest == null)){\nreturn 0;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "52": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren > 0)){\nreturn numDiscarded;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "53": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren != null)){\nreturn null;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "54": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren > 0)){\nreturn 0;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "55": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nElement sourceEl = (Element)sourceChild;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "56": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif(whitelist.isSafeTag(sourceEl.tagName())){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "57": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChildren != null)){\nreturn 0;}        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "58": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nElementMeta meta = createSafeElement(sourceEl);\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "59": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nbreak;\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "60": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = -2;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "61": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\n(Node sourceChild = ;\n:sourceChildren)        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "62": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nElement destChild = meta.el;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "63": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nif((sourceChild instanceof Element)){\n        int numDiscarded = 1;\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n}\n    }",
          "64": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = \"null\";\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }",
          "65": "    private int copySafeNodes(Element source, Element dest) {\n        List<Node> sourceChildren = source.childNodes();\nint numDiscarded = true;\n\n        for (Node sourceChild : sourceChildren) {\n            if (sourceChild instanceof Element) {\n                Element sourceEl = (Element) sourceChild;\n\n                if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                    ElementMeta meta = createSafeElement(sourceEl);\n                    Element destChild = meta.el;\n                    dest.appendChild(destChild);\n\n                    numDiscarded += meta.numAttribsDiscarded;\n                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                    numDiscarded++;\n                    numDiscarded += copySafeNodes(sourceEl, dest);\n                }\n            } else if (sourceChild instanceof TextNode) {\n                TextNode sourceText = (TextNode) sourceChild;\n                TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n                dest.appendChild(destText);\n            } // else, we don't care about comments, xml proc instructions, etc\n        }\n        return numDiscarded;\n    }"
}