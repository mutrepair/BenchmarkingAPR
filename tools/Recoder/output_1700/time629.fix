{
          "0": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i < isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "1": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "2": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i > isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "3": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i >= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "4": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn instant;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "5": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(long i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "6": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ninstant = period.getFieldType(i).getField(this).add(instant, (value * scalar));\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "7": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i || isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "8": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(isize <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "9": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn 0;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "10": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= i);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "11": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i && isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "12": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(scalar <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "13": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "14": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "15": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((period != null)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "16": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(instant <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "17": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i == isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "18": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn false;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "19": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nbreak;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "20": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((scalar != 0)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "21": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn 1;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "22": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(period <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "23": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(value <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "24": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "25": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);isize) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "26": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn null;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "27": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((instant != 0)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "28": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn true;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "29": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= scalar);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "30": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= instant);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "31": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((instant != null)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "32": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "33": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn scalar;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "34": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ninstant = 0;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "35": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;;i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "36": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);scalar) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "37": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= value);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "38": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= period);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "39": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((period != 0)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "40": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ninstant = null;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "41": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;( <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "42": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif(((scalar != 0) && (period != null))){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "43": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);instant) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "44": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ninstant++;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "45": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nreturn 2;            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "46": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "47": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ninstant = i;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "48": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ninstant = instant;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "49": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "50": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((value != 0)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "51": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((i != 0)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "52": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i != isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "53": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);period) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "54": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((scalar != null)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "55": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((instant == 0)){\nreturn instant;}            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "56": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= );i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "57": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((i != null)){\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n}\n        }\n        return instant;\n    }",
          "58": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i | isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "59": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i & isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "60": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);value) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "61": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\ncontinue;\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "62": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "63": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((instant == null)){\nreturn instant;}            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "64": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "65": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;( <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "66": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i < (i <= isize));i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "67": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nlong value = period.getValue(i);\n            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "68": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "69": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "70": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "71": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nfor(int i = 0,i = 0;(i <= isize);i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }",
          "72": "    public long add(ReadablePeriod period, long instant, int scalar) {\n        if (scalar != 0 && period != null) {\nif((instant == 0)){\nreturn 0;}            for (int i = 0, isize = period.size(); i <= isize; i++) {                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n                if (value != 0) {\n                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n                }\n            }\n        }\n        return instant;\n    }"
}