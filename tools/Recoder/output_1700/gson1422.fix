{
          "0": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(true){            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "1": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "2": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder.append(buffer, start, ((pos - start) - 1));\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "3": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder.append(buffer, start, (pos - start));\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "4": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder.append(readEscapeCharacter());\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "5": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(isLenient()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "6": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(hasNext()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "7": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(nextBoolean()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "8": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder = new StringBuilder();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "9": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nstart = pos;\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "10": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbeginArray();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "11": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nendArray();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "12": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbeginObject();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "13": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nendObject();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "14": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nconsumeNonExecutePrefix();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "15": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nnextNull();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "16": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nclose();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "17": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nskipValue();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "18": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\ncheckLenient();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "19": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nskipToEndOfLine();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "20": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\ndecodeLiteral();\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "21": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(start){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "22": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nreturn \"null\";          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "23": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nreturn builder.toString();          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "24": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(builder){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "25": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(buffer){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "26": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbreak;\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "27": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((pos - start)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "28": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(c){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "29": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(((pos - start) - 1)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "30": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(pos){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "31": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((c == \"null\")){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "32": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(1){            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "33": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((c == \"null\")){\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "34": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(!isLenient()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "35": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(!hasNext()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "36": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(!nextBoolean()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "37": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbreak;\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "38": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(-true){            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "39": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(skipping){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "40": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((builder == null)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "41": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nreturn new String(buffer, start, ((pos - start) - 1));          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "42": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(false){            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "43": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nreturn null;          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "44": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(.isLenient()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "45": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(.hasNext()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "46": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(.nextBoolean()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "47": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(!start){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "48": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(isLenient(1)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "49": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(hasNext(1)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "50": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(nextBoolean(1)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "51": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(fillBuffer()){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "52": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nreturn;\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "53": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(\"null\"){            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "54": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\ncontinue;\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "55": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((c == quote)){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "56": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder.append(buffer, start, ((pos - start) - 1));\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "57": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder.append(buffer, start, (pos - start));\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "58": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder.append(readEscapeCharacter());\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "59": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nbuilder = new StringBuilder();\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "60": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nstart = pos;\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "61": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((c != \"null\")){\n          if (false) {            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n}\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "62": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(null){            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "63": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\ncontinue;\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "64": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nreturn;\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "65": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif((start && (buffer != \"null\"))){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }",
          "66": "  private String nextString(char quote) throws IOException {\n    StringBuilder builder = null;\n    do {\n      /* the index of the first character not yet appended to the builder. */\n      int start = pos;\n      while (pos < limit) {\n        int c = buffer[pos++];\n\n        if (c == quote) {\n          if (skipping) {\n            return \"skipped!\";\n          } else if (builder == null) {\n            return new String(buffer, start, pos - start - 1);\n          } else {\n            builder.append(buffer, start, pos - start - 1);\n            return builder.toString();\n          }\n\n        } else if (c == '\\\\') {\nif(((c != \"null\") && (buffer == \"null\"))){\n            builder = new StringBuilder();\n          }\n          builder.append(buffer, start, pos - start - 1);\n          builder.append(readEscapeCharacter());\n          start = pos;\n        }\n      }\n\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, start, pos - start);\n    } while (fillBuffer(1));\n\n    throw syntaxError(\"Unterminated string\");\n  }"
}