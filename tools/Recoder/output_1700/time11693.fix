{
          "0": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "1": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length != 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "2": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((type != null)){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "3": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length >= 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "4": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((supportedType == null)){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "5": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((type != null) && !supportedType.isAssignableFrom(type))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "6": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length > 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "7": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((converters == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "8": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((i == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "9": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length <= 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "10": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((set == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "11": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length < 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "12": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((type == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "13": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((converter == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "14": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((supportedType == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "15": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(( == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "16": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length == 0)){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "17": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(converters){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "18": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(set){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "19": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(converter){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "20": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "21": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(length){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "22": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length && 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "23": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || ((type != null) && !supportedType.isAssignableFrom(type)))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "24": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || !supportedType.isAssignableFrom(type))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "25": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(i){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "26": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "27": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(!supportedType.isAssignableFrom(type)){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "28": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && ((type != null) && !supportedType.isAssignableFrom(type)))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "29": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && !supportedType.isAssignableFrom(type))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "30": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length == 1)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "31": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (length == 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "32": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length || 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "33": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (converters == 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "34": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (length == 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "35": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (length != 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "36": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (length != 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "37": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (converters == 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "38": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (converters != 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "39": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (converters != 0))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "40": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length == 1)){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "41": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((length == -1)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "42": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((supportedType == type)){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "43": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif((converters.iConverters == 0)){            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "44": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((supportedType == null) || ((type != null) && !supportedType.isAssignableFrom(type)))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "45": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (length == length))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "46": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (length == length))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "47": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nconverter = converters[i];\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "48": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nset = set.remove(i, null);\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "49": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (converters == converters))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "50": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (converters == type))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "51": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (converters == converters))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "52": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (converters == type))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "53": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (length == i))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "54": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (length == i))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "55": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) || (converters == i))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "56": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nif(((length == 0) && (length != length))){\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }",
          "57": "    private static Converter selectSlow(ConverterSet set, Class<?> type) {\n        Converter[] converters = set.iConverters;\n        int length = converters.length;\n        Converter converter;\n\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            if (supportedType == type) {\n                // Exact match.\n                return converter;\n            }\n\n            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {\n                // Eliminate the impossible.\n                set = set.remove(i, null);\n                converters = set.iConverters;\n                length = converters.length;\n            }\n        }\n\n        // Haven't found exact match, so check what remains in the set.\n\nbreak;\n            return null;\n        }\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // At this point, there exist multiple potential converters.\n\n        // Eliminate supertypes.\n        for (int i=length; --i>=0; ) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n            for (int j=length; --j>=0; ) {\n                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {\n                    // Eliminate supertype.\n                    set = set.remove(j, null);\n                    converters = set.iConverters;\n                    length = converters.length;\n                    i = length - 1;\n                }\n            }\n        }        \n        \n        // Check what remains in the set.\n\n        if (length == 1) {\n            // Found the one best match.\n            return converters[0];\n        }\n\n        // Class c implements a, b {}\n        // Converters exist only for a and b. Which is better? Neither.\n\n        StringBuilder msg = new StringBuilder();\n        msg.append(\"Unable to find best converter for type \\\"\");\n        msg.append(type.getName());\n        msg.append(\"\\\" from remaining set: \");\n        for (int i=0; i<length; i++) {\n            converter = converters[i];\n            Class<?> supportedType = converter.getSupportedType();\n\n            msg.append(converter.getClass().getName());\n            msg.append('[');\n            msg.append(supportedType == null ? null : supportedType.getName());\n            msg.append(\"], \");\n        }\n\n        throw new IllegalStateException(msg.toString());\n    }"
}