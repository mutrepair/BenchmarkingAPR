{
          "0": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(isMain()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "1": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(isAliased()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "2": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(isExposedToCallOrApply()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "3": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(hasUnknownTarget()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "4": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(hasExternTarget()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "5": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "6": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nreturn;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "7": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(isMain()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "8": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(isAliased()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "9": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(isExposedToCallOrApply()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "10": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(hasUnknownTarget()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "11": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(hasExternTarget()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "12": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "13": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!isMain()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "14": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!isAliased()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "15": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!isExposedToCallOrApply()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "16": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!hasUnknownTarget()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "17": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!hasExternTarget()){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "18": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions == null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "19": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(hasUnknownTarget){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "20": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((callsite != null)){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "21": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!isMain()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "22": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!isAliased()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "23": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!isExposedToCallOrApply()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "24": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!hasUnknownTarget()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "25": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!hasExternTarget()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "26": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((target != null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "27": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((callsite != null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "28": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "29": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(definitions){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "30": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitionProvider != null)){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "31": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((target != null)){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "32": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(definitions){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "33": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(callsite){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "34": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitionProvider != null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "35": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((target != null)){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "36": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(-true){      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "37": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((callsite == null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "38": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(computeForwardGraph){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "39": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(hasUnknownTarget){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "40": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(callsite){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "41": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(definitionProvider){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "42": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!definitions){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "43": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitionProvider == null)){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "44": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(!hasUnknownTarget){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "45": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(target.isFunction()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "46": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(definition){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "47": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ncallsite.hasExternTarget = true;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "48": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(computeForwardGraph){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "49": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ncallsite.hasUnknownTarget = true;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "50": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ndefinitions = false;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "51": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(computeBackwardGraph){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "52": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(\"null\"){      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "53": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ntargetFunction.addCallsitePossiblyTargetingFunction(callsite);\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "54": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ndefinitions = true;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "55": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ncallsite.addPossibleTarget(targetFunction);\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "56": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ntargetFunction = createFunction(target);\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "57": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions == null)){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "58": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(computeForwardGraph){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "59": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nbreak;\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "60": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(definition.isExtern()){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "61": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(computeBackwardGraph){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "62": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((targetFunction == null)){\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "63": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nbreak;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "64": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(definition.isExtern()){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "65": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(((target != null) && target.isFunction())){\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n}\n  }",
          "66": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(null){      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "67": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\n(Definition definition = ;\n:definitions)    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "68": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nreturn;\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "69": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(true){      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "70": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(false){      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "71": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ncallsite.hasExternTarget = true;\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "72": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nNode target = definition.getRValue();\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "73": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\ncallsite.hasUnknownTarget = true;\n      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "74": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nreturn;\nreturn;\n    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "75": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\nisMain(callsite);\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "76": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\nisAliased(callsite);\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "77": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\nisExposedToCallOrApply(callsite);\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "78": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\nhasUnknownTarget(callsite);\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "79": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif((definitions != null)){\nhasExternTarget(callsite);\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }",
          "80": "  private void connectCallsiteToTargets(Callsite callsite,\n      DefinitionProvider definitionProvider) {\n    Collection<Definition> definitions =\n      lookupDefinitionsForTargetsOfCall(callsite.getAstNode(),\n          definitionProvider);\n\nif(((definitions != null) && (definitionProvider == null))){\nreturn;\n}    if (false) {      callsite.hasUnknownTarget = true;\n    } else {\n      for (Definition definition : definitions) {\n        if (definition.isExtern()) {\n          callsite.hasExternTarget = true;\n        } else {\n          Node target = definition.getRValue();\n\n          if (target != null && target.isFunction()) {\n            Function targetFunction = functionsByNode.get(target);\n\n            if (targetFunction == null) {\n              targetFunction = createFunction(target);\n            }\n\n            if (computeForwardGraph) {\n              callsite.addPossibleTarget(targetFunction);\n            }\n\n            if (computeBackwardGraph) {\n              targetFunction.addCallsitePossiblyTargetingFunction(callsite);\n            }\n          } else {\n            callsite.hasUnknownTarget = true;\n          }\n        }\n      }\n    }\n  }"
}