{
          "0": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "1": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> 0);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "2": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> 1);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "3": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> 2);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "4": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> 7);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "5": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash - -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "6": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> -1);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "7": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "8": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash <= -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "9": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >= -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "10": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "11": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash *= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "12": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "13": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> -2);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "14": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash == -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "15": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nsecondQuad ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "16": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += hash;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "17": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "18": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash &= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "19": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash = (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "20": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash % -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "21": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash / -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "22": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash > -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "23": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nreportTooManyCollisions(hash);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "24": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nfirstQuad ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "25": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n_hashSeed ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "26": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash /= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "27": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (MULT >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "28": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash |= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "29": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nrelease();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "30": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nrehash();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "31": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nnukeSymbols();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "32": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nunshareMain();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "33": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nunshareCollision();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "34": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nunshareNames();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "35": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nexpandCollision();\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "36": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= hash;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "37": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash *= hash;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "38": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "39": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> false);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "40": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> null);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "41": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n-hash ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "42": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "43": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "44": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash = hash;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "45": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash++;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "46": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash - -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "47": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += firstQuad;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "48": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> \"null\");\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "49": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += ((hash >>> -15) + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "50": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash * -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "51": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nif(secondQuad){\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n}\n    }",
          "52": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash--;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "53": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> true);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "54": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n-secondQuad ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "55": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nif(hash){\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n}\n    }",
          "56": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= _hashSeed;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "57": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash >>> 7);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "58": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= (hash >>> -0);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "59": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash / -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "60": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (secondQuad * MULT);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "61": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += ((hash >>> -15) * -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "62": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n-_hashSeed ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "63": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= ((hash >>> -15) + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "64": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= (hash + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "65": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (secondQuad * MULT);\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "66": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= (hash - -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "67": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (firstQuad + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "68": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash ^= _hashSeed;\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "69": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += (hash >>> 7);\n        hash ^= (hash >>> -15); // try mixing first and second byte pairs first        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "70": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash *= (hash + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "71": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n ^= (hash >>> -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "72": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= (hash * -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "73": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash *= (hash - -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "74": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "75": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += ((hash >>> -15) + secondQuad);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "76": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash -= ((hash >>> -15) + secondQuad);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "77": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += ((hash >>> -15) * secondQuad);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "78": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nhash += ((hash * -15) + -15);\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }",
          "79": "    public int calcHash(int firstQuad, int secondQuad)\n    {\n        /* For two quads, let's change algorithm a bit, to spice\n         * things up (can do bit more processing anyway)\n         */\n        int hash = firstQuad;\nreturn;\n        hash += (secondQuad * MULT); // then add second quad\n        hash ^= _hashSeed;\n        hash += (hash >>> 7); // and shuffle some more\n        return hash;\n    }"
}