{
          "0": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "1": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "2": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "3": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((magic0 != 0) || (magic1 != 0x41))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "4": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59)) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "5": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nreturn;\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "6": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "7": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "8": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((magic0 != 0) || (magic1 != 0x41)) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "9": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "10": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\ncomplete();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "11": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "12": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nmakeMaps();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "13": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\ninit();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "14": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\ninitBlock();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "15": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nendBlock();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "16": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nclose();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "17": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nrecvDecodingTables();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "18": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\ngetAndMoveToFrontDecode();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "19": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupBlock();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "20": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupRandPartA();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "21": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupNoRandPartA();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "22": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupRandPartB();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "23": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupRandPartC();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "24": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupNoRandPartB();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "25": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nsetupNoRandPartC();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "26": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((magic0 != 0) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "27": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59)) && (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "28": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 == 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "29": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nthis.currentState = EOF;\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "30": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) && (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "31": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59)) || (magic5 != 0x59)) || (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "32": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) && (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "33": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((magic5 != 0x59)){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "34": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 >= 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "35": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "36": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((((magic0 != 0) || (magic1 != 0x41)) && (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "37": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "38": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) && (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "39": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) && (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "40": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nthis.data = new Data(this.blockSize100k);\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "41": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "42": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 2)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "43": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 > 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "44": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 2)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "45": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 2))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "46": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != false)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "47": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 1)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "48": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nbreak;\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "49": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((magic0 != 0)){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "50": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 <= 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "51": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nthis.blockRandomised = (bsR(1) == 1);\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "52": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 1)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "53": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((magic0 != 0) && (magic5 != 0x59))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "54": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 1))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "55": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "56": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nthis.storedBlockCRC = bsGetInt();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "57": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nthis.crc.initialiseCRC();\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "58": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nthis.currentState = START_BLOCK_STATE;\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "59": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != false)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "60": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 < 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "61": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 2)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "62": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != false))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "63": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\ncontinue;\n        } else if (magic0 != 0 || // '1'\n                   magic1 != 0x41 || // ')'\n                   magic2 != 0x59 || // 'Y'\n                   magic3 != 0x26 || // '&'\n                   magic4 != 0x53 || // 'S'\n                   magic5 != 0x59 // 'Y'                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "64": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((magic2 != 0x59)){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "65": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((magic1 != 0x41)){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "66": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x53)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "67": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x41)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "68": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x41))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "69": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != true)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "70": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif((magic4 != 0x53)){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "71": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x59)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "72": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x26)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "73": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 == 0x17) && (magic1 == 0x72)) && (magic2 == 0x45)) && (magic3 == 0x38)) && (magic4 == 0x50)) && (magic5 == 0x90))){\n                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "74": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 1)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "75": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x53))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "76": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x59)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "77": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x26)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "78": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x26))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "79": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x72)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "80": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x41)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "81": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x17)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "82": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x72)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "83": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x72))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }",
          "84": "    private void initBlock() throws IOException {\n        char magic0 = bsGetUByte();\n        char magic1 = bsGetUByte();\n        char magic2 = bsGetUByte();\n        char magic3 = bsGetUByte();\n        char magic4 = bsGetUByte();\n        char magic5 = bsGetUByte();\n\n        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n            complete(); // end of file\nif(((((((magic0 != 0) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x53)) || (magic4 != 0x53)) || (magic5 != 0x59))){                   ) {\n            this.currentState = EOF;\n            throw new IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n\n            /**\n             * Allocate data here instead in constructor, so we do not allocate\n             * it if the input file is empty.\n             */\n            if (this.data == null) {\n                this.data = new Data(this.blockSize100k);\n            }\n\n            // currBlockNo++;\n            getAndMoveToFrontDecode();\n\n            this.crc.initialiseCRC();\n            this.currentState = START_BLOCK_STATE;\n        }\n    }"
}