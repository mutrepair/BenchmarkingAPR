{
          "0": "    public static Date ceiling(final Date date, final int field) {\nif(true){            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "1": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nremove();\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "2": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nsuper.ceiling();\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "3": "    public static Date ceiling(final Date date, final int field) {\nif(hasNext()){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "4": "    public static Date ceiling(final Date date, final int field) {\nif(MODIFY_CEILING){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "5": "    public static Date ceiling(final Date date, final int field) {\nif(field){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "6": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nCalendar.remove();\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "7": "    public static Date ceiling(final Date date, final int field) {\nif(Calendar.hasNext()){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "8": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field != null)){\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n}\n    }",
          "9": "    public static Date ceiling(final Date date, final int field) {\nif(!hasNext()){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "10": "    public static Date ceiling(final Date date, final int field) {\nif(Calendar.getInstance()){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "11": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nthis.remove();\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "12": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nreturn null;        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "13": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nreturn field;        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "14": "    public static Date ceiling(final Date date, final int field) {\nif(date){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "15": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field == null)){\nreturn null;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "16": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field == null)){\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n}\n    }",
          "17": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nreturn;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "18": "    public static Date ceiling(final Date date, final int field) {\nif((field != null)){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "19": "    public static Date ceiling(final Date date, final int field) {\nif(!MODIFY_CEILING){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "20": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nfield = false;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "21": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nfield = true;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "22": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nsuper.ceiling(date);\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "23": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nfield = field;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "24": "    public static Date ceiling(final Date date, final int field) {\nif(!field){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "25": "    public static Date ceiling(final Date date, final int field) {\nif(-true){            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "26": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nfield++;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "27": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\ndate = false;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "28": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nsuper.ceiling(field);\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "29": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\n.remove();\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "30": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\ndate = true;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "31": "    public static Date ceiling(final Date date, final int field) {\nif(gval.getTime()){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "32": "    public static Date ceiling(final Date date, final int field) {\nif((field == null)){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "33": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\ndate = field;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "34": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nreturn true;        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "35": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nreturn false;        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "36": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nreturn this;        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "37": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nfield--;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "38": "    public static Date ceiling(final Date date, final int field) {\nif(){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "39": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field != null)){\nreturn null;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "40": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((date != null)){\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n}\n    }",
          "41": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nmodify(gval, field, MODIFY_CEILING);\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n}\n    }",
          "42": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nfield = null;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "43": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\ngval.setTime(date);\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "44": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((date == null)){\nreturn null;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "45": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nthis.field = field;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "46": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field == null)){\nreturn gval.getTime();}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "47": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nbreak;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "48": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((date == null)){\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n}\n    }",
          "49": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\ndate = null;\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "50": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field == null)){\nreturn false;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "51": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field == null)){\nreturn true;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "52": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif(!hasNext()){\nreturn null;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "53": "    public static Date ceiling(final Date date, final int field) {\nif((field && (field == null))){\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "54": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field == null)){\nreturn field;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "55": "    public static Date ceiling(final Date date, final int field) {\nif(null){            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "56": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((date != null)){\nreturn null;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "57": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((date == null)){\nreturn false;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "58": "    public static Date ceiling(final Date date, final int field) {        if (false) {            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n\nif((field != null)){\nreturn false;}        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }",
          "59": "    public static Date ceiling(final Date date, final int field) {\nif(false){            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        final Calendar gval = Calendar.getInstance();\n        gval.setTime(date);\n        modify(gval, field, MODIFY_CEILING);\n        return gval.getTime();\n    }"
}