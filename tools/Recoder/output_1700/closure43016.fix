{
          "0": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(true){          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "1": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "2": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nreturn;\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "3": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(DUPLICATE_OBJECT_KEY){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "4": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nt.report(key, DUPLICATE_OBJECT_KEY);\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "5": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\ngetters.add(key.getString());\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "6": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nsetters.add(key.getString());\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "7": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nt.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "8": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(key.getString()){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "9": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(!DUPLICATE_OBJECT_KEY){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "10": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(key){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "11": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nbreak;\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "12": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(key.getNext()){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "13": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(!key){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "14": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(setters){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "15": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(\"null\"){          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "16": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY != null)){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "17": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nbreak;\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "18": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(key.isGetterDef()){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "19": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif((key != null)){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "20": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(noCajaChecks){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "21": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((key != null)){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "22": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif(!key.isGetterDef()){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "23": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(!){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "24": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(!key.isGetterDef()){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "25": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "26": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nkey = null;\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "27": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(-true){          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "28": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(null){          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "29": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nfor(Node key = n.getFirstChild();(key != null);key = key.getNext()) {      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "30": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\ncontinue;\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "31": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif((DUPLICATE_OBJECT_KEY != null)){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "32": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif((setters != null)){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "33": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(!key.isSetterDef()){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "34": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY == null)){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "35": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && DUPLICATE_OBJECT_KEY)){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "36": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(getters.contains(key.getString())){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "37": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif(!key.isSetterDef()){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "38": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((!noCajaChecks && key.getString().endsWith(\"null\"))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "39": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nSet<String> setters = Sets.newHashSet();\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "40": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && (DUPLICATE_OBJECT_KEY != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "41": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif(getters.contains(key.getString())){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "42": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nif((!noCajaChecks && key.getString().endsWith(\"null\"))){\n}\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "43": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nt.report(key, DUPLICATE_OBJECT_KEY);\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "44": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && (key != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "45": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && (key.getString() != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "46": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\ngetters.add(key.getString());\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "47": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nt.report(key, ILLEGAL_NAME);\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "48": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nsetters.add(key.getString());\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "49": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif(false){          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "50": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && (setters != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "51": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\nSet<String> getters = Sets.newHashSet();\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\n        if (false) {          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "52": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\ncontinue;\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "53": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && (DUPLICATE_OBJECT_KEY == null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "54": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((key && (DUPLICATE_OBJECT_KEY != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "55": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY || (DUPLICATE_OBJECT_KEY != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "56": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY && (key == null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }",
          "57": "  private void checkObjectLiteral(NodeTraversal t, Node n) {\n    Set<String> getters = Sets.newHashSet();\n    Set<String> setters = Sets.newHashSet();\n    for (Node key = n.getFirstChild();\n         key != null;\n         key = key.getNext()) {\n      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n        t.report(key, ILLEGAL_NAME);\n      }\n      if (!key.isSetterDef()) {\n        // normal property and getter cases\n        if (getters.contains(key.getString())) {\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          getters.add(key.getString());\n        }\n      }\n      if (!key.isGetterDef()) {\n        // normal property and setter cases\nif((DUPLICATE_OBJECT_KEY || (key != null))){\n          t.report(key, DUPLICATE_OBJECT_KEY);\n        } else {\n          setters.add(key.getString());\n        }\n      }\n    }\n  }"
}