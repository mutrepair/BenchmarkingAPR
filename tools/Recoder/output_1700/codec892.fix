{
          "0": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "1": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "2": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii <= l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "3": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii >= l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "4": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "5": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "6": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "7": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "8": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "9": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "10": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "11": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii - l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "12": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii > l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "13": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "14": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(byte[] ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "15": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "16": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < ii);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "17": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);l_raw) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "18": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "19": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii == l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "20": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < ascii.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "21": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);jj) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "22": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nl_raw[ii] |= BITS[bits];\n        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "23": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "24": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "25": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int bits = 0;(bits < BITS.length);++bits) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "26": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "27": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii >> l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "28": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(long ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "29": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (ii < l_raw.length));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "30": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (ascii.length - 0));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "31": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;;ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "32": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "33": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "34": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "35": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nif((l_raw != null)){\n        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n}\n        }\n        return l_raw;\n    }",
          "36": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "37": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "38": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ascii == null);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "39": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(char[] ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "40": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "41": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "42": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "43": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ascii.length == 0);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "44": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "45": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nif((l_raw != 0)){\n        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n}\n        }\n        return l_raw;\n    }",
          "46": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "47": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "48": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);bits) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "49": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ascii.length >> 3);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "50": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < (ii < l_raw.length));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "51": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < (ascii.length - 0));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "52": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);EMPTY_BYTE_ARRAY) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "53": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(l_raw < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "54": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "55": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nif((l_raw == null)){\n        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n}\n        }\n        return l_raw;\n    }",
          "56": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "57": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "58": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "59": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii >>> l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "60": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(byte ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "61": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "62": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ascii) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "63": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < jj);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "64": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "65": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < ii);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "66": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii + l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "67": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "68": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii / l_raw.length);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "69": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nif((l_raw == null)){\nreturn EMPTY_BYTE_ARRAY;}        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "70": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < jj);ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "71": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (ii - 0));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "72": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nif((l_raw == null)){\nreturn 0;}        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "73": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < (ii - 0));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "74": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (jj - 0));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "75": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nreturn;\n        for (int ii = 0, jj = ascii.length - 0; ii < l_raw.length; ii++, jj -= 8) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "76": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (ii - ii));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "77": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < (ii - ii));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "78": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (ii - 1));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "79": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(jj < (ii - ascii.length));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }",
          "80": "    public static byte[] fromAscii(char[] ascii) {\n        if (ascii == null || ascii.length == 0) {\n            return EMPTY_BYTE_ARRAY;\n        }\n        // get length/8 times bytes with 3 bit shifts to the right of the length\n        byte[] l_raw = new byte[ascii.length >> 3];\n        /*\n         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n         * loop.\n         */\nfor(int ii = 0,ii = 0;(ii < (ii - ascii.length));ii++) {            for (int bits = 0; bits < BITS.length; ++bits) {\n                if (ascii[jj - bits] == '1') {\n                    l_raw[ii] |= BITS[bits];\n                }\n            }\n        }\n        return l_raw;\n    }"
}