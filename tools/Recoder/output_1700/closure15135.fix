{
          "0": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!fnType.isInterface()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "1": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() > true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "2": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && false)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "3": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() >= true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "4": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() < true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "5": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!baseType){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "6": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() == true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "7": "  private void maybeSetBaseType(FunctionType fnType) {\nif(baseType){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "8": "  private void maybeSetBaseType(FunctionType fnType) {\n!fnType.isInterface();\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "9": "  private void maybeSetBaseType(FunctionType fnType) {\nrecordNonEmptyReturn();\n    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "10": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() <= true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "11": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && true)){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "12": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.maybeSetBaseType() && true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "13": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && true)){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "14": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && 1)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "15": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() || true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "16": "  private void maybeSetBaseType(FunctionType fnType) {\nif(fnType.isInterface()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "17": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!fnType){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "18": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() != true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "19": "  private void maybeSetBaseType(FunctionType fnType) {\nif(fnType){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "20": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "21": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && !mayBeFromExterns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "22": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && !mayHaveNonEmptyReturns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "23": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && !mayHaveSingleThrow())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "24": "  private void maybeSetBaseType(FunctionType fnType) {\nif(mayBeFromExterns()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "25": "  private void maybeSetBaseType(FunctionType fnType) {\nif(mayHaveNonEmptyReturns()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "26": "  private void maybeSetBaseType(FunctionType fnType) {\nif(mayHaveSingleThrow()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "27": "  private void maybeSetBaseType(FunctionType fnType) {\nsuper.maybeSetBaseType();\n    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "28": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && fnType.isInterface())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "29": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && 0)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "30": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType && true)){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "31": "  private void maybeSetBaseType(FunctionType fnType) {\nif((fnType && true)){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "32": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && !fnType.isInterface())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "33": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && mayBeFromExterns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "34": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && mayHaveNonEmptyReturns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "35": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && mayHaveSingleThrow())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "36": "  private void maybeSetBaseType(FunctionType fnType) {\nif((fnType.isInterface() && true)){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "37": "  private void maybeSetBaseType(FunctionType fnType) {\nif((baseType && (!fnType.isInterface() && true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "38": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (fnType != true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "39": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && fnType)){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "40": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!mayBeFromExterns()){\nreturn;\n}    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "41": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!mayHaveNonEmptyReturns()){\nreturn;\n}    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "42": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!mayHaveSingleThrow()){\nreturn;\n}    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "43": "  private void maybeSetBaseType(FunctionType fnType) {\nsuper.maybeSetBaseType(fnType);\n    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "44": "  private void maybeSetBaseType(FunctionType fnType) {\nif(isInterface()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "45": "  private void maybeSetBaseType(FunctionType fnType) {\nreturn;\n    if (!fnType.isInterface() && true) {      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "46": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!baseType && (!fnType.isInterface() && true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "47": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!mayBeFromExterns()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "48": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!mayHaveNonEmptyReturns()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "49": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!mayHaveSingleThrow()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "50": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (fnType == true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "51": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (fnType != null))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "52": "  private void maybeSetBaseType(FunctionType fnType) {\nif(!isInterface()){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "53": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (!fnType.isInterface() != true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "54": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && -1)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "55": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (!fnType.isInterface() == true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "56": "  private void maybeSetBaseType(FunctionType fnType) {\nif(isInterface){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "57": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.getName() && true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "58": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (fnType == null))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "59": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && (baseType != true))){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "60": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && fnType.isInterface().mayBeFromExterns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "61": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && fnType.isInterface().mayHaveNonEmptyReturns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "62": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && fnType.isInterface().mayHaveSingleThrow())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "63": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && fnType.isInterface().mayBeFromExterns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "64": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && fnType.isInterface().mayHaveNonEmptyReturns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "65": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && fnType.isInterface().mayHaveSingleThrow())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "66": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.get() && true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "67": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.isInterface() && 2)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "68": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && !fnType.isInterface().mayBeFromExterns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "69": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && !fnType.isInterface().mayHaveNonEmptyReturns())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "70": "  private void maybeSetBaseType(FunctionType fnType) {\nif(((!fnType.isInterface() && true) && !fnType.isInterface().mayHaveSingleThrow())){\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }",
          "71": "  private void maybeSetBaseType(FunctionType fnType) {\nif((!fnType.lastIndexOf() && true)){      fnType.setPrototypeBasedOn(baseType);\n    }\n  }"
}