{
          "0": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount >= 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "1": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((wantedCount == -1)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "2": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((actualCount > 0)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "3": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount <= 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "4": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "5": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount >= -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "6": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount <= -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "7": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount < 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "8": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount == 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "9": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) || (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "10": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == 2) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "11": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == 1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "12": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreturn;\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "13": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount > -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "14": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (lastInvocation > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "15": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((lastInvocation == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "16": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount != 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "17": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "18": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreporter.neverWantedButInvoked(wanted, firstUndesired);\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "19": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((actualCount == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "20": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount > 0)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "21": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\ninvocationMarker.markVerified(actualInvocations, wanted);\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "22": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount != -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "23": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount < -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "24": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "25": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (wantedCount == -1))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "26": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && ( > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "27": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((( == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "28": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(actualCount){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "29": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((wantedCount < actualCount)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "30": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((wantedCount == -1)){\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "31": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "32": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == 0) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "33": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && ((wantedCount == -1) && (actualCount > 0)))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "34": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((actualCount > 0)){\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n}\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "35": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount > 0)) && (wantedCount == -1))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "36": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (wantedCount == -1)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "37": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount >> 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "38": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount > -1))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "39": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualInvocations > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "40": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount > 0)) && (wantedCount > actualCount))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "41": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((actualInvocations == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "42": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount > 0)) && (wantedCount < actualCount))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "43": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount >>> 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "44": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (wanted > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "45": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wanted == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "46": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (wantedCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "47": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount - 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "48": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount > 2))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "49": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount - -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "50": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(actualInvocations){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "51": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(!actualCount){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "52": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount > 1))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "53": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(actualInvocations.size()){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "54": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount >> -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "55": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((wantedCount > actualCount)){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "56": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nbreak;\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "57": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (invocations > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "58": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount >>> -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "59": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (lastInvocation < 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "60": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((invocations == -1) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "61": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (actualCount || 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "62": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreporter.neverWantedButInvoked(wanted, firstUndesired);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "63": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == false) && (actualCount > 0))){            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "64": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (lastInvocation < actualCount))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "65": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "66": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif(((wantedCount == -1) && (lastInvocation > actualCount))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "67": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\ncontinue;\n        } else if (wantedCount == -1 && actualCount > 0) {            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "68": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\ninvocationMarker.markVerified(actualInvocations, wanted);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "69": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nreporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "70": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount > 0)) && (lastInvocation > actualCount))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "71": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount > 0)) && (lastInvocation < actualCount))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "72": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount == -1)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "73": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount == 0)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "74": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (lastInvocation == -1)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "75": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (lastInvocation == 0)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "76": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (actualCount != null)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }",
          "77": "    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {\n        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);\n        \n        int actualCount = actualInvocations.size();\n        if (wantedCount > actualCount) {\n            Location lastInvocation = finder.getLastLocation(actualInvocations);\n            reporter.tooLittleActualInvocations(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);\nif((((wantedCount == -1) && (lastInvocation != null)) && (actualCount > 0))){\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.neverWantedButInvoked(wanted, firstUndesired); \n        } else if (wantedCount < actualCount) {\n            Location firstUndesired = actualInvocations.get(wantedCount).getLocation();\n            reporter.tooManyActualInvocations(wantedCount, actualCount, wanted, firstUndesired);\n        }\n        \n        invocationMarker.markVerified(actualInvocations, wanted);\n    }"
}