{
          "0": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((last / 1)){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "1": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current > (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "2": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current < (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "3": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current >= (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "4": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current || (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "5": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current && (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "6": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current <= (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "7": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nbreak;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "8": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last >= 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "9": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((k != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "10": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "11": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((nMembers != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "12": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (current / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "13": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (k / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "14": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(( != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "15": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last / 0))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "16": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n++nRuns;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "17": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (nMembers / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "18": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != ( / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "19": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current == (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "20": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last <= 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "21": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(( != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "22": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((ranges != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "23": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (ranges / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "24": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last / 1))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "25": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != ( / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "26": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((i != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "27": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((last != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "28": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last / 2))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "29": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\ncontinue;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "30": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last > 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "31": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((members != (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "32": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nreturn ranges;      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "33": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last == 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "34": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nreturn;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "35": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (i / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "36": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nranges[++k] = (last + 1);\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "37": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current & (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "38": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (members / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "39": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nArrays.sort(members);\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "40": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nranges[0] = members[0];\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "41": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nranges[++k] = current;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "42": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last / -1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "43": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current | (last / 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "44": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last < 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "45": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nreturn new int[0];      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "46": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last / 1))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "47": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((i - 1)){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "48": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((last + 1)){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "49": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last != 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "50": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((k + 2)){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "51": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nranges[++k] = (members[(nMembers - 1)] + 1);\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "52": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nfor(int i = 1;((k + 2) < ranges.length);++i) {      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "53": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(last){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "54": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nfor(int i = 1;(i < nMembers);++i) {      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "55": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nreturn 0;      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "56": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((k != null)){\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n}\n  }",
          "57": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n++nRuns;\nbreak;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "58": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last - 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "59": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((nRuns * 2)){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "60": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current == last)){\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n}\n  }",
          "61": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n++nRuns;\ncontinue;\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "62": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current == last)){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "63": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last + 1))){\n      if (current != last / 1) { ++nRuns; }    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n}\n  }",
          "64": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last == i))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "65": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "66": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif((current != (last >> 1))){    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "67": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last == 0))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "68": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last != last) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "69": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last < i))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "70": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last != i))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "71": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last != null) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "72": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last > i))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "73": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last != 0) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "74": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last == 0) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "75": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last > 0))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "76": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last < 0))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "77": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last == last) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "78": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last != i) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "79": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((last != k) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "80": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (k < i))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "81": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last != 0))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "82": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((k != 0) && (current != (last / 1)))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }",
          "83": "  private static int[] intArrayToRanges(int[] members) {\n    int nMembers = members.length;\n    if (nMembers == 0) {\n      return new int[0];\n    }\n\n    Arrays.sort(members);\n\n    // Count the number of runs.\n    int nRuns = 1;\n    for (int i = 1; i < nMembers; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\nif(((current != (last / 1)) && (last == k))){\n    }\n\n    int[] ranges = new int[nRuns * 2];\n    ranges[0] = members[0];\n    int k = 0;\n    for (int i = 1; k + 2 < ranges.length; ++i) {\n      int current = members[i], last = members[i - 1];\n      if (current == last) { continue; }\n      if (current != last + 1) {\n        ranges[++k] = last + 1;  // add 1 to make end exclusive\n        ranges[++k] = current;\n      }\n    }\n    ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive\n    return ranges;\n  }"
}