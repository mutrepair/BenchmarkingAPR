{
          "0": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch > -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "1": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch < -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "2": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch >= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "3": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "4": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "5": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch || -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "6": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((escCodes <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "7": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 1)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "8": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 2)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "9": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((_outputTail + (6 * (end - offset)))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "10": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0xc0)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "11": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch == -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "12": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((6 * (end - offset))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "13": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch & 0x3f)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "14": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((end - offset)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "15": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch >> 6)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "16": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= -1)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "17": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(ch){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "18": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch && -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "19": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0x80)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "20": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\n_flushBuffer();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "21": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((outputBuffer <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "22": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputBuffer[outputPtr++] = (byte)ch;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "23": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputBuffer[outputPtr++] = BYTE_BACKSLASH;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "24": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nwriteStartArray();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "25": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nwriteEndArray();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "26": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nwriteStartObject();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "27": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nwriteEndObject();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "28": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nwriteNull();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "29": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nflush();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "30": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nclose();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "31": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\n_releaseBuffers();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "32": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\n_writeNull();\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "33": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputBuffer[outputPtr++] = (byte)escape;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "34": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 6)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "35": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputPtr = _writeGenericEscape(ch, outputPtr);\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "36": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nreturn;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "37": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch < (ch <= -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "38": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0x3f)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "39": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0x7FF)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "40": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((outputPtr <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "41": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= -127)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "42": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nbreak;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "43": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputPtr = _outputMultiByteChar(ch, outputPtr);\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "44": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch <= -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "45": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((_outputTail + (6 * (end - offset)))){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "46": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputBuffer[outputPtr++] = (byte)(0xc0 | (ch >> 6));\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "47": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < ch))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "48": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch != -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "49": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || ch)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "50": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\n_outputTail = outputPtr;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "51": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((offset <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "52": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0x7FF)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "53": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch != null)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "54": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(!ch){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "55": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((6 * (end - offset))){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "56": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\noutputBuffer[outputPtr++] = (byte)(0x80 | (ch & 0x3f));\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "57": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((escape > 0)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "58": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((end - offset)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "59": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < escCodes))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "60": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch || (ch <= -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "61": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "62": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch & 0x3f)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "63": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch >> 6)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "64": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= -2)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "65": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((_outputTail + (6 * (end - offset))) > _outputEnd)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "66": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (escCodes[ch] == 0))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "67": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((-ch <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "68": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch < ch)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "69": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((escape > 0)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "70": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((_outputTail <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "71": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((BYTE_BACKSLASH <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "72": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch - -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "73": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch > ch))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "74": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch > -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "75": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < outputBuffer))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "76": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch > escCodes))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "77": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((escCodes[ch] == 0)){\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n}\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "78": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < 0))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "79": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((_outputBuffer <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "80": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) && (ch < ch))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "81": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((escape <= -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "82": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch <= 0x7FF)){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "83": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch & -127)){                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "84": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) && (ch < escCodes))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "85": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif((ch != null)){\ncontinue;\n}            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "86": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) && (ch < 0))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "87": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < offset))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "88": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) && (ch < -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "89": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch > 0))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "90": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch <= ch))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "91": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch > outputBuffer))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "92": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\ncontinue;\n            if (ch <= -127) {                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "93": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch <= -127) || (ch < outputPtr))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }",
          "94": "    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n        throws IOException, JsonGenerationException\n    {\n        // Ok: caller guarantees buffer can have room; but that may require flushing:\n        if ((_outputTail +  6 * (end - offset)) > _outputEnd) {\n            _flushBuffer();\n        }\n\n        int outputPtr = _outputTail;\n\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        \n        while (offset < end) {\n            int ch = cbuf[offset++];\nif(((ch > 0) || (ch <= -127))){\n                 if (escCodes[ch] == 0) {\n                     outputBuffer[outputPtr++] = (byte) ch;\n                     continue;\n                 }\n                 int escape = escCodes[ch];\n                 if (escape > 0) { // 2-char escape, fine\n                     outputBuffer[outputPtr++] = BYTE_BACKSLASH;\n                     outputBuffer[outputPtr++] = (byte) escape;\n                 } else {\n                     // ctrl-char, 6-byte escape...\n                     outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7FF) { // fine, just needs 2 byte output\n                outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));\n                outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        }\n        _outputTail = outputPtr;\n    }"
}