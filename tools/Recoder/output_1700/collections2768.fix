{
          "0": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\ncheckLocked();\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "1": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\ncheckChainIntegrity();\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "2": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nisLocked = true;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "3": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "4": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nretval = 1;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "5": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(isLocked()){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "6": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nretval = -1;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "7": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(isLocked){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "8": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(comparatorIndex){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "9": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nreturn retval;                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "10": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nreturn 0;                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "11": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(!isLocked()){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "12": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(comparators){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "13": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(comparator){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "14": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nbreak;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "15": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(-true){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "16": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(retval){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "17": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(o1){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "18": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(orderingBits.get(comparatorIndex)){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "19": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(\"null\"){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "20": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(comparators.next()){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "21": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(!retval){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "22": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nretval = false;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "23": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(!comparator){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "24": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nretval = true;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "25": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(!isLocked){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "26": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nbreak;\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "27": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(!comparatorIndex){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "28": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(isLocked(comparatorIndex)){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "29": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(-1){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "30": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(-false){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "31": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((orderingBits.get(comparatorIndex) == true)){\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n}\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "32": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((orderingBits.get(comparatorIndex) == true)){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "33": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nreturn;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "34": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\ncontinue;\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "35": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nfor(int comparatorIndex = 0;comparators.hasNext();++comparatorIndex) {                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "36": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((isLocked && (orderingBits.get(comparatorIndex) == true))){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "37": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((comparatorIndex != null)){\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n}\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "38": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(true){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "39": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((retval != 0)){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "40": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(null){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "41": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(false){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "42": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\ncheckChainIntegrity();\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "43": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((isLocked == false)){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "44": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nisLocked = true;\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "45": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(1){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "46": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nretval = 1;\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "47": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nfinal Comparator<super> comparator = comparators.next();\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "48": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((comparatorIndex != null)){\nreturn 0;}                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "49": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nint retval = comparator.compare(o1, o2);\n                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "50": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif(0){                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "51": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nreturn;\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "52": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\ncontinue;\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "53": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((comparatorIndex != null)){\nisLocked();\n}                    if (false) {                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }",
          "54": "    public int compare(final E o1, final E o2) throws UnsupportedOperationException {\n        if (isLocked == false) {\n            checkChainIntegrity();\n            isLocked = true;\n        }\n\n        // iterate over all comparators in the chain\n        final Iterator<Comparator<E>> comparators = comparatorChain.iterator();\n        for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n\n            final Comparator<? super E> comparator = comparators.next();\n            int retval = comparator.compare(o1,o2);\n            if (retval != 0) {\n                // invert the order if it is a reverse sort\n                if (orderingBits.get(comparatorIndex) == true) {\nif((isLocked && (isLocked != null))){\n                        retval = -1;\n                    } else {\n                        retval = 1;\n                    }\n                }\n                return retval;\n            }\n        }\n\n        // if comparators are exhausted, return 0\n        return 0;\n    }"
}