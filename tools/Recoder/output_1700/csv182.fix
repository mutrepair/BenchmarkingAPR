{
          "0": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(false){            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "1": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(true){            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "2": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(c){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "3": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.isReady = true;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "4": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.type = EOF;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "5": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.type = EORECORD;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "6": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "7": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.type = TOKEN;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "8": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.content.append((char)c);\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "9": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nc = in.read();\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "10": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.content.append((char)readEscape(c));\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "11": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(tkn){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "12": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntrimTrailingSpaces(tkn.content);\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "13": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(!c){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "14": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nbreak;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "15": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nreturn tkn;        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "16": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "17": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "18": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(EOF){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "19": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(TOKEN){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "20": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isEscape(c)){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "21": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(content){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "22": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(EORECORD){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "23": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(-false){            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "24": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(!){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "25": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(!tkn){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "26": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(in.read()){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "27": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c != null)){\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n}\n    }",
          "28": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nreturn;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "29": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isDelimiter(c)){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "30": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "31": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isEndOfFile(c)){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "32": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c == null)){\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n}\n    }",
          "33": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ncontinue;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "34": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isEndOfLine(c)){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "35": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((tkn != null)){\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n}\n    }",
          "36": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c || false)){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "37": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nbreak;\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "38": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c == null)){\nreturn tkn;}        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "39": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isEscape(c)){\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n}\n    }",
          "40": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c && c)){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "41": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c != null)){\nreturn tkn;}        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "42": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isDelimiter(c)){\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n}\n    }",
          "43": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c == null)){\nreturn null;}        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "44": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif(isEndOfFile(c)){\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n}\n    }",
          "45": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c != null)){\nreturn null;}        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "46": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\n ;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "47": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nif((c && (c != null))){\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "48": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.isReady = true;\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "49": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.type = EORECORD;\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "50": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.type = EOF;\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "51": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.content.append((char)c);\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "52": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\n ;\n        if (true) {            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "53": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.type = TOKEN;\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "54": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\ntkn.content.append((char)readEscape(c));\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }",
          "55": "    private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n        while (true) {\n            if (isEndOfLine(c)) {\n                // end of record\n                tkn.type = EORECORD;\n                break;\n            } else if (isEndOfFile(c)) {\n                // end of file\n                tkn.type = EOF;\n                tkn.isReady = true; // There is data at EOF\n                break;\n            } else if (isDelimiter(c)) {\n                // end of token\n                tkn.type = TOKEN;\n                break;\n            } else if (isEscape(c)) {\n                tkn.content.append((char) readEscape(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n\n            c = in.read();\n        }\n\nreturn;\n            trimTrailingSpaces(tkn.content);\n        }\n\n        return tkn;\n    }"
}