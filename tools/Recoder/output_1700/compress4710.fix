{
          "0": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(true){                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "1": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nclose();\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "2": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\npositionAtCentralDirectory();\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "3": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\naddDummy();\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "4": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nreturn;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "5": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "6": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(startsWithLocalFileHeader()){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "7": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(ze){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "8": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nlenToSkip -= skipped;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "9": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(e){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "10": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nbreak;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "11": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(SHORT){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "12": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\narchive.readFully(b);\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "13": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(LFH_OFFSET_FOR_FILENAME_LENGTH){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "14": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(offsetEntry){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "15": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT) + SHORT) + fileNameLen)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "16": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nze.setExtra(localExtraData);\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "17": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\narchive.seek((offset + LFH_OFFSET_FOR_FILENAME_LENGTH));\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "18": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(dataOffset){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "19": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "20": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((offset + LFH_OFFSET_FOR_FILENAME_LENGTH)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "21": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\narchive.readFully(localExtraData);\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "22": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT) + SHORT)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "23": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\noffsetEntry.dataOffset = false;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "24": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nsetNameAndCommentFromExtraFields(ze, (NameAndComment)entriesWithoutEFS.get(ze));\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "25": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\noffsetEntry.dataOffset = true;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "26": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(!startsWithLocalFileHeader()){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "27": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\noffsetEntry.dataOffset = (((((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT) + SHORT) + fileNameLen) + extraFieldLen);\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "28": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(ZipShort.startsWithLocalFileHeader()){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "29": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\noffsetEntry.dataOffset = null;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "30": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(offset){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "31": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(!ze){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "32": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nbreak;\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "33": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\ncontinue;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "34": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\noffsetEntry.dataOffset = 0;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "35": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((((((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT) + SHORT) + fileNameLen) + extraFieldLen)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "36": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((offset != null)){\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n}\n        }\n    }",
          "37": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((offset != null)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "38": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((SHORT != null)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "39": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nLFH_OFFSET_FOR_FILENAME_LENGTH = false;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "40": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((offsetEntry != null)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "41": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "42": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((skipped <= 0)){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "43": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif((skipped <= 0)){\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n}\n        }\n    }",
          "44": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(null){                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "45": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(false){                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "46": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nreturn;\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "47": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nint skipped = archive.skipBytes(lenToSkip);\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "48": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nlenToSkip -= skipped;\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "49": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nreturn;\nreturn;\n            if (false) {                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "50": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(0){                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "51": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(\"null\"){                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "52": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((SHORT != null) && (((((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT) + SHORT) + fileNameLen) + extraFieldLen))){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "53": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((offset != null) && (offset + LFH_OFFSET_FOR_FILENAME_LENGTH))){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "54": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((offset != null) && (((((offset + LFH_OFFSET_FOR_FILENAME_LENGTH) + SHORT) + SHORT) + fileNameLen) + extraFieldLen))){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "55": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((offset != null) && (skipped <= 0))){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }",
          "56": "    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n        throws IOException {\n        Enumeration e = getEntries();\n        while (e.hasMoreElements()) {\n            ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n            OffsetEntry offsetEntry = (OffsetEntry) entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            /*dataOffsets.put(ze,\n                            new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                                     + SHORT + SHORT + fileNameLen + extraFieldLen));\n            */\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\nif(((offset != null) && (lenToSkip > 0))){\n                setNameAndCommentFromExtraFields(ze,\n                                                 (NameAndComment)\n                                                 entriesWithoutEFS.get(ze));\n            }\n        }\n    }"
}