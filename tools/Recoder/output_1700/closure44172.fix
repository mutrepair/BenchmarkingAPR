{
          "0": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(n.isVar()){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "1": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nreturn;\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "2": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.getFirstChild() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "3": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.getLastChild() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "4": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isExprResult() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "5": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((parent != null)){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "6": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isScript() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "7": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() && false)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "8": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.getName() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "9": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isBlock() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "10": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((parent.isBlock() || parent.isScript())){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "11": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "12": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((parent.isVar() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "13": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() == true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "14": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() > true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "15": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nadd(getFunctionAnnotation(n));\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "16": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(n){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "17": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((context.isVar() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "18": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nadd(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "19": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nsuper.add(n, context);\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "20": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((parent != null)){\n}\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "21": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() < true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "22": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nadd(getTypeAnnotation(rhs));\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "23": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((rhs.isVar() && true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "24": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(parent){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "25": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(n.isExprResult()){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "26": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() != true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "27": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((parent.isBlock() || parent.isScript())){\n}\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "28": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(!n){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "29": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() || true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "30": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() >= true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "31": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "32": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(context){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "33": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(parent.isBlock()){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "34": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(parent.isScript()){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "35": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nbreak;\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "36": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n && (n.isVar() && true))){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "37": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nn.isVar();\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "38": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(((n.isVar() && true) && (n.isVar() != true))){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "39": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() <= true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "40": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\ncontinue;\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "41": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(((n.isVar() && true) && (context != true))){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "42": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(((n.isVar() && true) && (n.isVar() == true))){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "43": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(n.isFunction()){\n}\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "44": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(n.isFunction()){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "45": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isExprResult() && n.getFirstChild().isAssign())){\n}\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "46": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(((parent != null) && (parent.isBlock() || parent.isScript()))){\n}\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "47": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isExprResult() && n.getFirstChild().isAssign())){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "48": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif(((parent != null) && (parent.isBlock() || parent.isScript()))){\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "49": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() && 1)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "50": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() | true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "51": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nif((n.isVar() & true)){        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "52": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nadd(getFunctionAnnotation(n));\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "53": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nreturn;\nreturn;\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "54": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nadd(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "55": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nbreak;\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "56": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nNode rhs = n.getFirstChild().getLastChild();\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "57": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nreturn;\nbreak;\n      } else if (n.isVar()\n          && true) {        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "58": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nsuper.add(n, context);\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }",
          "59": "  void add(Node n, Context context) {\n    Node parent = n.getParent();\n    if (parent != null\n        && (parent.isBlock()\n            || parent.isScript())) {\n      if (n.isFunction()) {\n        add(getFunctionAnnotation(n));\n      } else if (n.isExprResult()\n          && n.getFirstChild().isAssign()) {\n        Node rhs = n.getFirstChild().getLastChild();\n        add(getTypeAnnotation(rhs));\nreturn;\n        add(getTypeAnnotation(n.getFirstChild().getFirstChild()));\n      }\n    }\n\n    super.add(n, context);\n  }"
}