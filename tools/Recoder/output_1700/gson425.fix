{
          "0": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029));  }",
          "1": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || (codePoint == 0x2028));  }",
          "2": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 1)));  }",
          "3": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint == 127) && (codePoint <= 0x9f));  }",
          "4": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 1)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "5": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 1)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "6": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x2028)));  }",
          "7": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "8": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x2029)));  }",
          "9": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2029)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "10": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "11": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == false)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "12": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x9f)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "13": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint >= 0x9f)));  }",
          "14": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= false)));  }",
          "15": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint < 0x20);  }",
          "16": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 127)));  }",
          "17": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2028)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "18": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == true)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "19": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint <= 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "20": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x20)));  }",
          "21": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 1) && (codePoint <= 0x9f)));  }",
          "22": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint >= 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "23": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x20)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "24": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= true)));  }",
          "25": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 2)));  }",
          "26": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "27": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 127)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "28": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x9f)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "29": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0)));  }",
          "30": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint < 0x9f)));  }",
          "31": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint > 0x9f)));  }",
          "32": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint == 0x2029);  }",
          "33": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == false)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "34": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f))));  }",
          "35": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f))) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "36": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint == 0x2028);  }",
          "37": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f))));  }",
          "38": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "39": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x20)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "40": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 2)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "41": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "42": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == true)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "43": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 127)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "44": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint <= 0x9f);  }",
          "45": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= \"null\")));  }",
          "46": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint > 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "47": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint < 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "48": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || (codePoint == 0x2029));  }",
          "49": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == \"null\")) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "50": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= -1)));  }",
          "51": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 0x2028) && (codePoint <= 0x9f)));  }",
          "52": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) && ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "53": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 2)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "54": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((codePoint < 0x20) || ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f))));  }",
          "55": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == -1)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "56": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "57": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (codePoint == 127);  }",
          "58": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 0x2029) && (codePoint <= 0x9f)));  }",
          "59": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn (((codePoint < 0x20) || (codePoint == 0x2028)) && ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "60": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 0x9f) && (codePoint <= 0x9f)));  }",
          "61": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 2) && (codePoint <= 0x9f)));  }",
          "62": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == \"null\")) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "63": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint == 0x9f)));  }",
          "64": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 0x20) && (codePoint <= 0x9f)));  }",
          "65": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 0) && (codePoint <= 0x9f)));  }",
          "66": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == -1)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "67": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint - 0x9f)));  }",
          "68": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= -false)));  }",
          "69": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == -false)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "70": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn codePoint;  }",
          "71": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == false) && (codePoint <= 0x9f)));  }",
          "72": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= -\"null\")));  }",
          "73": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint - 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "74": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == -\"null\")) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "75": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint <= null)));  }",
          "76": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint != 0x9f)));  }",
          "77": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint || 0x9f)));  }",
          "78": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint != 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }",
          "79": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint == 0x2029)) || ((codePoint == 127) && (codePoint + 0x9f)));  }",
          "80": "  private static boolean isControlCharacter(int codePoint) {\n    // JSON spec defines these code points as control characters, so they must be escaped\nreturn ((((codePoint < 0x20) || (codePoint == 0x2028)) || (codePoint + 0x2029)) || ((codePoint == 127) && (codePoint <= 0x9f)));  }"
}