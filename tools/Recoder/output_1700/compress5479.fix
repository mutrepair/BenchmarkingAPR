{
          "0": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "1": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i >= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "2": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i > maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "3": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i < maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "4": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "5": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "6": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i == maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "7": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = i,i = i;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "8": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= i);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "9": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nreturn;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "10": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nlimit[i] = 0;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "11": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "12": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\n((--i > 0))            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "13": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i || maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "14": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "15": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nperm[pp++] = j;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "16": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nbase[i] = 0;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "17": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nmakeMaps();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "18": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\ninit();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "19": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\ninitBlock();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "20": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nendBlock();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "21": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\ncomplete();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "22": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nclose();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "23": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nrecvDecodingTables();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "24": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\ngetAndMoveToFrontDecode();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "25": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupBlock();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "26": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupRandPartA();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "27": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupNoRandPartA();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "28": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupRandPartB();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "29": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupRandPartC();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "30": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupNoRandPartB();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "31": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nsetupNoRandPartC();\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "32": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i && maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "33": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nbase[(length[i] + 1)]++;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "34": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= base);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "35": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(long i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "36": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = base,i = base;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "37": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= MAX_CODE_LEN);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "38": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "39": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = MAX_CODE_LEN,i = MAX_CODE_LEN;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "40": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = 0;(i < alphaSize);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "41": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i != maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "42": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = 1,i = 1;(i < MAX_CODE_LEN);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "43": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= alphaSize);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "44": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = alphaSize,i = alphaSize;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "45": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = perm,i = perm;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "46": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((length[j] == i)){\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n}\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "47": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i >>> maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "48": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(base <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "49": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i & maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "50": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nb += base[i];\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "51": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nbase[i] = b;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "52": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(MAX_CODE_LEN <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "53": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((i != null)){\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n}\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "54": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int j = 0;(j < alphaSize);j++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "55": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(alphaSize <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "56": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "57": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "58": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "59": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = MAX_CODE_LEN;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "60": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);base) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "61": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i <= maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "62": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nbreak;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "63": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((i == null)){\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n}\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "64": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((i > 0)){\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n}\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "65": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((i == null)){\ncontinue;\n}        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "66": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\ncontinue;\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "67": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((i == 0)){\n        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n}\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "68": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nif((i == null)){\nreturn;\n}        for (int i = minLen, pp = -1; i <= maxLen; i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "69": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(i < 0);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "70": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen < minLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "71": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen < maxLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "72": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen < i);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "73": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = MAX_CODE_LEN;(minLen < minLen);i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "74": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen < (maxLen - 0));i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "75": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen < (minLen - 0));i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }",
          "76": "    private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize) {\nfor(int i = minLen,i = minLen;(minLen < (maxLen - 1));i++) {            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n\n        for (int i = MAX_CODE_LEN; --i > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n\n        for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }"
}