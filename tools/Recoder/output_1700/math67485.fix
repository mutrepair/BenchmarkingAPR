{
          "0": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "1": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "2": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecRelativeTolerance * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "3": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "4": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((yScale == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "5": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (scalAbsoluteTolerance + (scalRelativeTolerance * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "6": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(scalAbsoluteTolerance * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "7": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(yScale + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "8": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (yScale * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "9": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(errSum * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "10": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(scalRelativeTolerance * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "11": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(j * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "12": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (yScale * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "13": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(yScale * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "14": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((scalAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "15": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecRelativeTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "16": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecRelativeTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "17": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecAbsoluteTolerance * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "18": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(error * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "19": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "20": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance - null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "21": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (scalAbsoluteTolerance * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "22": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (vecAbsoluteTolerance == null);\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "23": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((scalRelativeTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "24": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (double)(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "25": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((errSum == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "26": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (errSum * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "27": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((j == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "28": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (scalRelativeTolerance * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "29": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(vecAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "30": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((error == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "31": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nerror += (ratio * ratio);\n        final double tol = (vecAbsoluteTolerance == null) ?\n                           (scalAbsoluteTolerance + scalRelativeTolerance * yScale) :\n                               (vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "32": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (vecAbsoluteTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "33": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance[j] == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "34": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalAbsoluteTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "35": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (errSum * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "36": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecAbsoluteTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "37": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (error * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "38": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(vecRelativeTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "39": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (j * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "40": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecRelativeTolerance[j] == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "41": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(errSum + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "42": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nif((yScale != null)){\n        final double tol = (vecAbsoluteTolerance == null) ?\n                           (scalAbsoluteTolerance + scalRelativeTolerance * yScale) :\n                               (vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n}\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "43": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalRelativeTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "44": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (vecRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "45": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance + null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "46": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nif((yScale == null)){\n        final double tol = (vecAbsoluteTolerance == null) ?\n                           (scalAbsoluteTolerance + scalRelativeTolerance * yScale) :\n                               (vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n}\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "47": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nbreak;\n        final double tol = (vecAbsoluteTolerance == null) ?\n                           (scalAbsoluteTolerance + scalRelativeTolerance * yScale) :\n                               (vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "48": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nreturn;\n        final double tol = (vecAbsoluteTolerance == null) ?\n                           (scalAbsoluteTolerance + scalRelativeTolerance * yScale) :\n                               (vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "49": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = ((vecAbsoluteTolerance == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):((yScale == null))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "50": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (((yScale == null) && (vecAbsoluteTolerance == null)))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "51": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (((yScale == null) && (yScale == null)))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "52": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (((yScale == null) && (scalAbsoluteTolerance == null)))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "53": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (((yScale == null) || (yScale == null)))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "54": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (((yScale == null) && (vecRelativeTolerance == null)))?(scalAbsoluteTolerance + (scalRelativeTolerance * yScale)):(vecAbsoluteTolerance[j] * (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "55": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (double)(((((((yScale * yScale) * null) * vecAbsoluteTolerance) * vecAbsoluteTolerance) * vecAbsoluteTolerance) * null) + (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }",
          "56": "  protected double estimateError(final double[][] yDotK,\n                                 final double[] y0, final double[] y1,\n                                 final double h) {\n\n    double error = 0;\n\n    for (int j = 0; j < mainSetDimension; ++j) {\n        final double errSum = E1 * yDotK[0][j] +  E3 * yDotK[2][j] +\n                              E4 * yDotK[3][j] +  E5 * yDotK[4][j] +\n                              E6 * yDotK[5][j] +  E7 * yDotK[6][j];\n\n        final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));\nfinal double tol = (double)((((((yScale * yScale) * null) * (yScale * yScale)) * vecAbsoluteTolerance) * null) + (vecRelativeTolerance[j] * yScale));\n        final double ratio  = h * errSum / tol;\n        error += ratio * ratio;\n\n    }\n\n    return FastMath.sqrt(error / mainSetDimension);\n\n  }"
}