{
          "0": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) || (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "1": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) && (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "2": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "3": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node != current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "4": "        protected void nodeRemoved(final Node<E> node) {\ninit();\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "5": "        protected void nodeRemoved(final Node<E> node) {\nremoveAllNodes();\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "6": "        protected void nodeRemoved(final Node<E> node) {\nremove();\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "7": "        protected void nodeRemoved(final Node<E> node) {\ncheckModCount();\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "8": "        protected void nodeRemoved(final Node<E> node) {\nclose();\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "9": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) > (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "10": "        protected void nodeRemoved(final Node<E> node) {\nreturn;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "11": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) < (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "12": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node == node))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "13": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == node) == (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "14": "        protected void nodeRemoved(final Node<E> node) {\nnext = node.next;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "15": "        protected void nodeRemoved(final Node<E> node) {\ncurrentRemovedByAnother = false;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "16": "        protected void nodeRemoved(final Node<E> node) {\nnextIndexValid = false;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "17": "        protected void nodeRemoved(final Node<E> node) {\nif((node != (node == current))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "18": "        protected void nodeRemoved(final Node<E> node) {\nsuper.nodeRemoved();\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "19": "        protected void nodeRemoved(final Node<E> node) {\nif((node == (node == current))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "20": "        protected void nodeRemoved(final Node<E> node) {\ncurrentRemovedByAnother = true;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "21": "        protected void nodeRemoved(final Node<E> node) {\ncurrent = null;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "22": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node >= current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "23": "        protected void nodeRemoved(final Node<E> node) {\nif(hasNext(node)){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "24": "        protected void nodeRemoved(final Node<E> node) {\nif(hasPrevious(node)){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "25": "        protected void nodeRemoved(final Node<E> node) {\nsuper.nodeRemoved(node);\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "26": "        protected void nodeRemoved(final Node<E> node) {\nif(!hasNext()){\nreturn;\n}            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "27": "        protected void nodeRemoved(final Node<E> node) {\nif(!hasPrevious()){\nreturn;\n}            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "28": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) || (node == current))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "29": "        protected void nodeRemoved(final Node<E> node) {\nremoveNode(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "30": "        protected void nodeRemoved(final Node<E> node) {\nbroadcastNodeChanged(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "31": "        protected void nodeRemoved(final Node<E> node) {\nbroadcastNodeRemoved(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "32": "        protected void nodeRemoved(final Node<E> node) {\nbroadcastNodeInserted(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "33": "        protected void nodeRemoved(final Node<E> node) {\nnodeChanged(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "34": "        protected void nodeRemoved(final Node<E> node) {\nnodeRemoved(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "35": "        protected void nodeRemoved(final Node<E> node) {\nnodeInserted(node);\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "36": "        protected void nodeRemoved(final Node<E> node) {\nif(hasNext()){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "37": "        protected void nodeRemoved(final Node<E> node) {\nif(hasPrevious()){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "38": "        protected void nodeRemoved(final Node<E> node) {\nif(hasNext()){\nreturn;\n}            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "39": "        protected void nodeRemoved(final Node<E> node) {\nif(hasPrevious()){\nreturn;\n}            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "40": "        protected void nodeRemoved(final Node<E> node) {\nnode--;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "41": "        protected void nodeRemoved(final Node<E> node) {\nif((((node == next) == (node == current)) || (node == next))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "42": "        protected void nodeRemoved(final Node<E> node) {\nif(!node){\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n}\n        }",
          "43": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) || (node == next))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "44": "        protected void nodeRemoved(final Node<E> node) {\nif(node){\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n}\n        }",
          "45": "        protected void nodeRemoved(final Node<E> node) {\nnode = node;\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "46": "        protected void nodeRemoved(final Node<E> node) {\nif((((node == next) == (node == current)) || (node == current))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "47": "        protected void nodeRemoved(final Node<E> node) {\nif((node != next)){\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n}\n        }",
          "48": "        protected void nodeRemoved(final Node<E> node) {\nif((node == next)){\nreturn;\n}            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "49": "        protected void nodeRemoved(final Node<E> node) {\nnext = node.next;\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "50": "        protected void nodeRemoved(final Node<E> node) {\nif((((node == next) == (node == current)) == node)){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "51": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node <= current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "52": "        protected void nodeRemoved(final Node<E> node) {\ncurrentRemovedByAnother = false;\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "53": "        protected void nodeRemoved(final Node<E> node) {\nif((node == next)){\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n}\n        }",
          "54": "        protected void nodeRemoved(final Node<E> node) {\nnextIndexValid = false;\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "55": "        protected void nodeRemoved(final Node<E> node) {\nif((node == current)){\n            if (node == next == (node == current)) {                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n}\n        }",
          "56": "        protected void nodeRemoved(final Node<E> node) {\nif((node == current)){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "57": "        protected void nodeRemoved(final Node<E> node) {\nif((node == next)){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "58": "        protected void nodeRemoved(final Node<E> node) {\ncurrent = null;\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "59": "        protected void nodeRemoved(final Node<E> node) {\ncurrentRemovedByAnother = true;\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "60": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node == next))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "61": "        protected void nodeRemoved(final Node<E> node) {\nif(((node != next) || ((node == next) == (node == current)))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "62": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) || ((node == next) == (node == current)))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "63": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == next) == (node == currentRemovedByAnother))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "64": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == current) == (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "65": "        protected void nodeRemoved(final Node<E> node) {\nif(((node == currentRemovedByAnother) == (node == current))){                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "66": "        protected void nodeRemoved(final Node<E> node) {\nif((((node == next) == (node == current)) || (node != next))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "67": "        protected void nodeRemoved(final Node<E> node) {\nif(((node != next) && ((node == next) == (node == current)))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "68": "        protected void nodeRemoved(final Node<E> node) {\nif((((node == next) == (node == current)) || (node == node))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "69": "        protected void nodeRemoved(final Node<E> node) {\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }",
          "70": "        protected void nodeRemoved(final Node<E> node) {\nif((((node == next) == (node == current)) || (node != node))){\n                // state where next() followed by previous()\n                next = node.next;\n                current = null;\n                currentRemovedByAnother = true;\n            } else if (node == next) {\n                // state where next() not followed by previous()\n                // and we are matching next node\n                next = node.next;\n                currentRemovedByAnother = false;\n            } else if (node == current) {\n                // state where next() not followed by previous()\n                // and we are matching current (last returned) node\n                current = null;\n                currentRemovedByAnother = true;\n                nextIndex--;\n            } else {\n                nextIndexValid = false;\n                currentRemovedByAnother = false;\n            }\n        }"
}