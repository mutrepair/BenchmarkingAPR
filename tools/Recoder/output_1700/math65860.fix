{
          "0": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g >= 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "1": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g == 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "2": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g <= 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "3": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g != 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "4": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g > 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "5": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn previous;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "6": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nbreak;\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "7": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn Transformer.PLUS;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "8": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn null;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "9": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn Transformer.MINUS;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "10": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(g){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "11": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn Transformer.MAX;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "12": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn Transformer.UNINITIALIZED;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "13": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((forward == 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "14": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g < 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "15": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g == g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "16": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g < g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "17": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn g;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "18": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || g)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "19": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn false;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "20": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\ncontinue;\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "21": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "22": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g == 1)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "23": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g > g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "24": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn;\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "25": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn true;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "26": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((previous == 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "27": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn forward;                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "28": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g == g)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "29": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == g) || (g == 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "30": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) && (g == g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "31": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g != g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "32": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(g.isEmpty()){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "33": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g == null))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "34": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(g.equals(g)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "35": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == null) || (g == 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "36": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g == 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "37": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g == forward))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "38": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g || (g == 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "39": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "40": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g <= g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "41": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(!g){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "42": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g == previous))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "43": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g >= g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "44": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g != null) || (g == 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "45": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nif((g <= 0)){\n}\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "46": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) && (g < g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "47": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g != null))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "48": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g > 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "49": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (previous == g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "50": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g >= 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "51": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g < 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "52": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g < previous))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "53": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || g.isEmpty())){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "54": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) && (g != g))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "55": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) && g)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "56": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g == forward)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "57": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g != g) || (g == 0))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "58": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(((g == 0) || (g < forward))){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "59": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(( == 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "60": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g == 2)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "61": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nreturn null;break;\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "62": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif(( == 0)){                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "63": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nif((g >= 0)){\n}\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "64": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nif((g < 0)){\n}\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "65": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nif((g > 0)){\n}\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "66": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\nbreak;\nbreak;\n                        }\n                    case MIN   :\n                        if (g == 0) {                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "67": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g > 0)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }",
          "68": "        protected  Transformer selectTransformer(final Transformer previous,\n                                                 final double g, final boolean forward) {\n            if (forward) {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. backward one) was a triggered increasing event\n                            return Transformer.PLUS;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. backward one) was an ignored decreasing event\n                            return Transformer.MIN;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g <= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\nif((g < 0)){\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g >= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            } else {\n                switch (previous) {\n                    case UNINITIALIZED :\n                        // we are initializing the first point\n                        if (g > 0) {\n                            // initialize as if previous root (i.e. forward one) was an ignored decreasing event\n                            return Transformer.MAX;\n                        } else if (g < 0) {\n                            // initialize as if previous root (i.e. forward one) was a triggered increasing event\n                            return Transformer.MINUS;\n                        } else {\n                            // we are exactly at a root, we don't know if it is an increasing\n                            // or a decreasing event, we remain in uninitialized state\n                            return Transformer.UNINITIALIZED;\n                        }\n                    case PLUS  :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MIN;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MINUS :\n                        if (g >= 0) {\n                            // we have crossed the zero line on an ignored decreasing event,\n                            // we must change the transformer\n                            return Transformer.MAX;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MIN   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.MINUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    case MAX   :\n                        if (g <= 0) {\n                            // we have crossed the zero line on a triggered increasing event,\n                            // we must change the transformer\n                            return Transformer.PLUS;\n                        } else {\n                            // we are still in the same status\n                            return previous;\n                        }\n                    default    :\n                        // this should never happen\n                        throw new MathInternalError();\n                }\n            }\n        }"
}