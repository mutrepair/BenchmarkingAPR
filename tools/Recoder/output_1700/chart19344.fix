{
          "0": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "1": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(getFollowDataInSubranges()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "2": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(getUseSubrangePaint()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "3": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(isDomainZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "4": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(isRangeZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "5": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.getFollowDataInSubranges()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "6": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.getUseSubrangePaint()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "7": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.isDomainZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "8": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.isRangeZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "9": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(!getFollowDataInSubranges()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "10": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(!getUseSubrangePaint()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "11": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(!isDomainZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "12": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(!isRangeZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "13": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.getFollowDataInSubranges()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "14": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.getUseSubrangePaint()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "15": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.isDomainZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "16": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.isRangeZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "17": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(-false){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "18": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.bulbRadius.getFollowDataInSubranges()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "19": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.bulbRadius.getUseSubrangePaint()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "20": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.bulbRadius.isDomainZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "21": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.bulbRadius.isRangeZoomable()){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "22": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(bulbRadius){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "23": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.bulbRadius){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "24": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(null){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "25": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(this.gap){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "26": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nbreak;\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "27": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(-true){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "28": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nreturn;\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "29": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif((this.gap != that.gap)){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "30": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(\"null\"){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "31": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(0){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "32": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(false){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "33": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nreturn false;        if (true) {            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "34": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(true){            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "35": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nreturn;\n        if (true) {            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "36": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\n(;;)            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "37": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nbreak;\n        if (true) {            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "38": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(((this.getFollowDataInSubranges() != null) && (this.size() == 0))){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "39": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(((this.getUseSubrangePaint() != null) && (this.size() == 0))){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "40": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(((this.isDomainZoomable() != null) && (this.size() == 0))){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "41": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ThermometerPlot)) {\n            return false;\n        }\n        ThermometerPlot that = (ThermometerPlot) obj;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeAxis, that.rangeAxis)) {\n            return false;\n        }\n        if (this.axisLocation != that.axisLocation) {\n            return false;\n        }\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.padding, that.padding)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.thermometerStroke,\n                that.thermometerStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.thermometerPaint,\n                that.thermometerPaint)) {\n            return false;\n        }\n        if (this.units != that.units) {\n            return false;\n        }\n        if (this.valueLocation != that.valueLocation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.valueFormat, that.valueFormat)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.mercuryPaint, that.mercuryPaint)) {\n            return false;\n        }\n        if (this.subrange != that.subrange) {\n            return false;\n        }\n        if (this.followDataInSubranges != that.followDataInSubranges) {\n            return false;\n        }\n        if (!equal(this.subrangeInfo, that.subrangeInfo)) {\n            return false;\n        }\n        if (this.useSubrangePaint != that.useSubrangePaint) {\n            return false;\n        }\n        if (this.bulbRadius != that.bulbRadius) {\n            return false;\n        }\nif(((this.isRangeZoomable() != null) && (this.size() == 0))){\n            return false;\n        }\n        if (this.gap != that.gap) {\n            return false;\n        }\n        for (int i = 0; i < this.subrangePaint.length; i++) {\n            if (!PaintUtilities.equal(this.subrangePaint[i],\n                    that.subrangePaint[i])) {\n                return false;\n            }\n        }\n        return true;\n    }"
}