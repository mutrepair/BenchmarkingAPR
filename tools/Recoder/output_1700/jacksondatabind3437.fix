{
          "0": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((typeDeser.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "1": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() != 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "2": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "3": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((contextAnnotations.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "4": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((wrapper.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "5": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((isRequired.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "6": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() >= 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "7": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() > 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "8": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "9": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((InternCache.instance.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "10": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() <= 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "11": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((type.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "12": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nreturn;\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "13": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((type != 0)){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "14": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!propName.length()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "15": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((type == 0)){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "16": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nsuper.SettableBeanProperty();\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "17": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(propName.length()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "18": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((wrapper != 0)){\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n}\n    }",
          "19": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName != 0)){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "20": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((type != 0)){\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n}\n    }",
          "21": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.SettableBeanProperty() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "22": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(propName.isEmpty()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "23": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!wrapper){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "24": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(type){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "25": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!propName.isEmpty()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "26": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(isRequired()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "27": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(hasValueDeserializer()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "28": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(hasValueTypeDeserializer()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "29": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(hasViews()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "30": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName == 0)){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "31": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(wrapper){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "32": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (typeDeser != null))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "33": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (typeDeser != null))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "34": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\n_propName = InternCache.instance.intern(propName);\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "35": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() != 0)){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "36": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (propName.length() == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "37": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (propName.length() == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "38": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() < 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "39": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((.length() == 0)){            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "40": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((wrapper == 0)){\nreturn;\n}        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "41": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!type){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "42": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (wrapper == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "43": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((type != 0) && (propName.length() == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "44": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((wrapper == 0)){\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n}\n    }",
          "45": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (wrapper == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "46": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (wrapper != 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "47": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\n_propName = \"null\";\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "48": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!isRequired()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "49": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!hasValueDeserializer()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "50": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!hasValueTypeDeserializer()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "51": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(!hasViews()){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "52": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName.length() == 0)){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "53": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(propName){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "54": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((type != 0) || (propName.length() == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "55": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((propName != 0)){\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n}\n    }",
          "56": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\ntypeDeser = typeDeser.forProperty(this);\n        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "57": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (wrapper != 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "58": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif((type == 0)){\nreturn;\n}        if (propName.length() == 0) {            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "59": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (typeDeser == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "60": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((type == 0) || (propName.length() == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "61": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (typeDeser == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "62": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (propName.length() != 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "63": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((type == 0) && (propName.length() == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "64": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (typeDeser != 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "65": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\npropName.length();\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "66": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\n_propName = InternCache.instance.intern(propName);\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "67": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (type == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "68": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) || (typeDeser != 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "69": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\nif(((propName.length() == 0) && (type == 0))){\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }",
          "70": "    protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n            TypeDeserializer typeDeser, Annotations contextAnnotations,\n            boolean isRequired)\n    {\n        /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n         *   field names are (usually) interned too, hence lookups will be faster.\n         */\n        // 23-Oct-2009, tatu: should this be disabled wrt [JACKSON-180]?\n        /*   Probably need not, given that namespace of field/method names\n         *   is not unbounded, unlike potential JSON names.\n         */\n_propName = \"null\";\n            _propName = \"\";\n        } else {\n            _propName = InternCache.instance.intern(propName);\n        }\n        _type = type;\n        _wrapperName = wrapper;\n        _isRequired = isRequired;\n        _contextAnnotations = contextAnnotations;\n        _viewMatcher = null;\n\n        // 30-Jan-2012, tatu: Important: contextualize TypeDeserializer now...\n        if (typeDeser != null) {\n            typeDeser = typeDeser.forProperty(this);\n        }\n        _valueTypeDeserializer = typeDeser;\n        _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n    }"
}