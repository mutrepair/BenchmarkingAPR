{
          "0": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((false && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "1": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(isBlack(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "2": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "3": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(isEmpty()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "4": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(hasNext()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "5": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(hasPrevious()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "6": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "7": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && isRed(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "8": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(currentNode){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "9": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(dataElement){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "10": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "11": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "12": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((isEmpty() && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "13": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((hasNext() && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "14": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((hasPrevious() && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "15": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(isEmpty(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "16": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(hasNext(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "17": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(hasPrevious(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "18": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isEmpty(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "19": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && hasNext(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "20": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && hasPrevious(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "21": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((currentNode && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "22": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "23": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && isBlack(currentNode, currentNode))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "24": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isEmpty())){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "25": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasNext())){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "26": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasPrevious())){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "27": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((dataElement && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "28": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isEmpty(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "29": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasNext(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "30": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasPrevious(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "31": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((isEmpty() && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "32": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((hasNext() && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "33": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((hasPrevious() && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "34": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true || isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "35": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((isBlack(currentNode, dataElement) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "36": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isEmpty())){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "37": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && hasNext())){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "38": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && hasPrevious())){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "39": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((currentNode && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "40": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && isBlack(dataElement, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "41": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((dataElement && (true && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "42": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((isEmpty(currentNode, dataElement) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "43": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((hasNext(currentNode, dataElement) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "44": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((hasPrevious(currentNode, dataElement) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "45": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((1 && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "46": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((((true && isBlack(currentNode, dataElement)) && isBlack(currentNode, dataElement)) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "47": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!currentNode){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "48": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && currentNode)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "49": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && currentNode)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "50": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!isEmpty()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "51": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!hasNext()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "52": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!hasPrevious()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "53": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "54": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!dataElement){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "55": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(isBlack()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "56": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "57": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "58": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isBlack(currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "59": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isEmpty(currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "60": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasNext(currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "61": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasPrevious(currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "62": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isEmpty(dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "63": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasNext(dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "64": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasPrevious(dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "65": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && ((true && isBlack(currentNode, dataElement)) && isBlack(currentNode, dataElement)))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "66": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isEmpty(currentNode, dataElement)) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "67": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && hasNext(currentNode, dataElement)) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "68": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && hasPrevious(currentNode, dataElement)) && isBlack(currentNode, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "69": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && isBlack(currentNode, dataElement))){\n\n}            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "70": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nisBlack(currentNode, dataElement);\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "71": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((-false && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "72": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((\"null\" && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "73": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isBlack(currentNode, currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "74": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(rootNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "75": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(lastReturnedNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "76": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(nextNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "77": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(previousNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "78": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(leftNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "79": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(rightNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "80": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(parentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "81": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nclear();\n        while (true && isBlack(currentNode, dataElement)) {            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "82": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nmodify();\n        while (true && isBlack(currentNode, dataElement)) {            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n}\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "83": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\ngrow();\n        while (true && isBlack(currentNode, dataElement)) {            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "84": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nshrink();\n        while (true && isBlack(currentNode, dataElement)) {            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "85": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nremove();\n        while (true && isBlack(currentNode, dataElement)) {            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "86": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "87": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "88": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((0 && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "89": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isBlack(dataElement, currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "90": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!isEmpty(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "91": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!hasNext(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "92": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!hasPrevious(currentNode, dataElement)){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "93": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif((true && isBlack(dataElement, dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "94": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && doRedBlackDeleteFixup(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "95": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((2 && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "96": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && (currentNode == currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "97": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((-true && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "98": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((null && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "99": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && (currentNode == dataElement))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "100": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(!isBlack()){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "101": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(isBlack(currentNode, dataElement)){\n        while (true && isBlack(currentNode, dataElement)) {            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n}\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "102": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(isBlack){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "103": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isBlack(currentNode, currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "104": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((-1 && isBlack(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "105": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && isEmpty(currentNode, currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "106": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasNext(currentNode, currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "107": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nif(((true && isBlack(currentNode, dataElement)) && hasPrevious(currentNode, currentNode))){\n            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }",
          "108": "    private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n        Node<K, V> currentNode = replacementNode;\n\nwhile((true && currentNode(currentNode, dataElement))){            if (currentNode.isLeftChild(dataElement)) {\n                Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getRightChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateRight(siblingNode, dataElement);\n\n                        siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                    rotateLeft(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            } else {\n                Node<K, V> siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n\n                if (isRed(siblingNode, dataElement)) {\n                    makeBlack(siblingNode, dataElement);\n                    makeRed(getParent(currentNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                }\n\n                if (isBlack(getRightChild(siblingNode, dataElement), dataElement)\n                    && isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                    makeRed(siblingNode, dataElement);\n\n                    currentNode = getParent(currentNode, dataElement);\n                } else {\n                    if (isBlack(getLeftChild(siblingNode, dataElement), dataElement)) {\n                        makeBlack(getRightChild(siblingNode, dataElement), dataElement);\n                        makeRed(siblingNode, dataElement);\n                        rotateLeft(siblingNode, dataElement);\n\n                        siblingNode = getLeftChild(getParent(currentNode, dataElement), dataElement);\n                    }\n\n                    copyColor(getParent(currentNode, dataElement), siblingNode, dataElement);\n                    makeBlack(getParent(currentNode, dataElement), dataElement);\n                    makeBlack(getLeftChild(siblingNode, dataElement), dataElement);\n                    rotateRight(getParent(currentNode, dataElement), dataElement);\n\n                    currentNode = rootNode[dataElement.ordinal()];\n                }\n            }\n        }\n\n        makeBlack(currentNode, dataElement);\n    }"
}