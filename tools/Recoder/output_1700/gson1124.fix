{
          "0": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result >= 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "1": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result > 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "2": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result == 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "3": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result <= 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "4": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result < 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "5": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result != 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "6": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nbeginArray();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "7": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nendArray();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "8": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nbeginObject();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "9": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nendObject();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "10": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nconsumeNonExecutePrefix();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "11": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nnextNull();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "12": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nclose();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "13": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nskipValue();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "14": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\ncheckLenient();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "15": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nskipToEndOfLine();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "16": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\ndecodeLiteral();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "17": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((Double.isNaN(result) || Double.isInfinite(result))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "18": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.beginArray();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "19": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.endArray();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "20": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.beginObject();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "21": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.endObject();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "22": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.consumeNonExecutePrefix();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "23": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.nextNull();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "24": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.close();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "25": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.skipValue();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "26": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.checkLenient();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "27": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.skipToEndOfLine();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "28": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nDouble.decodeLiteral();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "29": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(result){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "30": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result && 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "31": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((result != null)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "32": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result || 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "33": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nadvance();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "34": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((result != 1.0)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "35": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nresult++;\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "36": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(result.isEmpty()){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "37": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nresult = result;\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "38": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nreturn 0;\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "39": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result == 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "40": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(!result){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "41": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(isLenient()){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "42": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(hasNext()){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "43": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(nextBoolean()){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "44": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nquickPeek();\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "45": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((value >= 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "46": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif(result){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "47": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((Double.isNaN(result) || Double.isInfinite(result))){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "48": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (Double.isNaN(result) || Double.isInfinite(result)))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "49": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((result == null)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "50": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result != 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "51": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nresult--;\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "52": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nreturn false;\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "53": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((lenient >= 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "54": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nresult = false;\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "55": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((\"null\" + peek())){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "56": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result > 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "57": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result > 0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "58": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((result == 1.0)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "59": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((\"null\" + value)){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "60": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nreturn;\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "61": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nresult = true;\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "62": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result & 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "63": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(( >= 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "64": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result > 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "65": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result == 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "66": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result > 0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "67": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((result instanceof 1.0)){      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "68": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((result > 0)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "69": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result != null))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "70": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((value == null)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "71": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result == null))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "72": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result == 0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "73": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result < 0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "74": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result < 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "75": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result != 1.0) && (result >= 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "76": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nif((result < 0)){\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n}\n  }",
          "77": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result > result))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "78": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result < 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "79": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result < 0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "80": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result != 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "81": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result > lenient))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "82": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result == result))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "83": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result == lenient))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "84": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result >= 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "85": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result == 1.0) && (result >= 1.0))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "86": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n    if ((result >= 1.0)) {      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\nreturn result;\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "87": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif((value == null)){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "88": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result > result))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "89": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) && (result < result))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }",
          "90": "  public double nextDouble() throws IOException {\n    quickPeek();\n    if (value == null) {\n      throw new IllegalStateException(\"Expected a double but was \" + peek());\n    }\n\n    double result = Double.parseDouble(value);\n\nif(((result >= 1.0) || (result > lenient))){\n      throw new NumberFormatException(\"JSON forbids octal prefixes: \" + value);\n    }\n\n    if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + value);\n    }\n\n    advance();\n    return result;\n  }"
}