{
          "0": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(false){            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "1": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(true){            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "2": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isAbstract()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "3": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isConcrete()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "4": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isThrowable()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "5": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isArrayType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "6": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isEnumType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "7": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isInterface()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "8": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isPrimitive()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "9": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isFinal()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "10": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isContainerType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "11": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isCollectionLikeType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "12": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(isMapLikeType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "13": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(useStaticType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "14": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(hasGenericTypes()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "15": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isAbstract()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "16": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isConcrete()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "17": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isThrowable()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "18": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isArrayType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "19": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isEnumType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "20": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isInterface()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "21": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isPrimitive()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "22": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isFinal()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "23": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isContainerType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "24": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isCollectionLikeType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "25": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!isMapLikeType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "26": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!useStaticType()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "27": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!hasGenericTypes()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "28": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(subclass){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "29": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nreturn;\n}    }",
          "30": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nreturn;\n    }",
          "31": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(superClass){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "32": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!subclass){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "33": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(((\"null\" + subclass.getName()) + \"null\")){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "34": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(_class.getName()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "35": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass != null)){\n}\n    }",
          "36": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((\"null\" + subclass.getName())){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "37": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass != null)){\nreturn;\n}    }",
          "38": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isAbstract()){\nreturn;\n}    }",
          "39": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isConcrete()){\nreturn;\n}    }",
          "40": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isThrowable()){\nreturn;\n}    }",
          "41": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isArrayType()){\nreturn;\n}    }",
          "42": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isEnumType()){\nreturn;\n}    }",
          "43": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isInterface()){\nreturn;\n}    }",
          "44": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isPrimitive()){\nreturn;\n}    }",
          "45": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isFinal()){\nreturn;\n}    }",
          "46": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isContainerType()){\nreturn;\n}    }",
          "47": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isCollectionLikeType()){\nreturn;\n}    }",
          "48": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(isMapLikeType()){\nreturn;\n}    }",
          "49": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(useStaticType()){\nreturn;\n}    }",
          "50": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(hasGenericTypes()){\nreturn;\n}    }",
          "51": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isAbstract()){\nreturn;\n}    }",
          "52": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isConcrete()){\nreturn;\n}    }",
          "53": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isThrowable()){\nreturn;\n}    }",
          "54": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isArrayType()){\nreturn;\n}    }",
          "55": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isEnumType()){\nreturn;\n}    }",
          "56": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isInterface()){\nreturn;\n}    }",
          "57": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isPrimitive()){\nreturn;\n}    }",
          "58": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isFinal()){\nreturn;\n}    }",
          "59": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isContainerType()){\nreturn;\n}    }",
          "60": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isCollectionLikeType()){\nreturn;\n}    }",
          "61": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!isMapLikeType()){\nreturn;\n}    }",
          "62": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!useStaticType()){\nreturn;\n}    }",
          "63": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!hasGenericTypes()){\nreturn;\n}    }",
          "64": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!superClass){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "65": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\n}\n    }",
          "66": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(subclass.getName()){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "67": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(-false){            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "68": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsuper._assertSubclass();\n    }",
          "69": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((subclass == null)){\nreturn;\n}    }",
          "70": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(getName){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "71": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(superClass){\nreturn;\n}    }",
          "72": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsuperClass = false;\n    }",
          "73": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(-true){            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "74": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(!getName){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "75": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsuperClass = superClass;\n    }",
          "76": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(subclass){\nreturn;\n}    }",
          "77": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsuperClass = true;\n    }",
          "78": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(!superClass){\nreturn;\n}    }",
          "79": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(superClass){\n}\n    }",
          "80": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsuperClass++;\n    }",
          "81": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((superClass == \"null\")){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "82": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((subclass != null)){\nreturn;\n}    }",
          "83": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsubclass = false;\n    }",
          "84": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == \"null\")){\nreturn;\n}    }",
          "85": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsubclass = superClass;\n    }",
          "86": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsubclass = true;\n    }",
          "87": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((subclass != null)){\n}\n    }",
          "88": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((superClass == null)){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "89": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nsuperClass = null;\n    }",
          "90": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((subclass == null)){\n}\n    }",
          "91": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif(((\"null\" + subclass.getName()) + \"null\")){\n}\n    }",
          "92": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((((\"null\" + subclass.getName()) + \"null\") + _class.getName())){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "93": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((!superClass && (((\"null\" + subclass.getName()) + \"null\") + _class.getName()))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "94": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((\"null\" + subclass.getName())){\n}\n    }",
          "95": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == superClass)){\nreturn;\n}    }",
          "96": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((!superClass || (((\"null\" + subclass.getName()) + \"null\") + _class.getName()))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "97": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(null){            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "98": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nbreak;\n    }",
          "99": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\ncontinue;\n    }",
          "100": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif(1){            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "101": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisAbstract();\n}    }",
          "102": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisConcrete();\n}    }",
          "103": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisThrowable();\n}    }",
          "104": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisArrayType();\n}    }",
          "105": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisEnumType();\n}    }",
          "106": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisInterface();\n}    }",
          "107": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisPrimitive();\n}    }",
          "108": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisFinal();\n}    }",
          "109": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisContainerType();\n}    }",
          "110": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisCollectionLikeType();\n}    }",
          "111": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nisMapLikeType();\n}    }",
          "112": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nuseStaticType();\n}    }",
          "113": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nhasGenericTypes();\n}    }",
          "114": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((superClass && (superClass == null))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "115": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nreturn false;}    }",
          "116": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((!superClass && (superClass == null))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "117": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((superClass || (superClass == null))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "118": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nreturn null;}    }",
          "119": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nbreak;\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "120": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "121": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((!superClass && (superClass != null))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "122": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {\nif((!superClass || (superClass == null))){\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }",
          "123": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nreturn true;}    }",
          "124": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nsuperClass = false;\n}    }",
          "125": "    protected void _assertSubclass(Class<?> subclass, Class<?> superClass)\n    {        if (!true) {            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName());\n        }\n    }\n\nif((superClass == null)){\nsuperClass = superClass;\n}    }"
}