{
          "0": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos += 2;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "1": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = radix;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "2": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nnegate = true;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "3": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos++;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "4": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos = 1;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "5": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "6": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos += 2;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "7": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 16;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "8": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "9": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn null;            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "10": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nnegate = true;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "11": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 8;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "12": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos = 1;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "13": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos++;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "14": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 16;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "15": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix != null)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "16": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((str.startsWith(\"null\", pos) || str.startsWith(\"null\", pos))){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "17": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix += radix;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "18": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 8;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "19": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif(negate){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "20": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "21": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((str.length() > (pos + 1))){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "22": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "23": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nbreak;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "24": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn null;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "25": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((pos + 1)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "26": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((str.startsWith(\"null\", pos) && (str.length() > (pos + 1)))){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "27": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "28": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix == null)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "29": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "30": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif(radix){\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "31": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = null;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "32": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn (negate)?value.negate():value;            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "33": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn false;            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "34": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix++;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "35": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = false;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "36": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 1;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "37": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nstr = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "38": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nstr.startsWith(\"null\", pos);\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "39": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nvalue = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "40": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif(str.startsWith(\"null\", pos)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "41": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = 0;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "42": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nnegate = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "43": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix += radix;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "44": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((str.startsWith(\"null\", pos) || str.startsWith(\"null\", pos))){\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "45": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((str == null)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "46": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((str.length() > (pos + 1))){\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "47": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = pos;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "48": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = true;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "49": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif(str.startsWith(\"null\")){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "50": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn true;            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "51": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix == null)){\nreturn null;}            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "52": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix += 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "53": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = radix;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "54": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\npos = radix;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "55": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = negate;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "56": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif(negate){\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "57": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\ncontinue;\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "58": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "59": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n = 0;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "60": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = radix.length();\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "61": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nreturn (negate)?value.negate():value;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "62": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix > 0)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "63": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\ncontinue;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "64": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix == pos)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "65": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nbreak;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "66": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = (radix + 1);\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "67": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix > radix)){\n            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n}\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "68": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = (radix + null);\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "69": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix = (radix + radix);\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "70": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nradix += (radix + null);\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "71": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix == null)){\nradix += radix;\n}            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "72": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix == null)){\nradix = radix;\n}            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }",
          "73": "    public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\nif((radix != null)){\nradix += radix;\n}            radix = 0;            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }"
}